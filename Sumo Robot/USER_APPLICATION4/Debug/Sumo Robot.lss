
Sumo Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00001a12  00001aa6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005b  00802000  00802000  00001aa6  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00001aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002303  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000004f0  00000000  00000000  00002338  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ca4c  00000000  00000000  00002828  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021d1  00000000  00000000  0000f274  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007e1b  00000000  00000000  00011445  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000013d0  00000000  00000000  00019260  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00026656  00000000  00000000  0001a630  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005b85  00000000  00000000  00040c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004e8  00000000  00000000  00046810  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000a0cf  00000000  00000000  00046cf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	18 c1       	rjmp	.+560    	; 0x236 <__bad_interrupt>
       6:	00 00       	nop
       8:	16 c1       	rjmp	.+556    	; 0x236 <__bad_interrupt>
       a:	00 00       	nop
       c:	14 c1       	rjmp	.+552    	; 0x236 <__bad_interrupt>
       e:	00 00       	nop
      10:	12 c1       	rjmp	.+548    	; 0x236 <__bad_interrupt>
      12:	00 00       	nop
      14:	10 c1       	rjmp	.+544    	; 0x236 <__bad_interrupt>
      16:	00 00       	nop
      18:	0e c1       	rjmp	.+540    	; 0x236 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c c1       	rjmp	.+536    	; 0x236 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0a c1       	rjmp	.+532    	; 0x236 <__bad_interrupt>
      22:	00 00       	nop
      24:	08 c1       	rjmp	.+528    	; 0x236 <__bad_interrupt>
      26:	00 00       	nop
      28:	61 c2       	rjmp	.+1218   	; 0x4ec <__vector_10>
      2a:	00 00       	nop
      2c:	78 c2       	rjmp	.+1264   	; 0x51e <__vector_11>
      2e:	00 00       	nop
      30:	02 c1       	rjmp	.+516    	; 0x236 <__bad_interrupt>
      32:	00 00       	nop
      34:	00 c1       	rjmp	.+512    	; 0x236 <__bad_interrupt>
      36:	00 00       	nop
      38:	e9 c2       	rjmp	.+1490   	; 0x60c <__vector_14>
      3a:	00 00       	nop
      3c:	10 c3       	rjmp	.+1568   	; 0x65e <__vector_15>
      3e:	00 00       	nop
      40:	37 c3       	rjmp	.+1646   	; 0x6b0 <__vector_16>
      42:	00 00       	nop
      44:	5e c3       	rjmp	.+1724   	; 0x702 <__vector_17>
      46:	00 00       	nop
      48:	85 c3       	rjmp	.+1802   	; 0x754 <__vector_18>
      4a:	00 00       	nop
      4c:	ac c3       	rjmp	.+1880   	; 0x7a6 <__vector_19>
      4e:	00 00       	nop
      50:	d3 c3       	rjmp	.+1958   	; 0x7f8 <__vector_20>
      52:	00 00       	nop
      54:	fa c3       	rjmp	.+2036   	; 0x84a <__vector_21>
      56:	00 00       	nop
      58:	21 c4       	rjmp	.+2114   	; 0x89c <__vector_22>
      5a:	00 00       	nop
      5c:	48 c4       	rjmp	.+2192   	; 0x8ee <__vector_23>
      5e:	00 00       	nop
      60:	ea c0       	rjmp	.+468    	; 0x236 <__bad_interrupt>
      62:	00 00       	nop
      64:	e8 c0       	rjmp	.+464    	; 0x236 <__bad_interrupt>
      66:	00 00       	nop
      68:	e6 c0       	rjmp	.+460    	; 0x236 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e4 c0       	rjmp	.+456    	; 0x236 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e2 c0       	rjmp	.+452    	; 0x236 <__bad_interrupt>
      72:	00 00       	nop
      74:	e0 c0       	rjmp	.+448    	; 0x236 <__bad_interrupt>
      76:	00 00       	nop
      78:	de c0       	rjmp	.+444    	; 0x236 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	dc c0       	rjmp	.+440    	; 0x236 <__bad_interrupt>
      7e:	00 00       	nop
      80:	da c0       	rjmp	.+436    	; 0x236 <__bad_interrupt>
      82:	00 00       	nop
      84:	d8 c0       	rjmp	.+432    	; 0x236 <__bad_interrupt>
      86:	00 00       	nop
      88:	d6 c0       	rjmp	.+428    	; 0x236 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d4 c0       	rjmp	.+424    	; 0x236 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d2 c0       	rjmp	.+420    	; 0x236 <__bad_interrupt>
      92:	00 00       	nop
      94:	d0 c0       	rjmp	.+416    	; 0x236 <__bad_interrupt>
      96:	00 00       	nop
      98:	ce c0       	rjmp	.+412    	; 0x236 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cc c0       	rjmp	.+408    	; 0x236 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ca c0       	rjmp	.+404    	; 0x236 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c8 c0       	rjmp	.+400    	; 0x236 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c6 c0       	rjmp	.+396    	; 0x236 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c4 c0       	rjmp	.+392    	; 0x236 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c2 c0       	rjmp	.+388    	; 0x236 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c0 c0       	rjmp	.+384    	; 0x236 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	be c0       	rjmp	.+380    	; 0x236 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	db c5       	rjmp	.+2998   	; 0xc74 <__vector_47>
      be:	00 00       	nop
      c0:	02 c6       	rjmp	.+3076   	; 0xcc6 <__vector_48>
      c2:	00 00       	nop
      c4:	29 c6       	rjmp	.+3154   	; 0xd18 <__vector_49>
      c6:	00 00       	nop
      c8:	50 c6       	rjmp	.+3232   	; 0xd6a <__vector_50>
      ca:	00 00       	nop
      cc:	77 c6       	rjmp	.+3310   	; 0xdbc <__vector_51>
      ce:	00 00       	nop
      d0:	9e c6       	rjmp	.+3388   	; 0xe0e <__vector_52>
      d2:	00 00       	nop
      d4:	b0 c0       	rjmp	.+352    	; 0x236 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ae c0       	rjmp	.+348    	; 0x236 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ac c0       	rjmp	.+344    	; 0x236 <__bad_interrupt>
      de:	00 00       	nop
      e0:	aa c0       	rjmp	.+340    	; 0x236 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a8 c0       	rjmp	.+336    	; 0x236 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a6 c0       	rjmp	.+332    	; 0x236 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a4 c0       	rjmp	.+328    	; 0x236 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a2 c0       	rjmp	.+324    	; 0x236 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a0 c0       	rjmp	.+320    	; 0x236 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9e c0       	rjmp	.+316    	; 0x236 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9c c0       	rjmp	.+312    	; 0x236 <__bad_interrupt>
      fe:	00 00       	nop
     100:	9a c0       	rjmp	.+308    	; 0x236 <__bad_interrupt>
     102:	00 00       	nop
     104:	98 c0       	rjmp	.+304    	; 0x236 <__bad_interrupt>
     106:	00 00       	nop
     108:	96 c0       	rjmp	.+300    	; 0x236 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	94 c0       	rjmp	.+296    	; 0x236 <__bad_interrupt>
     10e:	00 00       	nop
     110:	92 c0       	rjmp	.+292    	; 0x236 <__bad_interrupt>
     112:	00 00       	nop
     114:	90 c0       	rjmp	.+288    	; 0x236 <__bad_interrupt>
     116:	00 00       	nop
     118:	8e c0       	rjmp	.+284    	; 0x236 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8c c0       	rjmp	.+280    	; 0x236 <__bad_interrupt>
     11e:	00 00       	nop
     120:	8a c0       	rjmp	.+276    	; 0x236 <__bad_interrupt>
     122:	00 00       	nop
     124:	88 c0       	rjmp	.+272    	; 0x236 <__bad_interrupt>
     126:	00 00       	nop
     128:	86 c0       	rjmp	.+268    	; 0x236 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	84 c0       	rjmp	.+264    	; 0x236 <__bad_interrupt>
     12e:	00 00       	nop
     130:	82 c0       	rjmp	.+260    	; 0x236 <__bad_interrupt>
     132:	00 00       	nop
     134:	05 c4       	rjmp	.+2058   	; 0x940 <__vector_77>
     136:	00 00       	nop
     138:	2c c4       	rjmp	.+2136   	; 0x992 <__vector_78>
     13a:	00 00       	nop
     13c:	53 c4       	rjmp	.+2214   	; 0x9e4 <__vector_79>
     13e:	00 00       	nop
     140:	7a c4       	rjmp	.+2292   	; 0xa36 <__vector_80>
     142:	00 00       	nop
     144:	a1 c4       	rjmp	.+2370   	; 0xa88 <__vector_81>
     146:	00 00       	nop
     148:	c8 c4       	rjmp	.+2448   	; 0xada <__vector_82>
     14a:	00 00       	nop
     14c:	ef c4       	rjmp	.+2526   	; 0xb2c <__vector_83>
     14e:	00 00       	nop
     150:	16 c5       	rjmp	.+2604   	; 0xb7e <__vector_84>
     152:	00 00       	nop
     154:	3d c5       	rjmp	.+2682   	; 0xbd0 <__vector_85>
     156:	00 00       	nop
     158:	64 c5       	rjmp	.+2760   	; 0xc22 <__vector_86>
     15a:	00 00       	nop
     15c:	6c c0       	rjmp	.+216    	; 0x236 <__bad_interrupt>
     15e:	00 00       	nop
     160:	6a c0       	rjmp	.+212    	; 0x236 <__bad_interrupt>
     162:	00 00       	nop
     164:	68 c0       	rjmp	.+208    	; 0x236 <__bad_interrupt>
     166:	00 00       	nop
     168:	66 c0       	rjmp	.+204    	; 0x236 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	64 c0       	rjmp	.+200    	; 0x236 <__bad_interrupt>
     16e:	00 00       	nop
     170:	62 c0       	rjmp	.+196    	; 0x236 <__bad_interrupt>
     172:	00 00       	nop
     174:	60 c0       	rjmp	.+192    	; 0x236 <__bad_interrupt>
     176:	00 00       	nop
     178:	5e c0       	rjmp	.+188    	; 0x236 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5c c0       	rjmp	.+184    	; 0x236 <__bad_interrupt>
     17e:	00 00       	nop
     180:	5a c0       	rjmp	.+180    	; 0x236 <__bad_interrupt>
     182:	00 00       	nop
     184:	58 c0       	rjmp	.+176    	; 0x236 <__bad_interrupt>
     186:	00 00       	nop
     188:	56 c0       	rjmp	.+172    	; 0x236 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	54 c0       	rjmp	.+168    	; 0x236 <__bad_interrupt>
     18e:	00 00       	nop
     190:	52 c0       	rjmp	.+164    	; 0x236 <__bad_interrupt>
     192:	00 00       	nop
     194:	50 c0       	rjmp	.+160    	; 0x236 <__bad_interrupt>
     196:	00 00       	nop
     198:	4e c0       	rjmp	.+156    	; 0x236 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4c c0       	rjmp	.+152    	; 0x236 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4a c0       	rjmp	.+148    	; 0x236 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	48 c0       	rjmp	.+144    	; 0x236 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	46 c0       	rjmp	.+140    	; 0x236 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	44 c0       	rjmp	.+136    	; 0x236 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	42 c0       	rjmp	.+132    	; 0x236 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	40 c0       	rjmp	.+128    	; 0x236 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	3e c0       	rjmp	.+124    	; 0x236 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3c c0       	rjmp	.+120    	; 0x236 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3a c0       	rjmp	.+116    	; 0x236 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	38 c0       	rjmp	.+112    	; 0x236 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	36 c0       	rjmp	.+108    	; 0x236 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	34 c0       	rjmp	.+104    	; 0x236 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	32 c0       	rjmp	.+100    	; 0x236 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	30 c0       	rjmp	.+96     	; 0x236 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2e c0       	rjmp	.+92     	; 0x236 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2c c0       	rjmp	.+88     	; 0x236 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2a c0       	rjmp	.+84     	; 0x236 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	28 c0       	rjmp	.+80     	; 0x236 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	26 c0       	rjmp	.+76     	; 0x236 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	24 c0       	rjmp	.+72     	; 0x236 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	22 c0       	rjmp	.+68     	; 0x236 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	20 c0       	rjmp	.+64     	; 0x236 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	1e c0       	rjmp	.+60     	; 0x236 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e2       	ldi	r29, 0x2F	; 47
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e2 e1       	ldi	r30, 0x12	; 18
     210:	fa e1       	ldi	r31, 0x1A	; 26
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a0 30       	cpi	r26, 0x00	; 0
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	20 e2       	ldi	r18, 0x20	; 32
     220:	a0 e0       	ldi	r26, 0x00	; 0
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	ab 35       	cpi	r26, 0x5B	; 91
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 20 0c 	call	0x1840	; 0x1840 <main>
     232:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <_exit>

00000236 <__bad_interrupt>:
     236:	e4 ce       	rjmp	.-568    	; 0x0 <__vectors>

00000238 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     238:	08 95       	ret

0000023a <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     23a:	8f ef       	ldi	r24, 0xFF	; 255
     23c:	80 93 70 00 	sts	0x0070, r24
     240:	80 93 71 00 	sts	0x0071, r24
     244:	80 93 72 00 	sts	0x0072, r24
     248:	80 93 73 00 	sts	0x0073, r24
     24c:	80 93 74 00 	sts	0x0074, r24
     250:	80 93 75 00 	sts	0x0075, r24
     254:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     258:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     25a:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     25c:	e0 e5       	ldi	r30, 0x50	; 80
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	90 81       	ld	r25, Z
     262:	92 60       	ori	r25, 0x02	; 2
     264:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     266:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     268:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     26a:	81 ff       	sbrs	r24, 1
     26c:	fd cf       	rjmp	.-6      	; 0x268 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     26e:	61 e0       	ldi	r22, 0x01	; 1
     270:	80 e4       	ldi	r24, 0x40	; 64
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	2b d1       	rcall	.+598    	; 0x4cc <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     276:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     278:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     27a:	e0 e5       	ldi	r30, 0x50	; 80
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	90 81       	ld	r25, Z
     280:	9e 7f       	andi	r25, 0xFE	; 254
     282:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     284:	8f bf       	out	0x3f, r24	; 63
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	e0 e4       	ldi	r30, 0x40	; 64
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	83 83       	std	Z+3, r24	; 0x03
     28e:	08 95       	ret

00000290 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     290:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     292:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     294:	fc 01       	movw	r30, r24
     296:	e0 59       	subi	r30, 0x90	; 144
     298:	ff 4f       	sbci	r31, 0xFF	; 255
     29a:	60 95       	com	r22
     29c:	80 81       	ld	r24, Z
     29e:	68 23       	and	r22, r24
     2a0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2a2:	2f bf       	out	0x3f, r18	; 63
     2a4:	08 95       	ret

000002a6 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     2a6:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     2a8:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     2aa:	fc 01       	movw	r30, r24
     2ac:	e0 59       	subi	r30, 0x90	; 144
     2ae:	ff 4f       	sbci	r31, 0xFF	; 255
     2b0:	80 81       	ld	r24, Z
     2b2:	68 2b       	or	r22, r24
     2b4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2b6:	2f bf       	out	0x3f, r18	; 63
     2b8:	08 95       	ret

000002ba <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     2ba:	81 15       	cp	r24, r1
     2bc:	92 40       	sbci	r25, 0x02	; 2
     2be:	61 f4       	brne	.+24     	; 0x2d8 <adc_enable_clock+0x1e>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     2c0:	80 91 00 20 	lds	r24, 0x2000
     2c4:	98 2f       	mov	r25, r24
     2c6:	9f 5f       	subi	r25, 0xFF	; 255
     2c8:	90 93 00 20 	sts	0x2000, r25
     2cc:	81 11       	cpse	r24, r1
     2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <adc_enable_clock+0x1e>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     2d0:	62 e0       	ldi	r22, 0x02	; 2
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	dc cf       	rjmp	.-72     	; 0x290 <sysclk_enable_module>
     2d8:	08 95       	ret

000002da <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     2da:	81 15       	cp	r24, r1
     2dc:	92 40       	sbci	r25, 0x02	; 2
     2de:	59 f4       	brne	.+22     	; 0x2f6 <adc_disable_clock+0x1c>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     2e0:	80 91 00 20 	lds	r24, 0x2000
     2e4:	81 50       	subi	r24, 0x01	; 1
     2e6:	80 93 00 20 	sts	0x2000, r24
     2ea:	81 11       	cpse	r24, r1
     2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <adc_disable_clock+0x1c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     2ee:	62 e0       	ldi	r22, 0x02	; 2
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	d8 cf       	rjmp	.-80     	; 0x2a6 <sysclk_disable_module>
     2f6:	08 95       	ret

000002f8 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     2f8:	1f 93       	push	r17
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     300:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
     302:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     304:	da df       	rcall	.-76     	; 0x2ba <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     306:	88 81       	ld	r24, Y
     308:	81 60       	ori	r24, 0x01	; 1
     30a:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     30c:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     30e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     310:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     312:	ea e3       	ldi	r30, 0x3A	; 58
     314:	f0 e2       	ldi	r31, 0x20	; 32
     316:	90 81       	ld	r25, Z
     318:	9f 5f       	subi	r25, 0xFF	; 255
     31a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     31c:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	08 95       	ret

00000326 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     326:	ff 92       	push	r15
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	eb 01       	movw	r28, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     332:	81 15       	cp	r24, r1
     334:	92 40       	sbci	r25, 0x02	; 2
     336:	71 f5       	brne	.+92     	; 0x394 <adc_write_configuration+0x6e>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     338:	61 e2       	ldi	r22, 0x21	; 33
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	82 e0       	ldi	r24, 0x02	; 2
     33e:	cc d0       	rcall	.+408    	; 0x4d8 <nvm_read_byte>
     340:	18 2f       	mov	r17, r24
     342:	60 e2       	ldi	r22, 0x20	; 32
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	82 e0       	ldi	r24, 0x02	; 2
     348:	c7 d0       	rcall	.+398    	; 0x4d8 <nvm_read_byte>

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
		data <<= 8;
     34a:	31 2f       	mov	r19, r17
     34c:	20 e0       	ldi	r18, 0x00	; 0
		data |= nvm_read_production_signature_row(ADCACAL0);
     34e:	89 01       	movw	r16, r18
     350:	08 2b       	or	r16, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     352:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
     354:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	92 e0       	ldi	r25, 0x02	; 2
     35a:	af df       	rcall	.-162    	; 0x2ba <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     35c:	e0 e0       	ldi	r30, 0x00	; 0
     35e:	f2 e0       	ldi	r31, 0x02	; 2
     360:	20 81       	ld	r18, Z

	adc->CTRLA = ADC_FLUSH_bm;
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	80 83       	st	Z, r24
	adc->CAL = cal;
     366:	04 87       	std	Z+12, r16	; 0x0c
     368:	15 87       	std	Z+13, r17	; 0x0d
	adc->CMP = conf->cmp;
     36a:	8d 81       	ldd	r24, Y+5	; 0x05
     36c:	9e 81       	ldd	r25, Y+6	; 0x06
     36e:	80 8f       	std	Z+24, r24	; 0x18
     370:	91 8f       	std	Z+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
     372:	8a 81       	ldd	r24, Y+2	; 0x02
     374:	82 83       	std	Z+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
     376:	8c 81       	ldd	r24, Y+4	; 0x04
     378:	84 83       	std	Z+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
     37a:	8b 81       	ldd	r24, Y+3	; 0x03
     37c:	83 83       	std	Z+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	81 83       	std	Z+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
     382:	82 2f       	mov	r24, r18
     384:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
     386:	98 81       	ld	r25, Y
     388:	89 2b       	or	r24, r25
     38a:	80 83       	st	Z, r24

	adc_disable_clock(adc);
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	a4 df       	rcall	.-184    	; 0x2da <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     392:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	08 95       	ret

000003a0 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ec 01       	movw	r28, r24
     3ac:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     3ae:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
     3b0:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     3b2:	83 df       	rcall	.-250    	; 0x2ba <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     3b4:	88 81       	ld	r24, Y
     3b6:	80 7c       	andi	r24, 0xC0	; 192
     3b8:	f8 01       	movw	r30, r16
     3ba:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     3bc:	88 8d       	ldd	r24, Y+24	; 0x18
     3be:	99 8d       	ldd	r25, Y+25	; 0x19
     3c0:	85 83       	std	Z+5, r24	; 0x05
     3c2:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     3c4:	8a 81       	ldd	r24, Y+2	; 0x02
     3c6:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     3c8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ca:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     3cc:	8b 81       	ldd	r24, Y+3	; 0x03
     3ce:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
     3d4:	ce 01       	movw	r24, r28
     3d6:	81 df       	rcall	.-254    	; 0x2da <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3d8:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	08 95       	ret

000003e6 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     3e6:	cf 92       	push	r12
     3e8:	df 92       	push	r13
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	7c 01       	movw	r14, r24
     3f8:	d6 2e       	mov	r13, r22
     3fa:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     3fc:	86 2f       	mov	r24, r22
     3fe:	83 70       	andi	r24, 0x03	; 3
     400:	29 f4       	brne	.+10     	; 0x40c <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
     402:	96 2f       	mov	r25, r22
     404:	96 95       	lsr	r25
     406:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	02 c0       	rjmp	.+4      	; 0x410 <adcch_write_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     40c:	96 2f       	mov	r25, r22
 */
__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     40e:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     410:	90 ff       	sbrs	r25, 0
		index++;
     412:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     414:	e7 01       	movw	r28, r14
     416:	a0 96       	adiw	r28, 0x20	; 32
     418:	98 e0       	ldi	r25, 0x08	; 8
     41a:	89 9f       	mul	r24, r25
     41c:	c0 0d       	add	r28, r0
     41e:	d1 1d       	adc	r29, r1
     420:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     422:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
     424:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     426:	c7 01       	movw	r24, r14
     428:	48 df       	rcall	.-368    	; 0x2ba <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     42a:	f8 01       	movw	r30, r16
     42c:	80 81       	ld	r24, Z
     42e:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     430:	82 81       	ldd	r24, Z+2	; 0x02
     432:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     434:	81 81       	ldd	r24, Z+1	; 0x01
     436:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     438:	d0 fe       	sbrs	r13, 0
     43a:	02 c0       	rjmp	.+4      	; 0x440 <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     43c:	83 81       	ldd	r24, Z+3	; 0x03
     43e:	8e 83       	std	Y+6, r24	; 0x06
	}
	adc_disable_clock(adc);
     440:	c7 01       	movw	r24, r14
     442:	4b df       	rcall	.-362    	; 0x2da <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     444:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	df 90       	pop	r13
     454:	cf 90       	pop	r12
     456:	08 95       	ret

00000458 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     458:	cf 92       	push	r12
     45a:	df 92       	push	r13
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	7c 01       	movw	r14, r24
     46a:	d6 2e       	mov	r13, r22
     46c:	ea 01       	movw	r28, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     46e:	86 2f       	mov	r24, r22
     470:	83 70       	andi	r24, 0x03	; 3
     472:	29 f4       	brne	.+10     	; 0x47e <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
     474:	96 2f       	mov	r25, r22
     476:	96 95       	lsr	r25
     478:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     47a:	82 e0       	ldi	r24, 0x02	; 2
     47c:	02 c0       	rjmp	.+4      	; 0x482 <adcch_read_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     47e:	96 2f       	mov	r25, r22
 */
__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     480:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     482:	90 ff       	sbrs	r25, 0
		index++;
     484:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     486:	87 01       	movw	r16, r14
     488:	00 5e       	subi	r16, 0xE0	; 224
     48a:	1f 4f       	sbci	r17, 0xFF	; 255
     48c:	98 e0       	ldi	r25, 0x08	; 8
     48e:	89 9f       	mul	r24, r25
     490:	00 0d       	add	r16, r0
     492:	11 1d       	adc	r17, r1
     494:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     496:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
     498:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     49a:	c7 01       	movw	r24, r14
     49c:	0e df       	rcall	.-484    	; 0x2ba <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     49e:	f8 01       	movw	r30, r16
     4a0:	80 81       	ld	r24, Z
     4a2:	88 83       	st	Y, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     4a4:	82 81       	ldd	r24, Z+2	; 0x02
     4a6:	8a 83       	std	Y+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     4a8:	81 81       	ldd	r24, Z+1	; 0x01
     4aa:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     4ac:	d0 fe       	sbrs	r13, 0
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <adcch_read_configuration+0x5c>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     4b0:	86 81       	ldd	r24, Z+6	; 0x06
     4b2:	8b 83       	std	Y+3, r24	; 0x03
	}
	adc_disable_clock(adc);
     4b4:	c7 01       	movw	r24, r14
     4b6:	11 df       	rcall	.-478    	; 0x2da <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4b8:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
     4ca:	08 95       	ret

000004cc <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     4cc:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     4ce:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     4d0:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     4d2:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     4d4:	60 83       	st	Z, r22
	ret                             // Return to caller
     4d6:	08 95       	ret

000004d8 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     4d8:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
     4dc:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     4de:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     4e0:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
     4e4:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     4e6:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     4ea:	08 95       	ret

000004ec <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     4ec:	1f 92       	push	r1
     4ee:	0f 92       	push	r0
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	0f 92       	push	r0
     4f4:	11 24       	eor	r1, r1
     4f6:	8f 93       	push	r24
     4f8:	9f 93       	push	r25
     4fa:	ef 93       	push	r30
     4fc:	ff 93       	push	r31
	rtc_data.counter_high++;
     4fe:	ef e3       	ldi	r30, 0x3F	; 63
     500:	f0 e2       	ldi	r31, 0x20	; 32
     502:	80 81       	ld	r24, Z
     504:	91 81       	ldd	r25, Z+1	; 0x01
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	80 83       	st	Z, r24
     50a:	91 83       	std	Z+1, r25	; 0x01
}
     50c:	ff 91       	pop	r31
     50e:	ef 91       	pop	r30
     510:	9f 91       	pop	r25
     512:	8f 91       	pop	r24
     514:	0f 90       	pop	r0
     516:	0f be       	out	0x3f, r0	; 63
     518:	0f 90       	pop	r0
     51a:	1f 90       	pop	r1
     51c:	18 95       	reti

0000051e <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     51e:	1f 92       	push	r1
     520:	0f 92       	push	r0
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	0f 92       	push	r0
     526:	11 24       	eor	r1, r1
     528:	cf 92       	push	r12
     52a:	df 92       	push	r13
     52c:	ef 92       	push	r14
     52e:	ff 92       	push	r15
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	2f 93       	push	r18
     536:	3f 93       	push	r19
     538:	4f 93       	push	r20
     53a:	5f 93       	push	r21
     53c:	6f 93       	push	r22
     53e:	7f 93       	push	r23
     540:	8f 93       	push	r24
     542:	9f 93       	push	r25
     544:	af 93       	push	r26
     546:	bf 93       	push	r27
     548:	ef 93       	push	r30
     54a:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     54c:	40 91 3f 20 	lds	r20, 0x203F
     550:	50 91 40 20 	lds	r21, 0x2040
     554:	80 91 41 20 	lds	r24, 0x2041
     558:	90 91 42 20 	lds	r25, 0x2042
     55c:	48 17       	cp	r20, r24
     55e:	59 07       	cpc	r21, r25
     560:	f0 f1       	brcs	.+124    	; 0x5de <__vector_11+0xc0>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	e0 e0       	ldi	r30, 0x00	; 0
     566:	f4 e0       	ldi	r31, 0x04	; 4
     568:	82 83       	std	Z+2, r24	; 0x02
		if (rtc_data.callback) {
     56a:	e0 91 45 20 	lds	r30, 0x2045
     56e:	f0 91 46 20 	lds	r31, 0x2046
     572:	30 97       	sbiw	r30, 0x00	; 0
     574:	a1 f1       	breq	.+104    	; 0x5de <__vector_11+0xc0>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     576:	a0 e0       	ldi	r26, 0x00	; 0
     578:	b4 e0       	ldi	r27, 0x04	; 4
     57a:	18 96       	adiw	r26, 0x08	; 8
     57c:	8d 91       	ld	r24, X+
     57e:	9c 91       	ld	r25, X
     580:	19 97       	sbiw	r26, 0x09	; 9
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	ba 01       	movw	r22, r20
     588:	55 27       	eor	r21, r21
     58a:	44 27       	eor	r20, r20
					| RTC.CNT;
     58c:	a0 e0       	ldi	r26, 0x00	; 0
     58e:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     590:	8a 01       	movw	r16, r20
     592:	9b 01       	movw	r18, r22
     594:	08 2b       	or	r16, r24
     596:	19 2b       	or	r17, r25
     598:	2a 2b       	or	r18, r26
     59a:	3b 2b       	or	r19, r27
     59c:	c9 01       	movw	r24, r18
     59e:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     5a0:	00 91 41 20 	lds	r16, 0x2041
     5a4:	10 91 42 20 	lds	r17, 0x2042
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	98 01       	movw	r18, r16
     5ae:	11 27       	eor	r17, r17
     5b0:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     5b2:	c0 90 43 20 	lds	r12, 0x2043
     5b6:	d0 90 44 20 	lds	r13, 0x2044
     5ba:	e1 2c       	mov	r14, r1
     5bc:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     5be:	0c 29       	or	r16, r12
     5c0:	1d 29       	or	r17, r13
     5c2:	2e 29       	or	r18, r14
     5c4:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     5c6:	06 17       	cp	r16, r22
     5c8:	17 07       	cpc	r17, r23
     5ca:	28 07       	cpc	r18, r24
     5cc:	39 07       	cpc	r19, r25
     5ce:	30 f0       	brcs	.+12     	; 0x5dc <__vector_11+0xbe>
				count = alarm + 1;
     5d0:	c9 01       	movw	r24, r18
     5d2:	b8 01       	movw	r22, r16
     5d4:	6f 5f       	subi	r22, 0xFF	; 255
     5d6:	7f 4f       	sbci	r23, 0xFF	; 255
     5d8:	8f 4f       	sbci	r24, 0xFF	; 255
     5da:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     5dc:	09 95       	icall
		}
	}
}
     5de:	ff 91       	pop	r31
     5e0:	ef 91       	pop	r30
     5e2:	bf 91       	pop	r27
     5e4:	af 91       	pop	r26
     5e6:	9f 91       	pop	r25
     5e8:	8f 91       	pop	r24
     5ea:	7f 91       	pop	r23
     5ec:	6f 91       	pop	r22
     5ee:	5f 91       	pop	r21
     5f0:	4f 91       	pop	r20
     5f2:	3f 91       	pop	r19
     5f4:	2f 91       	pop	r18
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	df 90       	pop	r13
     600:	cf 90       	pop	r12
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
     60c:	1f 92       	push	r1
     60e:	0f 92       	push	r0
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	0f 92       	push	r0
     614:	11 24       	eor	r1, r1
     616:	2f 93       	push	r18
     618:	3f 93       	push	r19
     61a:	4f 93       	push	r20
     61c:	5f 93       	push	r21
     61e:	6f 93       	push	r22
     620:	7f 93       	push	r23
     622:	8f 93       	push	r24
     624:	9f 93       	push	r25
     626:	af 93       	push	r26
     628:	bf 93       	push	r27
     62a:	ef 93       	push	r30
     62c:	ff 93       	push	r31
     62e:	e0 91 01 20 	lds	r30, 0x2001
     632:	f0 91 02 20 	lds	r31, 0x2002
     636:	30 97       	sbiw	r30, 0x00	; 0
     638:	09 f0       	breq	.+2      	; 0x63c <__vector_14+0x30>
     63a:	09 95       	icall
     63c:	ff 91       	pop	r31
     63e:	ef 91       	pop	r30
     640:	bf 91       	pop	r27
     642:	af 91       	pop	r26
     644:	9f 91       	pop	r25
     646:	8f 91       	pop	r24
     648:	7f 91       	pop	r23
     64a:	6f 91       	pop	r22
     64c:	5f 91       	pop	r21
     64e:	4f 91       	pop	r20
     650:	3f 91       	pop	r19
     652:	2f 91       	pop	r18
     654:	0f 90       	pop	r0
     656:	0f be       	out	0x3f, r0	; 63
     658:	0f 90       	pop	r0
     65a:	1f 90       	pop	r1
     65c:	18 95       	reti

0000065e <__vector_15>:
     65e:	1f 92       	push	r1
     660:	0f 92       	push	r0
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	0f 92       	push	r0
     666:	11 24       	eor	r1, r1
     668:	2f 93       	push	r18
     66a:	3f 93       	push	r19
     66c:	4f 93       	push	r20
     66e:	5f 93       	push	r21
     670:	6f 93       	push	r22
     672:	7f 93       	push	r23
     674:	8f 93       	push	r24
     676:	9f 93       	push	r25
     678:	af 93       	push	r26
     67a:	bf 93       	push	r27
     67c:	ef 93       	push	r30
     67e:	ff 93       	push	r31
     680:	e0 91 03 20 	lds	r30, 0x2003
     684:	f0 91 04 20 	lds	r31, 0x2004
     688:	30 97       	sbiw	r30, 0x00	; 0
     68a:	09 f0       	breq	.+2      	; 0x68e <__vector_15+0x30>
     68c:	09 95       	icall
     68e:	ff 91       	pop	r31
     690:	ef 91       	pop	r30
     692:	bf 91       	pop	r27
     694:	af 91       	pop	r26
     696:	9f 91       	pop	r25
     698:	8f 91       	pop	r24
     69a:	7f 91       	pop	r23
     69c:	6f 91       	pop	r22
     69e:	5f 91       	pop	r21
     6a0:	4f 91       	pop	r20
     6a2:	3f 91       	pop	r19
     6a4:	2f 91       	pop	r18
     6a6:	0f 90       	pop	r0
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	0f 90       	pop	r0
     6ac:	1f 90       	pop	r1
     6ae:	18 95       	reti

000006b0 <__vector_16>:
     6b0:	1f 92       	push	r1
     6b2:	0f 92       	push	r0
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	0f 92       	push	r0
     6b8:	11 24       	eor	r1, r1
     6ba:	2f 93       	push	r18
     6bc:	3f 93       	push	r19
     6be:	4f 93       	push	r20
     6c0:	5f 93       	push	r21
     6c2:	6f 93       	push	r22
     6c4:	7f 93       	push	r23
     6c6:	8f 93       	push	r24
     6c8:	9f 93       	push	r25
     6ca:	af 93       	push	r26
     6cc:	bf 93       	push	r27
     6ce:	ef 93       	push	r30
     6d0:	ff 93       	push	r31
     6d2:	e0 91 05 20 	lds	r30, 0x2005
     6d6:	f0 91 06 20 	lds	r31, 0x2006
     6da:	30 97       	sbiw	r30, 0x00	; 0
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <__vector_16+0x30>
     6de:	09 95       	icall
     6e0:	ff 91       	pop	r31
     6e2:	ef 91       	pop	r30
     6e4:	bf 91       	pop	r27
     6e6:	af 91       	pop	r26
     6e8:	9f 91       	pop	r25
     6ea:	8f 91       	pop	r24
     6ec:	7f 91       	pop	r23
     6ee:	6f 91       	pop	r22
     6f0:	5f 91       	pop	r21
     6f2:	4f 91       	pop	r20
     6f4:	3f 91       	pop	r19
     6f6:	2f 91       	pop	r18
     6f8:	0f 90       	pop	r0
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	0f 90       	pop	r0
     6fe:	1f 90       	pop	r1
     700:	18 95       	reti

00000702 <__vector_17>:
     702:	1f 92       	push	r1
     704:	0f 92       	push	r0
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	0f 92       	push	r0
     70a:	11 24       	eor	r1, r1
     70c:	2f 93       	push	r18
     70e:	3f 93       	push	r19
     710:	4f 93       	push	r20
     712:	5f 93       	push	r21
     714:	6f 93       	push	r22
     716:	7f 93       	push	r23
     718:	8f 93       	push	r24
     71a:	9f 93       	push	r25
     71c:	af 93       	push	r26
     71e:	bf 93       	push	r27
     720:	ef 93       	push	r30
     722:	ff 93       	push	r31
     724:	e0 91 07 20 	lds	r30, 0x2007
     728:	f0 91 08 20 	lds	r31, 0x2008
     72c:	30 97       	sbiw	r30, 0x00	; 0
     72e:	09 f0       	breq	.+2      	; 0x732 <__vector_17+0x30>
     730:	09 95       	icall
     732:	ff 91       	pop	r31
     734:	ef 91       	pop	r30
     736:	bf 91       	pop	r27
     738:	af 91       	pop	r26
     73a:	9f 91       	pop	r25
     73c:	8f 91       	pop	r24
     73e:	7f 91       	pop	r23
     740:	6f 91       	pop	r22
     742:	5f 91       	pop	r21
     744:	4f 91       	pop	r20
     746:	3f 91       	pop	r19
     748:	2f 91       	pop	r18
     74a:	0f 90       	pop	r0
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	0f 90       	pop	r0
     750:	1f 90       	pop	r1
     752:	18 95       	reti

00000754 <__vector_18>:
     754:	1f 92       	push	r1
     756:	0f 92       	push	r0
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	0f 92       	push	r0
     75c:	11 24       	eor	r1, r1
     75e:	2f 93       	push	r18
     760:	3f 93       	push	r19
     762:	4f 93       	push	r20
     764:	5f 93       	push	r21
     766:	6f 93       	push	r22
     768:	7f 93       	push	r23
     76a:	8f 93       	push	r24
     76c:	9f 93       	push	r25
     76e:	af 93       	push	r26
     770:	bf 93       	push	r27
     772:	ef 93       	push	r30
     774:	ff 93       	push	r31
     776:	e0 91 09 20 	lds	r30, 0x2009
     77a:	f0 91 0a 20 	lds	r31, 0x200A
     77e:	30 97       	sbiw	r30, 0x00	; 0
     780:	09 f0       	breq	.+2      	; 0x784 <__vector_18+0x30>
     782:	09 95       	icall
     784:	ff 91       	pop	r31
     786:	ef 91       	pop	r30
     788:	bf 91       	pop	r27
     78a:	af 91       	pop	r26
     78c:	9f 91       	pop	r25
     78e:	8f 91       	pop	r24
     790:	7f 91       	pop	r23
     792:	6f 91       	pop	r22
     794:	5f 91       	pop	r21
     796:	4f 91       	pop	r20
     798:	3f 91       	pop	r19
     79a:	2f 91       	pop	r18
     79c:	0f 90       	pop	r0
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	0f 90       	pop	r0
     7a2:	1f 90       	pop	r1
     7a4:	18 95       	reti

000007a6 <__vector_19>:
     7a6:	1f 92       	push	r1
     7a8:	0f 92       	push	r0
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	0f 92       	push	r0
     7ae:	11 24       	eor	r1, r1
     7b0:	2f 93       	push	r18
     7b2:	3f 93       	push	r19
     7b4:	4f 93       	push	r20
     7b6:	5f 93       	push	r21
     7b8:	6f 93       	push	r22
     7ba:	7f 93       	push	r23
     7bc:	8f 93       	push	r24
     7be:	9f 93       	push	r25
     7c0:	af 93       	push	r26
     7c2:	bf 93       	push	r27
     7c4:	ef 93       	push	r30
     7c6:	ff 93       	push	r31
     7c8:	e0 91 0b 20 	lds	r30, 0x200B
     7cc:	f0 91 0c 20 	lds	r31, 0x200C
     7d0:	30 97       	sbiw	r30, 0x00	; 0
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <__vector_19+0x30>
     7d4:	09 95       	icall
     7d6:	ff 91       	pop	r31
     7d8:	ef 91       	pop	r30
     7da:	bf 91       	pop	r27
     7dc:	af 91       	pop	r26
     7de:	9f 91       	pop	r25
     7e0:	8f 91       	pop	r24
     7e2:	7f 91       	pop	r23
     7e4:	6f 91       	pop	r22
     7e6:	5f 91       	pop	r21
     7e8:	4f 91       	pop	r20
     7ea:	3f 91       	pop	r19
     7ec:	2f 91       	pop	r18
     7ee:	0f 90       	pop	r0
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	0f 90       	pop	r0
     7f4:	1f 90       	pop	r1
     7f6:	18 95       	reti

000007f8 <__vector_20>:
     7f8:	1f 92       	push	r1
     7fa:	0f 92       	push	r0
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	0f 92       	push	r0
     800:	11 24       	eor	r1, r1
     802:	2f 93       	push	r18
     804:	3f 93       	push	r19
     806:	4f 93       	push	r20
     808:	5f 93       	push	r21
     80a:	6f 93       	push	r22
     80c:	7f 93       	push	r23
     80e:	8f 93       	push	r24
     810:	9f 93       	push	r25
     812:	af 93       	push	r26
     814:	bf 93       	push	r27
     816:	ef 93       	push	r30
     818:	ff 93       	push	r31
     81a:	e0 91 0d 20 	lds	r30, 0x200D
     81e:	f0 91 0e 20 	lds	r31, 0x200E
     822:	30 97       	sbiw	r30, 0x00	; 0
     824:	09 f0       	breq	.+2      	; 0x828 <__vector_20+0x30>
     826:	09 95       	icall
     828:	ff 91       	pop	r31
     82a:	ef 91       	pop	r30
     82c:	bf 91       	pop	r27
     82e:	af 91       	pop	r26
     830:	9f 91       	pop	r25
     832:	8f 91       	pop	r24
     834:	7f 91       	pop	r23
     836:	6f 91       	pop	r22
     838:	5f 91       	pop	r21
     83a:	4f 91       	pop	r20
     83c:	3f 91       	pop	r19
     83e:	2f 91       	pop	r18
     840:	0f 90       	pop	r0
     842:	0f be       	out	0x3f, r0	; 63
     844:	0f 90       	pop	r0
     846:	1f 90       	pop	r1
     848:	18 95       	reti

0000084a <__vector_21>:
     84a:	1f 92       	push	r1
     84c:	0f 92       	push	r0
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	0f 92       	push	r0
     852:	11 24       	eor	r1, r1
     854:	2f 93       	push	r18
     856:	3f 93       	push	r19
     858:	4f 93       	push	r20
     85a:	5f 93       	push	r21
     85c:	6f 93       	push	r22
     85e:	7f 93       	push	r23
     860:	8f 93       	push	r24
     862:	9f 93       	push	r25
     864:	af 93       	push	r26
     866:	bf 93       	push	r27
     868:	ef 93       	push	r30
     86a:	ff 93       	push	r31
     86c:	e0 91 0f 20 	lds	r30, 0x200F
     870:	f0 91 10 20 	lds	r31, 0x2010
     874:	30 97       	sbiw	r30, 0x00	; 0
     876:	09 f0       	breq	.+2      	; 0x87a <__vector_21+0x30>
     878:	09 95       	icall
     87a:	ff 91       	pop	r31
     87c:	ef 91       	pop	r30
     87e:	bf 91       	pop	r27
     880:	af 91       	pop	r26
     882:	9f 91       	pop	r25
     884:	8f 91       	pop	r24
     886:	7f 91       	pop	r23
     888:	6f 91       	pop	r22
     88a:	5f 91       	pop	r21
     88c:	4f 91       	pop	r20
     88e:	3f 91       	pop	r19
     890:	2f 91       	pop	r18
     892:	0f 90       	pop	r0
     894:	0f be       	out	0x3f, r0	; 63
     896:	0f 90       	pop	r0
     898:	1f 90       	pop	r1
     89a:	18 95       	reti

0000089c <__vector_22>:
     89c:	1f 92       	push	r1
     89e:	0f 92       	push	r0
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	0f 92       	push	r0
     8a4:	11 24       	eor	r1, r1
     8a6:	2f 93       	push	r18
     8a8:	3f 93       	push	r19
     8aa:	4f 93       	push	r20
     8ac:	5f 93       	push	r21
     8ae:	6f 93       	push	r22
     8b0:	7f 93       	push	r23
     8b2:	8f 93       	push	r24
     8b4:	9f 93       	push	r25
     8b6:	af 93       	push	r26
     8b8:	bf 93       	push	r27
     8ba:	ef 93       	push	r30
     8bc:	ff 93       	push	r31
     8be:	e0 91 11 20 	lds	r30, 0x2011
     8c2:	f0 91 12 20 	lds	r31, 0x2012
     8c6:	30 97       	sbiw	r30, 0x00	; 0
     8c8:	09 f0       	breq	.+2      	; 0x8cc <__vector_22+0x30>
     8ca:	09 95       	icall
     8cc:	ff 91       	pop	r31
     8ce:	ef 91       	pop	r30
     8d0:	bf 91       	pop	r27
     8d2:	af 91       	pop	r26
     8d4:	9f 91       	pop	r25
     8d6:	8f 91       	pop	r24
     8d8:	7f 91       	pop	r23
     8da:	6f 91       	pop	r22
     8dc:	5f 91       	pop	r21
     8de:	4f 91       	pop	r20
     8e0:	3f 91       	pop	r19
     8e2:	2f 91       	pop	r18
     8e4:	0f 90       	pop	r0
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	0f 90       	pop	r0
     8ea:	1f 90       	pop	r1
     8ec:	18 95       	reti

000008ee <__vector_23>:
     8ee:	1f 92       	push	r1
     8f0:	0f 92       	push	r0
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	0f 92       	push	r0
     8f6:	11 24       	eor	r1, r1
     8f8:	2f 93       	push	r18
     8fa:	3f 93       	push	r19
     8fc:	4f 93       	push	r20
     8fe:	5f 93       	push	r21
     900:	6f 93       	push	r22
     902:	7f 93       	push	r23
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
     908:	af 93       	push	r26
     90a:	bf 93       	push	r27
     90c:	ef 93       	push	r30
     90e:	ff 93       	push	r31
     910:	e0 91 13 20 	lds	r30, 0x2013
     914:	f0 91 14 20 	lds	r31, 0x2014
     918:	30 97       	sbiw	r30, 0x00	; 0
     91a:	09 f0       	breq	.+2      	; 0x91e <__vector_23+0x30>
     91c:	09 95       	icall
     91e:	ff 91       	pop	r31
     920:	ef 91       	pop	r30
     922:	bf 91       	pop	r27
     924:	af 91       	pop	r26
     926:	9f 91       	pop	r25
     928:	8f 91       	pop	r24
     92a:	7f 91       	pop	r23
     92c:	6f 91       	pop	r22
     92e:	5f 91       	pop	r21
     930:	4f 91       	pop	r20
     932:	3f 91       	pop	r19
     934:	2f 91       	pop	r18
     936:	0f 90       	pop	r0
     938:	0f be       	out	0x3f, r0	; 63
     93a:	0f 90       	pop	r0
     93c:	1f 90       	pop	r1
     93e:	18 95       	reti

00000940 <__vector_77>:
     940:	1f 92       	push	r1
     942:	0f 92       	push	r0
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	0f 92       	push	r0
     948:	11 24       	eor	r1, r1
     94a:	2f 93       	push	r18
     94c:	3f 93       	push	r19
     94e:	4f 93       	push	r20
     950:	5f 93       	push	r21
     952:	6f 93       	push	r22
     954:	7f 93       	push	r23
     956:	8f 93       	push	r24
     958:	9f 93       	push	r25
     95a:	af 93       	push	r26
     95c:	bf 93       	push	r27
     95e:	ef 93       	push	r30
     960:	ff 93       	push	r31
     962:	e0 91 15 20 	lds	r30, 0x2015
     966:	f0 91 16 20 	lds	r31, 0x2016
     96a:	30 97       	sbiw	r30, 0x00	; 0
     96c:	09 f0       	breq	.+2      	; 0x970 <__vector_77+0x30>
     96e:	09 95       	icall
     970:	ff 91       	pop	r31
     972:	ef 91       	pop	r30
     974:	bf 91       	pop	r27
     976:	af 91       	pop	r26
     978:	9f 91       	pop	r25
     97a:	8f 91       	pop	r24
     97c:	7f 91       	pop	r23
     97e:	6f 91       	pop	r22
     980:	5f 91       	pop	r21
     982:	4f 91       	pop	r20
     984:	3f 91       	pop	r19
     986:	2f 91       	pop	r18
     988:	0f 90       	pop	r0
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	0f 90       	pop	r0
     98e:	1f 90       	pop	r1
     990:	18 95       	reti

00000992 <__vector_78>:
     992:	1f 92       	push	r1
     994:	0f 92       	push	r0
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	0f 92       	push	r0
     99a:	11 24       	eor	r1, r1
     99c:	2f 93       	push	r18
     99e:	3f 93       	push	r19
     9a0:	4f 93       	push	r20
     9a2:	5f 93       	push	r21
     9a4:	6f 93       	push	r22
     9a6:	7f 93       	push	r23
     9a8:	8f 93       	push	r24
     9aa:	9f 93       	push	r25
     9ac:	af 93       	push	r26
     9ae:	bf 93       	push	r27
     9b0:	ef 93       	push	r30
     9b2:	ff 93       	push	r31
     9b4:	e0 91 17 20 	lds	r30, 0x2017
     9b8:	f0 91 18 20 	lds	r31, 0x2018
     9bc:	30 97       	sbiw	r30, 0x00	; 0
     9be:	09 f0       	breq	.+2      	; 0x9c2 <__vector_78+0x30>
     9c0:	09 95       	icall
     9c2:	ff 91       	pop	r31
     9c4:	ef 91       	pop	r30
     9c6:	bf 91       	pop	r27
     9c8:	af 91       	pop	r26
     9ca:	9f 91       	pop	r25
     9cc:	8f 91       	pop	r24
     9ce:	7f 91       	pop	r23
     9d0:	6f 91       	pop	r22
     9d2:	5f 91       	pop	r21
     9d4:	4f 91       	pop	r20
     9d6:	3f 91       	pop	r19
     9d8:	2f 91       	pop	r18
     9da:	0f 90       	pop	r0
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	0f 90       	pop	r0
     9e0:	1f 90       	pop	r1
     9e2:	18 95       	reti

000009e4 <__vector_79>:
     9e4:	1f 92       	push	r1
     9e6:	0f 92       	push	r0
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	0f 92       	push	r0
     9ec:	11 24       	eor	r1, r1
     9ee:	2f 93       	push	r18
     9f0:	3f 93       	push	r19
     9f2:	4f 93       	push	r20
     9f4:	5f 93       	push	r21
     9f6:	6f 93       	push	r22
     9f8:	7f 93       	push	r23
     9fa:	8f 93       	push	r24
     9fc:	9f 93       	push	r25
     9fe:	af 93       	push	r26
     a00:	bf 93       	push	r27
     a02:	ef 93       	push	r30
     a04:	ff 93       	push	r31
     a06:	e0 91 19 20 	lds	r30, 0x2019
     a0a:	f0 91 1a 20 	lds	r31, 0x201A
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	09 f0       	breq	.+2      	; 0xa14 <__vector_79+0x30>
     a12:	09 95       	icall
     a14:	ff 91       	pop	r31
     a16:	ef 91       	pop	r30
     a18:	bf 91       	pop	r27
     a1a:	af 91       	pop	r26
     a1c:	9f 91       	pop	r25
     a1e:	8f 91       	pop	r24
     a20:	7f 91       	pop	r23
     a22:	6f 91       	pop	r22
     a24:	5f 91       	pop	r21
     a26:	4f 91       	pop	r20
     a28:	3f 91       	pop	r19
     a2a:	2f 91       	pop	r18
     a2c:	0f 90       	pop	r0
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	0f 90       	pop	r0
     a32:	1f 90       	pop	r1
     a34:	18 95       	reti

00000a36 <__vector_80>:
     a36:	1f 92       	push	r1
     a38:	0f 92       	push	r0
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	0f 92       	push	r0
     a3e:	11 24       	eor	r1, r1
     a40:	2f 93       	push	r18
     a42:	3f 93       	push	r19
     a44:	4f 93       	push	r20
     a46:	5f 93       	push	r21
     a48:	6f 93       	push	r22
     a4a:	7f 93       	push	r23
     a4c:	8f 93       	push	r24
     a4e:	9f 93       	push	r25
     a50:	af 93       	push	r26
     a52:	bf 93       	push	r27
     a54:	ef 93       	push	r30
     a56:	ff 93       	push	r31
     a58:	e0 91 1b 20 	lds	r30, 0x201B
     a5c:	f0 91 1c 20 	lds	r31, 0x201C
     a60:	30 97       	sbiw	r30, 0x00	; 0
     a62:	09 f0       	breq	.+2      	; 0xa66 <__vector_80+0x30>
     a64:	09 95       	icall
     a66:	ff 91       	pop	r31
     a68:	ef 91       	pop	r30
     a6a:	bf 91       	pop	r27
     a6c:	af 91       	pop	r26
     a6e:	9f 91       	pop	r25
     a70:	8f 91       	pop	r24
     a72:	7f 91       	pop	r23
     a74:	6f 91       	pop	r22
     a76:	5f 91       	pop	r21
     a78:	4f 91       	pop	r20
     a7a:	3f 91       	pop	r19
     a7c:	2f 91       	pop	r18
     a7e:	0f 90       	pop	r0
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	0f 90       	pop	r0
     a84:	1f 90       	pop	r1
     a86:	18 95       	reti

00000a88 <__vector_81>:
     a88:	1f 92       	push	r1
     a8a:	0f 92       	push	r0
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	0f 92       	push	r0
     a90:	11 24       	eor	r1, r1
     a92:	2f 93       	push	r18
     a94:	3f 93       	push	r19
     a96:	4f 93       	push	r20
     a98:	5f 93       	push	r21
     a9a:	6f 93       	push	r22
     a9c:	7f 93       	push	r23
     a9e:	8f 93       	push	r24
     aa0:	9f 93       	push	r25
     aa2:	af 93       	push	r26
     aa4:	bf 93       	push	r27
     aa6:	ef 93       	push	r30
     aa8:	ff 93       	push	r31
     aaa:	e0 91 1d 20 	lds	r30, 0x201D
     aae:	f0 91 1e 20 	lds	r31, 0x201E
     ab2:	30 97       	sbiw	r30, 0x00	; 0
     ab4:	09 f0       	breq	.+2      	; 0xab8 <__vector_81+0x30>
     ab6:	09 95       	icall
     ab8:	ff 91       	pop	r31
     aba:	ef 91       	pop	r30
     abc:	bf 91       	pop	r27
     abe:	af 91       	pop	r26
     ac0:	9f 91       	pop	r25
     ac2:	8f 91       	pop	r24
     ac4:	7f 91       	pop	r23
     ac6:	6f 91       	pop	r22
     ac8:	5f 91       	pop	r21
     aca:	4f 91       	pop	r20
     acc:	3f 91       	pop	r19
     ace:	2f 91       	pop	r18
     ad0:	0f 90       	pop	r0
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	0f 90       	pop	r0
     ad6:	1f 90       	pop	r1
     ad8:	18 95       	reti

00000ada <__vector_82>:
     ada:	1f 92       	push	r1
     adc:	0f 92       	push	r0
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	0f 92       	push	r0
     ae2:	11 24       	eor	r1, r1
     ae4:	2f 93       	push	r18
     ae6:	3f 93       	push	r19
     ae8:	4f 93       	push	r20
     aea:	5f 93       	push	r21
     aec:	6f 93       	push	r22
     aee:	7f 93       	push	r23
     af0:	8f 93       	push	r24
     af2:	9f 93       	push	r25
     af4:	af 93       	push	r26
     af6:	bf 93       	push	r27
     af8:	ef 93       	push	r30
     afa:	ff 93       	push	r31
     afc:	e0 91 1f 20 	lds	r30, 0x201F
     b00:	f0 91 20 20 	lds	r31, 0x2020
     b04:	30 97       	sbiw	r30, 0x00	; 0
     b06:	09 f0       	breq	.+2      	; 0xb0a <__vector_82+0x30>
     b08:	09 95       	icall
     b0a:	ff 91       	pop	r31
     b0c:	ef 91       	pop	r30
     b0e:	bf 91       	pop	r27
     b10:	af 91       	pop	r26
     b12:	9f 91       	pop	r25
     b14:	8f 91       	pop	r24
     b16:	7f 91       	pop	r23
     b18:	6f 91       	pop	r22
     b1a:	5f 91       	pop	r21
     b1c:	4f 91       	pop	r20
     b1e:	3f 91       	pop	r19
     b20:	2f 91       	pop	r18
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	0f 90       	pop	r0
     b28:	1f 90       	pop	r1
     b2a:	18 95       	reti

00000b2c <__vector_83>:
     b2c:	1f 92       	push	r1
     b2e:	0f 92       	push	r0
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	0f 92       	push	r0
     b34:	11 24       	eor	r1, r1
     b36:	2f 93       	push	r18
     b38:	3f 93       	push	r19
     b3a:	4f 93       	push	r20
     b3c:	5f 93       	push	r21
     b3e:	6f 93       	push	r22
     b40:	7f 93       	push	r23
     b42:	8f 93       	push	r24
     b44:	9f 93       	push	r25
     b46:	af 93       	push	r26
     b48:	bf 93       	push	r27
     b4a:	ef 93       	push	r30
     b4c:	ff 93       	push	r31
     b4e:	e0 91 21 20 	lds	r30, 0x2021
     b52:	f0 91 22 20 	lds	r31, 0x2022
     b56:	30 97       	sbiw	r30, 0x00	; 0
     b58:	09 f0       	breq	.+2      	; 0xb5c <__vector_83+0x30>
     b5a:	09 95       	icall
     b5c:	ff 91       	pop	r31
     b5e:	ef 91       	pop	r30
     b60:	bf 91       	pop	r27
     b62:	af 91       	pop	r26
     b64:	9f 91       	pop	r25
     b66:	8f 91       	pop	r24
     b68:	7f 91       	pop	r23
     b6a:	6f 91       	pop	r22
     b6c:	5f 91       	pop	r21
     b6e:	4f 91       	pop	r20
     b70:	3f 91       	pop	r19
     b72:	2f 91       	pop	r18
     b74:	0f 90       	pop	r0
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	0f 90       	pop	r0
     b7a:	1f 90       	pop	r1
     b7c:	18 95       	reti

00000b7e <__vector_84>:
     b7e:	1f 92       	push	r1
     b80:	0f 92       	push	r0
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	0f 92       	push	r0
     b86:	11 24       	eor	r1, r1
     b88:	2f 93       	push	r18
     b8a:	3f 93       	push	r19
     b8c:	4f 93       	push	r20
     b8e:	5f 93       	push	r21
     b90:	6f 93       	push	r22
     b92:	7f 93       	push	r23
     b94:	8f 93       	push	r24
     b96:	9f 93       	push	r25
     b98:	af 93       	push	r26
     b9a:	bf 93       	push	r27
     b9c:	ef 93       	push	r30
     b9e:	ff 93       	push	r31
     ba0:	e0 91 23 20 	lds	r30, 0x2023
     ba4:	f0 91 24 20 	lds	r31, 0x2024
     ba8:	30 97       	sbiw	r30, 0x00	; 0
     baa:	09 f0       	breq	.+2      	; 0xbae <__vector_84+0x30>
     bac:	09 95       	icall
     bae:	ff 91       	pop	r31
     bb0:	ef 91       	pop	r30
     bb2:	bf 91       	pop	r27
     bb4:	af 91       	pop	r26
     bb6:	9f 91       	pop	r25
     bb8:	8f 91       	pop	r24
     bba:	7f 91       	pop	r23
     bbc:	6f 91       	pop	r22
     bbe:	5f 91       	pop	r21
     bc0:	4f 91       	pop	r20
     bc2:	3f 91       	pop	r19
     bc4:	2f 91       	pop	r18
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	1f 90       	pop	r1
     bce:	18 95       	reti

00000bd0 <__vector_85>:
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1
     bda:	2f 93       	push	r18
     bdc:	3f 93       	push	r19
     bde:	4f 93       	push	r20
     be0:	5f 93       	push	r21
     be2:	6f 93       	push	r22
     be4:	7f 93       	push	r23
     be6:	8f 93       	push	r24
     be8:	9f 93       	push	r25
     bea:	af 93       	push	r26
     bec:	bf 93       	push	r27
     bee:	ef 93       	push	r30
     bf0:	ff 93       	push	r31
     bf2:	e0 91 25 20 	lds	r30, 0x2025
     bf6:	f0 91 26 20 	lds	r31, 0x2026
     bfa:	30 97       	sbiw	r30, 0x00	; 0
     bfc:	09 f0       	breq	.+2      	; 0xc00 <__vector_85+0x30>
     bfe:	09 95       	icall
     c00:	ff 91       	pop	r31
     c02:	ef 91       	pop	r30
     c04:	bf 91       	pop	r27
     c06:	af 91       	pop	r26
     c08:	9f 91       	pop	r25
     c0a:	8f 91       	pop	r24
     c0c:	7f 91       	pop	r23
     c0e:	6f 91       	pop	r22
     c10:	5f 91       	pop	r21
     c12:	4f 91       	pop	r20
     c14:	3f 91       	pop	r19
     c16:	2f 91       	pop	r18
     c18:	0f 90       	pop	r0
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	0f 90       	pop	r0
     c1e:	1f 90       	pop	r1
     c20:	18 95       	reti

00000c22 <__vector_86>:
     c22:	1f 92       	push	r1
     c24:	0f 92       	push	r0
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	0f 92       	push	r0
     c2a:	11 24       	eor	r1, r1
     c2c:	2f 93       	push	r18
     c2e:	3f 93       	push	r19
     c30:	4f 93       	push	r20
     c32:	5f 93       	push	r21
     c34:	6f 93       	push	r22
     c36:	7f 93       	push	r23
     c38:	8f 93       	push	r24
     c3a:	9f 93       	push	r25
     c3c:	af 93       	push	r26
     c3e:	bf 93       	push	r27
     c40:	ef 93       	push	r30
     c42:	ff 93       	push	r31
     c44:	e0 91 27 20 	lds	r30, 0x2027
     c48:	f0 91 28 20 	lds	r31, 0x2028
     c4c:	30 97       	sbiw	r30, 0x00	; 0
     c4e:	09 f0       	breq	.+2      	; 0xc52 <__vector_86+0x30>
     c50:	09 95       	icall
     c52:	ff 91       	pop	r31
     c54:	ef 91       	pop	r30
     c56:	bf 91       	pop	r27
     c58:	af 91       	pop	r26
     c5a:	9f 91       	pop	r25
     c5c:	8f 91       	pop	r24
     c5e:	7f 91       	pop	r23
     c60:	6f 91       	pop	r22
     c62:	5f 91       	pop	r21
     c64:	4f 91       	pop	r20
     c66:	3f 91       	pop	r19
     c68:	2f 91       	pop	r18
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <__vector_47>:
     c74:	1f 92       	push	r1
     c76:	0f 92       	push	r0
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	0f 92       	push	r0
     c7c:	11 24       	eor	r1, r1
     c7e:	2f 93       	push	r18
     c80:	3f 93       	push	r19
     c82:	4f 93       	push	r20
     c84:	5f 93       	push	r21
     c86:	6f 93       	push	r22
     c88:	7f 93       	push	r23
     c8a:	8f 93       	push	r24
     c8c:	9f 93       	push	r25
     c8e:	af 93       	push	r26
     c90:	bf 93       	push	r27
     c92:	ef 93       	push	r30
     c94:	ff 93       	push	r31
     c96:	e0 91 29 20 	lds	r30, 0x2029
     c9a:	f0 91 2a 20 	lds	r31, 0x202A
     c9e:	30 97       	sbiw	r30, 0x00	; 0
     ca0:	09 f0       	breq	.+2      	; 0xca4 <__vector_47+0x30>
     ca2:	09 95       	icall
     ca4:	ff 91       	pop	r31
     ca6:	ef 91       	pop	r30
     ca8:	bf 91       	pop	r27
     caa:	af 91       	pop	r26
     cac:	9f 91       	pop	r25
     cae:	8f 91       	pop	r24
     cb0:	7f 91       	pop	r23
     cb2:	6f 91       	pop	r22
     cb4:	5f 91       	pop	r21
     cb6:	4f 91       	pop	r20
     cb8:	3f 91       	pop	r19
     cba:	2f 91       	pop	r18
     cbc:	0f 90       	pop	r0
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	0f 90       	pop	r0
     cc2:	1f 90       	pop	r1
     cc4:	18 95       	reti

00000cc6 <__vector_48>:
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	0f 92       	push	r0
     cce:	11 24       	eor	r1, r1
     cd0:	2f 93       	push	r18
     cd2:	3f 93       	push	r19
     cd4:	4f 93       	push	r20
     cd6:	5f 93       	push	r21
     cd8:	6f 93       	push	r22
     cda:	7f 93       	push	r23
     cdc:	8f 93       	push	r24
     cde:	9f 93       	push	r25
     ce0:	af 93       	push	r26
     ce2:	bf 93       	push	r27
     ce4:	ef 93       	push	r30
     ce6:	ff 93       	push	r31
     ce8:	e0 91 2b 20 	lds	r30, 0x202B
     cec:	f0 91 2c 20 	lds	r31, 0x202C
     cf0:	30 97       	sbiw	r30, 0x00	; 0
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <__vector_48+0x30>
     cf4:	09 95       	icall
     cf6:	ff 91       	pop	r31
     cf8:	ef 91       	pop	r30
     cfa:	bf 91       	pop	r27
     cfc:	af 91       	pop	r26
     cfe:	9f 91       	pop	r25
     d00:	8f 91       	pop	r24
     d02:	7f 91       	pop	r23
     d04:	6f 91       	pop	r22
     d06:	5f 91       	pop	r21
     d08:	4f 91       	pop	r20
     d0a:	3f 91       	pop	r19
     d0c:	2f 91       	pop	r18
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	0f 90       	pop	r0
     d14:	1f 90       	pop	r1
     d16:	18 95       	reti

00000d18 <__vector_49>:
     d18:	1f 92       	push	r1
     d1a:	0f 92       	push	r0
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	0f 92       	push	r0
     d20:	11 24       	eor	r1, r1
     d22:	2f 93       	push	r18
     d24:	3f 93       	push	r19
     d26:	4f 93       	push	r20
     d28:	5f 93       	push	r21
     d2a:	6f 93       	push	r22
     d2c:	7f 93       	push	r23
     d2e:	8f 93       	push	r24
     d30:	9f 93       	push	r25
     d32:	af 93       	push	r26
     d34:	bf 93       	push	r27
     d36:	ef 93       	push	r30
     d38:	ff 93       	push	r31
     d3a:	e0 91 2d 20 	lds	r30, 0x202D
     d3e:	f0 91 2e 20 	lds	r31, 0x202E
     d42:	30 97       	sbiw	r30, 0x00	; 0
     d44:	09 f0       	breq	.+2      	; 0xd48 <__vector_49+0x30>
     d46:	09 95       	icall
     d48:	ff 91       	pop	r31
     d4a:	ef 91       	pop	r30
     d4c:	bf 91       	pop	r27
     d4e:	af 91       	pop	r26
     d50:	9f 91       	pop	r25
     d52:	8f 91       	pop	r24
     d54:	7f 91       	pop	r23
     d56:	6f 91       	pop	r22
     d58:	5f 91       	pop	r21
     d5a:	4f 91       	pop	r20
     d5c:	3f 91       	pop	r19
     d5e:	2f 91       	pop	r18
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	0f 90       	pop	r0
     d66:	1f 90       	pop	r1
     d68:	18 95       	reti

00000d6a <__vector_50>:
     d6a:	1f 92       	push	r1
     d6c:	0f 92       	push	r0
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	0f 92       	push	r0
     d72:	11 24       	eor	r1, r1
     d74:	2f 93       	push	r18
     d76:	3f 93       	push	r19
     d78:	4f 93       	push	r20
     d7a:	5f 93       	push	r21
     d7c:	6f 93       	push	r22
     d7e:	7f 93       	push	r23
     d80:	8f 93       	push	r24
     d82:	9f 93       	push	r25
     d84:	af 93       	push	r26
     d86:	bf 93       	push	r27
     d88:	ef 93       	push	r30
     d8a:	ff 93       	push	r31
     d8c:	e0 91 2f 20 	lds	r30, 0x202F
     d90:	f0 91 30 20 	lds	r31, 0x2030
     d94:	30 97       	sbiw	r30, 0x00	; 0
     d96:	09 f0       	breq	.+2      	; 0xd9a <__vector_50+0x30>
     d98:	09 95       	icall
     d9a:	ff 91       	pop	r31
     d9c:	ef 91       	pop	r30
     d9e:	bf 91       	pop	r27
     da0:	af 91       	pop	r26
     da2:	9f 91       	pop	r25
     da4:	8f 91       	pop	r24
     da6:	7f 91       	pop	r23
     da8:	6f 91       	pop	r22
     daa:	5f 91       	pop	r21
     dac:	4f 91       	pop	r20
     dae:	3f 91       	pop	r19
     db0:	2f 91       	pop	r18
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
     db8:	1f 90       	pop	r1
     dba:	18 95       	reti

00000dbc <__vector_51>:
     dbc:	1f 92       	push	r1
     dbe:	0f 92       	push	r0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	5f 93       	push	r21
     dce:	6f 93       	push	r22
     dd0:	7f 93       	push	r23
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
     dde:	e0 91 31 20 	lds	r30, 0x2031
     de2:	f0 91 32 20 	lds	r31, 0x2032
     de6:	30 97       	sbiw	r30, 0x00	; 0
     de8:	09 f0       	breq	.+2      	; 0xdec <__vector_51+0x30>
     dea:	09 95       	icall
     dec:	ff 91       	pop	r31
     dee:	ef 91       	pop	r30
     df0:	bf 91       	pop	r27
     df2:	af 91       	pop	r26
     df4:	9f 91       	pop	r25
     df6:	8f 91       	pop	r24
     df8:	7f 91       	pop	r23
     dfa:	6f 91       	pop	r22
     dfc:	5f 91       	pop	r21
     dfe:	4f 91       	pop	r20
     e00:	3f 91       	pop	r19
     e02:	2f 91       	pop	r18
     e04:	0f 90       	pop	r0
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	0f 90       	pop	r0
     e0a:	1f 90       	pop	r1
     e0c:	18 95       	reti

00000e0e <__vector_52>:
     e0e:	1f 92       	push	r1
     e10:	0f 92       	push	r0
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	0f 92       	push	r0
     e16:	11 24       	eor	r1, r1
     e18:	2f 93       	push	r18
     e1a:	3f 93       	push	r19
     e1c:	4f 93       	push	r20
     e1e:	5f 93       	push	r21
     e20:	6f 93       	push	r22
     e22:	7f 93       	push	r23
     e24:	8f 93       	push	r24
     e26:	9f 93       	push	r25
     e28:	af 93       	push	r26
     e2a:	bf 93       	push	r27
     e2c:	ef 93       	push	r30
     e2e:	ff 93       	push	r31
     e30:	e0 91 33 20 	lds	r30, 0x2033
     e34:	f0 91 34 20 	lds	r31, 0x2034
     e38:	30 97       	sbiw	r30, 0x00	; 0
     e3a:	09 f0       	breq	.+2      	; 0xe3e <__vector_52+0x30>
     e3c:	09 95       	icall
     e3e:	ff 91       	pop	r31
     e40:	ef 91       	pop	r30
     e42:	bf 91       	pop	r27
     e44:	af 91       	pop	r26
     e46:	9f 91       	pop	r25
     e48:	8f 91       	pop	r24
     e4a:	7f 91       	pop	r23
     e4c:	6f 91       	pop	r22
     e4e:	5f 91       	pop	r21
     e50:	4f 91       	pop	r20
     e52:	3f 91       	pop	r19
     e54:	2f 91       	pop	r18
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	0f 90       	pop	r0
     e5c:	1f 90       	pop	r1
     e5e:	18 95       	reti

00000e60 <tc_enable>:
     e60:	cf 93       	push	r28
     e62:	cf b7       	in	r28, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	81 15       	cp	r24, r1
     e68:	28 e0       	ldi	r18, 0x08	; 8
     e6a:	92 07       	cpc	r25, r18
     e6c:	49 f4       	brne	.+18     	; 0xe80 <tc_enable+0x20>
     e6e:	61 e0       	ldi	r22, 0x01	; 1
     e70:	83 e0       	ldi	r24, 0x03	; 3
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0d da       	rcall	.-3046   	; 0x290 <sysclk_enable_module>
     e76:	64 e0       	ldi	r22, 0x04	; 4
     e78:	83 e0       	ldi	r24, 0x03	; 3
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	09 da       	rcall	.-3054   	; 0x290 <sysclk_enable_module>
     e7e:	35 c0       	rjmp	.+106    	; 0xeea <tc_enable+0x8a>
     e80:	80 34       	cpi	r24, 0x40	; 64
     e82:	28 e0       	ldi	r18, 0x08	; 8
     e84:	92 07       	cpc	r25, r18
     e86:	49 f4       	brne	.+18     	; 0xe9a <tc_enable+0x3a>
     e88:	62 e0       	ldi	r22, 0x02	; 2
     e8a:	83 e0       	ldi	r24, 0x03	; 3
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	00 da       	rcall	.-3072   	; 0x290 <sysclk_enable_module>
     e90:	64 e0       	ldi	r22, 0x04	; 4
     e92:	83 e0       	ldi	r24, 0x03	; 3
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	fc d9       	rcall	.-3080   	; 0x290 <sysclk_enable_module>
     e98:	28 c0       	rjmp	.+80     	; 0xeea <tc_enable+0x8a>
     e9a:	81 15       	cp	r24, r1
     e9c:	29 e0       	ldi	r18, 0x09	; 9
     e9e:	92 07       	cpc	r25, r18
     ea0:	49 f4       	brne	.+18     	; 0xeb4 <tc_enable+0x54>
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	84 e0       	ldi	r24, 0x04	; 4
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	f3 d9       	rcall	.-3098   	; 0x290 <sysclk_enable_module>
     eaa:	64 e0       	ldi	r22, 0x04	; 4
     eac:	84 e0       	ldi	r24, 0x04	; 4
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	ef d9       	rcall	.-3106   	; 0x290 <sysclk_enable_module>
     eb2:	1b c0       	rjmp	.+54     	; 0xeea <tc_enable+0x8a>
     eb4:	80 34       	cpi	r24, 0x40	; 64
     eb6:	29 e0       	ldi	r18, 0x09	; 9
     eb8:	92 07       	cpc	r25, r18
     eba:	49 f4       	brne	.+18     	; 0xece <tc_enable+0x6e>
     ebc:	62 e0       	ldi	r22, 0x02	; 2
     ebe:	84 e0       	ldi	r24, 0x04	; 4
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	e6 d9       	rcall	.-3124   	; 0x290 <sysclk_enable_module>
     ec4:	64 e0       	ldi	r22, 0x04	; 4
     ec6:	84 e0       	ldi	r24, 0x04	; 4
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	e2 d9       	rcall	.-3132   	; 0x290 <sysclk_enable_module>
     ecc:	0e c0       	rjmp	.+28     	; 0xeea <tc_enable+0x8a>
     ece:	81 15       	cp	r24, r1
     ed0:	9a 40       	sbci	r25, 0x0A	; 10
     ed2:	49 f4       	brne	.+18     	; 0xee6 <tc_enable+0x86>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	85 e0       	ldi	r24, 0x05	; 5
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	da d9       	rcall	.-3148   	; 0x290 <sysclk_enable_module>
     edc:	64 e0       	ldi	r22, 0x04	; 4
     ede:	85 e0       	ldi	r24, 0x05	; 5
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	d6 d9       	rcall	.-3156   	; 0x290 <sysclk_enable_module>
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <tc_enable+0x8a>
     ee6:	cf bf       	out	0x3f, r28	; 63
     ee8:	09 c0       	rjmp	.+18     	; 0xefc <tc_enable+0x9c>
     eea:	8f b7       	in	r24, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	ea e3       	ldi	r30, 0x3A	; 58
     ef0:	f0 e2       	ldi	r31, 0x20	; 32
     ef2:	90 81       	ld	r25, Z
     ef4:	9f 5f       	subi	r25, 0xFF	; 255
     ef6:	90 83       	st	Z, r25
     ef8:	8f bf       	out	0x3f, r24	; 63
     efa:	cf bf       	out	0x3f, r28	; 63
     efc:	cf 91       	pop	r28
     efe:	08 95       	ret

00000f00 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
     f00:	81 15       	cp	r24, r1
     f02:	28 e0       	ldi	r18, 0x08	; 8
     f04:	92 07       	cpc	r25, r18
     f06:	29 f4       	brne	.+10     	; 0xf12 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
     f08:	60 93 01 20 	sts	0x2001, r22
     f0c:	70 93 02 20 	sts	0x2002, r23
     f10:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
     f12:	80 34       	cpi	r24, 0x40	; 64
     f14:	28 e0       	ldi	r18, 0x08	; 8
     f16:	92 07       	cpc	r25, r18
     f18:	29 f4       	brne	.+10     	; 0xf24 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
     f1a:	60 93 0d 20 	sts	0x200D, r22
     f1e:	70 93 0e 20 	sts	0x200E, r23
     f22:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
     f24:	81 15       	cp	r24, r1
     f26:	29 e0       	ldi	r18, 0x09	; 9
     f28:	92 07       	cpc	r25, r18
     f2a:	29 f4       	brne	.+10     	; 0xf36 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
     f2c:	60 93 15 20 	sts	0x2015, r22
     f30:	70 93 16 20 	sts	0x2016, r23
     f34:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
     f36:	80 34       	cpi	r24, 0x40	; 64
     f38:	29 e0       	ldi	r18, 0x09	; 9
     f3a:	92 07       	cpc	r25, r18
     f3c:	29 f4       	brne	.+10     	; 0xf48 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
     f3e:	60 93 21 20 	sts	0x2021, r22
     f42:	70 93 22 20 	sts	0x2022, r23
     f46:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
     f48:	81 15       	cp	r24, r1
     f4a:	9a 40       	sbci	r25, 0x0A	; 10
     f4c:	21 f4       	brne	.+8      	; 0xf56 <tc_set_overflow_interrupt_callback+0x56>
		tc_tce0_ovf_callback = callback;
     f4e:	60 93 29 20 	sts	0x2029, r22
     f52:	70 93 2a 20 	sts	0x202A, r23
     f56:	08 95       	ret

00000f58 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
     f58:	cf 92       	push	r12
     f5a:	df 92       	push	r13
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
     f66:	6b 01       	movw	r12, r22
     f68:	e1 2c       	mov	r14, r1
     f6a:	f1 2c       	mov	r15, r1
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	78 e4       	ldi	r23, 0x48	; 72
     f70:	88 ee       	ldi	r24, 0xE8	; 232
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	a7 01       	movw	r20, r14
     f76:	96 01       	movw	r18, r12
     f78:	08 d5       	rcall	.+2576   	; 0x198a <__udivmodsi4>
     f7a:	ca 01       	movw	r24, r20
     f7c:	b9 01       	movw	r22, r18
     f7e:	2f ef       	ldi	r18, 0xFF	; 255
     f80:	3f ef       	ldi	r19, 0xFF	; 255
     f82:	40 e0       	ldi	r20, 0x00	; 0
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	01 d5       	rcall	.+2562   	; 0x198a <__udivmodsi4>
	if (smallest_div < 1) {
     f88:	21 15       	cp	r18, r1
     f8a:	31 05       	cpc	r19, r1
     f8c:	39 f4       	brne	.+14     	; 0xf9c <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	8e 83       	std	Y+6, r24	; 0x06
     f94:	9f 83       	std	Y+7, r25	; 0x07

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
     f96:	21 e0       	ldi	r18, 0x01	; 1
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	39 c0       	rjmp	.+114    	; 0x100e <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	38 f4       	brcc	.+14     	; 0xfb0 <pwm_set_frequency+0x58>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	8e 83       	std	Y+6, r24	; 0x06
     fa8:	9f 83       	std	Y+7, r25	; 0x07
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
     faa:	22 e0       	ldi	r18, 0x02	; 2
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	2f c0       	rjmp	.+94     	; 0x100e <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
     fb0:	24 30       	cpi	r18, 0x04	; 4
     fb2:	31 05       	cpc	r19, r1
     fb4:	38 f4       	brcc	.+14     	; 0xfc4 <pwm_set_frequency+0x6c>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
     fb6:	83 e0       	ldi	r24, 0x03	; 3
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	8e 83       	std	Y+6, r24	; 0x06
     fbc:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
     fbe:	24 e0       	ldi	r18, 0x04	; 4
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	25 c0       	rjmp	.+74     	; 0x100e <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
     fc4:	28 30       	cpi	r18, 0x08	; 8
     fc6:	31 05       	cpc	r19, r1
     fc8:	38 f4       	brcc	.+14     	; 0xfd8 <pwm_set_frequency+0x80>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
     fca:	84 e0       	ldi	r24, 0x04	; 4
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	8e 83       	std	Y+6, r24	; 0x06
     fd0:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
     fd2:	28 e0       	ldi	r18, 0x08	; 8
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	1b c0       	rjmp	.+54     	; 0x100e <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
     fd8:	20 34       	cpi	r18, 0x40	; 64
     fda:	31 05       	cpc	r19, r1
     fdc:	38 f4       	brcc	.+14     	; 0xfec <pwm_set_frequency+0x94>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
     fde:	85 e0       	ldi	r24, 0x05	; 5
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	8e 83       	std	Y+6, r24	; 0x06
     fe4:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
     fe6:	20 e4       	ldi	r18, 0x40	; 64
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	11 c0       	rjmp	.+34     	; 0x100e <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
     fec:	2f 3f       	cpi	r18, 0xFF	; 255
     fee:	31 05       	cpc	r19, r1
     ff0:	09 f0       	breq	.+2      	; 0xff4 <pwm_set_frequency+0x9c>
     ff2:	38 f4       	brcc	.+14     	; 0x1002 <pwm_set_frequency+0xaa>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
     ff4:	86 e0       	ldi	r24, 0x06	; 6
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	8e 83       	std	Y+6, r24	; 0x06
     ffa:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	31 e0       	ldi	r19, 0x01	; 1
    1000:	06 c0       	rjmp	.+12     	; 0x100e <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    1002:	87 e0       	ldi	r24, 0x07	; 7
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	8e 83       	std	Y+6, r24	; 0x06
    1008:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	78 e4       	ldi	r23, 0x48	; 72
    1016:	88 ee       	ldi	r24, 0xE8	; 232
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	b7 d4       	rcall	.+2414   	; 0x198a <__udivmodsi4>
    101c:	ca 01       	movw	r24, r20
    101e:	b9 01       	movw	r22, r18
    1020:	a7 01       	movw	r20, r14
    1022:	96 01       	movw	r18, r12
    1024:	b2 d4       	rcall	.+2404   	; 0x198a <__udivmodsi4>
    1026:	28 87       	std	Y+8, r18	; 0x08
    1028:	39 87       	std	Y+9, r19	; 0x09

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    102a:	24 36       	cpi	r18, 0x64	; 100
    102c:	31 05       	cpc	r19, r1
    102e:	20 f4       	brcc	.+8      	; 0x1038 <pwm_set_frequency+0xe0>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    1030:	1e 82       	std	Y+6, r1	; 0x06
    1032:	1f 82       	std	Y+7, r1	; 0x07
		config->period = 0;
    1034:	18 86       	std	Y+8, r1	; 0x08
    1036:	19 86       	std	Y+9, r1	; 0x09
		Assert(false);
	}
}
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	08 95       	ret

00001046 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	ec 01       	movw	r28, r24
    1050:	89 01       	movw	r16, r18
	/* Number of channels for this TC */
	uint8_t num_chan = 0;
	UNUSED(num_chan);

	/* Set TC and correct I/O pin to output */
	switch (tc) {
    1052:	62 30       	cpi	r22, 0x02	; 2
    1054:	71 05       	cpc	r23, r1
    1056:	e1 f1       	breq	.+120    	; 0x10d0 <pwm_init+0x8a>
    1058:	40 f4       	brcc	.+16     	; 0x106a <pwm_init+0x24>
    105a:	61 15       	cp	r22, r1
    105c:	71 05       	cpc	r23, r1
    105e:	71 f0       	breq	.+28     	; 0x107c <pwm_init+0x36>
    1060:	61 30       	cpi	r22, 0x01	; 1
    1062:	71 05       	cpc	r23, r1
    1064:	09 f0       	breq	.+2      	; 0x1068 <pwm_init+0x22>
    1066:	72 c0       	rjmp	.+228    	; 0x114c <pwm_init+0x106>
    1068:	1e c0       	rjmp	.+60     	; 0x10a6 <pwm_init+0x60>
    106a:	63 30       	cpi	r22, 0x03	; 3
    106c:	71 05       	cpc	r23, r1
    106e:	09 f4       	brne	.+2      	; 0x1072 <pwm_init+0x2c>
    1070:	44 c0       	rjmp	.+136    	; 0x10fa <pwm_init+0xb4>
    1072:	64 30       	cpi	r22, 0x04	; 4
    1074:	71 05       	cpc	r23, r1
    1076:	09 f0       	breq	.+2      	; 0x107a <pwm_init+0x34>
    1078:	69 c0       	rjmp	.+210    	; 0x114c <pwm_init+0x106>
    107a:	54 c0       	rjmp	.+168    	; 0x1124 <pwm_init+0xde>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	98 e0       	ldi	r25, 0x08	; 8
    1080:	88 83       	st	Y, r24
    1082:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    1084:	e0 e4       	ldi	r30, 0x40	; 64
    1086:	f6 e0       	ldi	r31, 0x06	; 6
    1088:	a0 81       	ld	r26, Z
    108a:	9a 01       	movw	r18, r20
    108c:	21 50       	subi	r18, 0x01	; 1
    108e:	31 09       	sbc	r19, r1
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	cb 01       	movw	r24, r22
    1096:	02 c0       	rjmp	.+4      	; 0x109c <pwm_init+0x56>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	2a 95       	dec	r18
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <pwm_init+0x52>
    10a0:	8a 2b       	or	r24, r26
    10a2:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    10a4:	53 c0       	rjmp	.+166    	; 0x114c <pwm_init+0x106>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    10a6:	80 e4       	ldi	r24, 0x40	; 64
    10a8:	98 e0       	ldi	r25, 0x08	; 8
    10aa:	88 83       	st	Y, r24
    10ac:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    10ae:	e0 e4       	ldi	r30, 0x40	; 64
    10b0:	f6 e0       	ldi	r31, 0x06	; 6
    10b2:	a0 81       	ld	r26, Z
    10b4:	9a 01       	movw	r18, r20
    10b6:	2d 5f       	subi	r18, 0xFD	; 253
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	61 e0       	ldi	r22, 0x01	; 1
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	cb 01       	movw	r24, r22
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <pwm_init+0x80>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	2a 95       	dec	r18
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <pwm_init+0x7c>
    10ca:	8a 2b       	or	r24, r26
    10cc:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    10ce:	3e c0       	rjmp	.+124    	; 0x114c <pwm_init+0x106>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	99 e0       	ldi	r25, 0x09	; 9
    10d4:	88 83       	st	Y, r24
    10d6:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    10d8:	e0 e6       	ldi	r30, 0x60	; 96
    10da:	f6 e0       	ldi	r31, 0x06	; 6
    10dc:	a0 81       	ld	r26, Z
    10de:	9a 01       	movw	r18, r20
    10e0:	21 50       	subi	r18, 0x01	; 1
    10e2:	31 09       	sbc	r19, r1
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	cb 01       	movw	r24, r22
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <pwm_init+0xaa>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	2a 95       	dec	r18
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <pwm_init+0xa6>
    10f4:	8a 2b       	or	r24, r26
    10f6:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    10f8:	29 c0       	rjmp	.+82     	; 0x114c <pwm_init+0x106>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    10fa:	80 e4       	ldi	r24, 0x40	; 64
    10fc:	99 e0       	ldi	r25, 0x09	; 9
    10fe:	88 83       	st	Y, r24
    1100:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    1102:	e0 e6       	ldi	r30, 0x60	; 96
    1104:	f6 e0       	ldi	r31, 0x06	; 6
    1106:	a0 81       	ld	r26, Z
    1108:	9a 01       	movw	r18, r20
    110a:	2d 5f       	subi	r18, 0xFD	; 253
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	61 e0       	ldi	r22, 0x01	; 1
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	cb 01       	movw	r24, r22
    1114:	02 c0       	rjmp	.+4      	; 0x111a <pwm_init+0xd4>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	2a 95       	dec	r18
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <pwm_init+0xd0>
    111e:	8a 2b       	or	r24, r26
    1120:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    1122:	14 c0       	rjmp	.+40     	; 0x114c <pwm_init+0x106>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	9a e0       	ldi	r25, 0x0A	; 10
    1128:	88 83       	st	Y, r24
    112a:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    112c:	e0 e8       	ldi	r30, 0x80	; 128
    112e:	f6 e0       	ldi	r31, 0x06	; 6
    1130:	a0 81       	ld	r26, Z
    1132:	9a 01       	movw	r18, r20
    1134:	21 50       	subi	r18, 0x01	; 1
    1136:	31 09       	sbc	r19, r1
    1138:	61 e0       	ldi	r22, 0x01	; 1
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	cb 01       	movw	r24, r22
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <pwm_init+0xfe>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	2a 95       	dec	r18
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <pwm_init+0xfa>
    1148:	8a 2b       	or	r24, r26
    114a:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    114c:	4a 83       	std	Y+2, r20	; 0x02
    114e:	5b 83       	std	Y+3, r21	; 0x03

	/* Set the correct cc_mask */
	switch (channel) {
    1150:	42 30       	cpi	r20, 0x02	; 2
    1152:	51 05       	cpc	r21, r1
    1154:	89 f0       	breq	.+34     	; 0x1178 <pwm_init+0x132>
    1156:	20 f4       	brcc	.+8      	; 0x1160 <pwm_init+0x11a>
    1158:	41 30       	cpi	r20, 0x01	; 1
    115a:	51 05       	cpc	r21, r1
    115c:	d9 f4       	brne	.+54     	; 0x1194 <pwm_init+0x14e>
    115e:	07 c0       	rjmp	.+14     	; 0x116e <pwm_init+0x128>
    1160:	43 30       	cpi	r20, 0x03	; 3
    1162:	51 05       	cpc	r21, r1
    1164:	71 f0       	breq	.+28     	; 0x1182 <pwm_init+0x13c>
    1166:	44 30       	cpi	r20, 0x04	; 4
    1168:	51 05       	cpc	r21, r1
    116a:	a1 f4       	brne	.+40     	; 0x1194 <pwm_init+0x14e>
    116c:	0f c0       	rjmp	.+30     	; 0x118c <pwm_init+0x146>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    116e:	80 e1       	ldi	r24, 0x10	; 16
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	8c 83       	std	Y+4, r24	; 0x04
    1174:	9d 83       	std	Y+5, r25	; 0x05
		break;
    1176:	0e c0       	rjmp	.+28     	; 0x1194 <pwm_init+0x14e>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    1178:	80 e2       	ldi	r24, 0x20	; 32
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	8c 83       	std	Y+4, r24	; 0x04
    117e:	9d 83       	std	Y+5, r25	; 0x05
		break;
    1180:	09 c0       	rjmp	.+18     	; 0x1194 <pwm_init+0x14e>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    1182:	80 e4       	ldi	r24, 0x40	; 64
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	8c 83       	std	Y+4, r24	; 0x04
    1188:	9d 83       	std	Y+5, r25	; 0x05
		break;
    118a:	04 c0       	rjmp	.+8      	; 0x1194 <pwm_init+0x14e>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    118c:	80 e8       	ldi	r24, 0x80	; 128
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	8c 83       	std	Y+4, r24	; 0x04
    1192:	9d 83       	std	Y+5, r25	; 0x05
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    1194:	88 81       	ld	r24, Y
    1196:	99 81       	ldd	r25, Y+1	; 0x01
    1198:	63 de       	rcall	.-826    	; 0xe60 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    119a:	e8 81       	ld	r30, Y
    119c:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    119e:	81 81       	ldd	r24, Z+1	; 0x01
    11a0:	88 7f       	andi	r24, 0xF8	; 248
    11a2:	83 60       	ori	r24, 0x03	; 3
    11a4:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    11a6:	18 86       	std	Y+8, r1	; 0x08
    11a8:	19 86       	std	Y+9, r1	; 0x09
	config->clk_sel = PWM_CLK_OFF;
    11aa:	1e 82       	std	Y+6, r1	; 0x06
    11ac:	1f 82       	std	Y+7, r1	; 0x07
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    11ae:	e8 81       	ld	r30, Y
    11b0:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    11b2:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    11b4:	80 7f       	andi	r24, 0xF0	; 240
    11b6:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    11b8:	b8 01       	movw	r22, r16
    11ba:	ce 01       	movw	r24, r28
    11bc:	cd de       	rcall	.-614    	; 0xf58 <pwm_set_frequency>
}
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	08 95       	ret

000011c8 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	ec 01       	movw	r28, r24
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
			(uint16_t)(((uint32_t)config->period *
    11ce:	a8 85       	ldd	r26, Y+8	; 0x08
    11d0:	b9 85       	ldd	r27, Y+9	; 0x09
    11d2:	26 2f       	mov	r18, r22
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	fb d3       	rcall	.+2038   	; 0x19ce <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    11d8:	24 e6       	ldi	r18, 0x64	; 100
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	d4 d3       	rcall	.+1960   	; 0x198a <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	9b 81       	ldd	r25, Y+3	; 0x03
    11e6:	e8 81       	ld	r30, Y
    11e8:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    11ea:	e6 fd       	sbrc	r30, 6
    11ec:	19 c0       	rjmp	.+50     	; 0x1220 <pwm_start+0x58>
		switch (channel_index) {
    11ee:	82 30       	cpi	r24, 0x02	; 2
    11f0:	91 05       	cpc	r25, r1
    11f2:	69 f0       	breq	.+26     	; 0x120e <pwm_start+0x46>
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <pwm_start+0x34>
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	f1 f4       	brne	.+60     	; 0x1236 <pwm_start+0x6e>
    11fa:	06 c0       	rjmp	.+12     	; 0x1208 <pwm_start+0x40>
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	91 05       	cpc	r25, r1
    1200:	49 f0       	breq	.+18     	; 0x1214 <pwm_start+0x4c>
    1202:	04 97       	sbiw	r24, 0x04	; 4
    1204:	c1 f4       	brne	.+48     	; 0x1236 <pwm_start+0x6e>
    1206:	09 c0       	rjmp	.+18     	; 0x121a <pwm_start+0x52>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    1208:	20 af       	std	Z+56, r18	; 0x38
    120a:	31 af       	std	Z+57, r19	; 0x39
    120c:	14 c0       	rjmp	.+40     	; 0x1236 <pwm_start+0x6e>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    120e:	22 af       	std	Z+58, r18	; 0x3a
    1210:	33 af       	std	Z+59, r19	; 0x3b
    1212:	11 c0       	rjmp	.+34     	; 0x1236 <pwm_start+0x6e>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    1214:	24 af       	std	Z+60, r18	; 0x3c
    1216:	35 af       	std	Z+61, r19	; 0x3d
    1218:	0e c0       	rjmp	.+28     	; 0x1236 <pwm_start+0x6e>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    121a:	26 af       	std	Z+62, r18	; 0x3e
    121c:	37 af       	std	Z+63, r19	; 0x3f
    121e:	0b c0       	rjmp	.+22     	; 0x1236 <pwm_start+0x6e>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	91 05       	cpc	r25, r1
    1224:	19 f0       	breq	.+6      	; 0x122c <pwm_start+0x64>
    1226:	02 97       	sbiw	r24, 0x02	; 2
    1228:	31 f4       	brne	.+12     	; 0x1236 <pwm_start+0x6e>
    122a:	03 c0       	rjmp	.+6      	; 0x1232 <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    122c:	20 af       	std	Z+56, r18	; 0x38
    122e:	31 af       	std	Z+57, r19	; 0x39
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <pwm_start+0x6e>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    1232:	22 af       	std	Z+58, r18	; 0x3a
    1234:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    1236:	88 85       	ldd	r24, Y+8	; 0x08
    1238:	99 85       	ldd	r25, Y+9	; 0x09
    123a:	e8 81       	ld	r30, Y
    123c:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    123e:	86 a3       	std	Z+38, r24	; 0x26
    1240:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	e8 81       	ld	r30, Y
    1248:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    124a:	e6 fd       	sbrc	r30, 6
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <pwm_start+0x8e>
		((TC0_t *)tc)->CTRLB |= enablemask;
    124e:	91 81       	ldd	r25, Z+1	; 0x01
    1250:	89 2b       	or	r24, r25
    1252:	81 83       	std	Z+1, r24	; 0x01
    1254:	05 c0       	rjmp	.+10     	; 0x1260 <pwm_start+0x98>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    1256:	21 81       	ldd	r18, Z+1	; 0x01
    1258:	80 73       	andi	r24, 0x30	; 48
    125a:	99 27       	eor	r25, r25
    125c:	82 2b       	or	r24, r18
    125e:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    1260:	e8 81       	ld	r30, Y
    1262:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1264:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1266:	80 7f       	andi	r24, 0xF0	; 240
    1268:	9e 81       	ldd	r25, Y+6	; 0x06
    126a:	89 2b       	or	r24, r25
    126c:	80 83       	st	Z, r24
}
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	08 95       	ret

00001274 <tc_init>:
		ioport_set_pin_level(USER_LED1, 0);
	}
}
void tc_init()
{
	tc_enable(&TCC0);
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	98 e0       	ldi	r25, 0x08	; 8
    1278:	f3 dd       	rcall	.-1050   	; 0xe60 <tc_enable>
	tc_set_overflow_interrupt_callback(&TCC0, mainLoop);
    127a:	64 ee       	ldi	r22, 0xE4	; 228
    127c:	7b e0       	ldi	r23, 0x0B	; 11
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	98 e0       	ldi	r25, 0x08	; 8
    1282:	3e de       	rcall	.-900    	; 0xf00 <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1284:	e0 e0       	ldi	r30, 0x00	; 0
    1286:	f8 e0       	ldi	r31, 0x08	; 8
    1288:	81 81       	ldd	r24, Z+1	; 0x01
    128a:	88 7f       	andi	r24, 0xF8	; 248
    128c:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	9d e7       	ldi	r25, 0x7D	; 125
    1292:	86 a3       	std	Z+38, r24	; 0x26
    1294:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    1296:	86 81       	ldd	r24, Z+6	; 0x06
    1298:	8c 7f       	andi	r24, 0xFC	; 252
    129a:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    129c:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    129e:	81 60       	ori	r24, 0x01	; 1
    12a0:	86 83       	std	Z+6, r24	; 0x06
	tc_set_wgm(&TCC0, TC_WG_NORMAL);
	tc_write_period(&TCC0, 32000); // 1kHz main loop
	tc_set_overflow_interrupt_level(&TCC0, TC_INT_LVL_LO);
	cpu_irq_enable();
    12a2:	78 94       	sei
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    12a4:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    12a6:	80 7f       	andi	r24, 0xF0	; 240
    12a8:	81 60       	ori	r24, 0x01	; 1
    12aa:	80 83       	st	Z, r24
    12ac:	08 95       	ret

000012ae <init_motors>:

}

void init_motors()
{
	pwm_init(&pwm_cfg[0], PWM_TCE0, PWM_CH_A, 200); /* PE0 */
    12ae:	28 ec       	ldi	r18, 0xC8	; 200
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	41 e0       	ldi	r20, 0x01	; 1
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	64 e0       	ldi	r22, 0x04	; 4
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	87 e4       	ldi	r24, 0x47	; 71
    12bc:	90 e2       	ldi	r25, 0x20	; 32
    12be:	c3 de       	rcall	.-634    	; 0x1046 <pwm_init>
	pwm_init(&pwm_cfg[1], PWM_TCE0, PWM_CH_B, 200); /* PE1 */
    12c0:	28 ec       	ldi	r18, 0xC8	; 200
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	42 e0       	ldi	r20, 0x02	; 2
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	64 e0       	ldi	r22, 0x04	; 4
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	81 e5       	ldi	r24, 0x51	; 81
    12ce:	90 e2       	ldi	r25, 0x20	; 32
    12d0:	ba ce       	rjmp	.-652    	; 0x1046 <pwm_init>

000012d2 <set_motorB>:
	set_motorB(dir_B,speed_B);
}

void set_motorB(int dir, int speed)
{
	if (dir == -1)
    12d2:	8f 3f       	cpi	r24, 0xFF	; 255
    12d4:	2f ef       	ldi	r18, 0xFF	; 255
    12d6:	92 07       	cpc	r25, r18
    12d8:	49 f4       	brne	.+18     	; 0x12ec <set_motorB+0x1a>
	{
		PORTE.OUT |= PIN2_bm;
    12da:	e0 e8       	ldi	r30, 0x80	; 128
    12dc:	f6 e0       	ldi	r31, 0x06	; 6
    12de:	84 81       	ldd	r24, Z+4	; 0x04
    12e0:	84 60       	ori	r24, 0x04	; 4
    12e2:	84 83       	std	Z+4, r24	; 0x04
		PORTE.OUT &= ~PIN3_bm;
    12e4:	84 81       	ldd	r24, Z+4	; 0x04
    12e6:	87 7f       	andi	r24, 0xF7	; 247
    12e8:	84 83       	std	Z+4, r24	; 0x04
    12ea:	13 c0       	rjmp	.+38     	; 0x1312 <set_motorB+0x40>
	}
	else if(dir == 1)
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	49 f4       	brne	.+18     	; 0x1302 <set_motorB+0x30>
	{
		PORTE.OUT &= ~PIN2_bm;
    12f0:	e0 e8       	ldi	r30, 0x80	; 128
    12f2:	f6 e0       	ldi	r31, 0x06	; 6
    12f4:	84 81       	ldd	r24, Z+4	; 0x04
    12f6:	8b 7f       	andi	r24, 0xFB	; 251
    12f8:	84 83       	std	Z+4, r24	; 0x04
		PORTE.OUT |= PIN3_bm;
    12fa:	84 81       	ldd	r24, Z+4	; 0x04
    12fc:	88 60       	ori	r24, 0x08	; 8
    12fe:	84 83       	std	Z+4, r24	; 0x04
    1300:	08 c0       	rjmp	.+16     	; 0x1312 <set_motorB+0x40>
	}
	else
	{
		PORTE.OUT &= ~PIN2_bm;
    1302:	e0 e8       	ldi	r30, 0x80	; 128
    1304:	f6 e0       	ldi	r31, 0x06	; 6
    1306:	84 81       	ldd	r24, Z+4	; 0x04
    1308:	8b 7f       	andi	r24, 0xFB	; 251
    130a:	84 83       	std	Z+4, r24	; 0x04
		PORTE.OUT &= ~PIN3_bm;
    130c:	84 81       	ldd	r24, Z+4	; 0x04
    130e:	87 7f       	andi	r24, 0xF7	; 247
    1310:	84 83       	std	Z+4, r24	; 0x04
	}
	pwm_start(&pwm_cfg[0], speed);
    1312:	87 e4       	ldi	r24, 0x47	; 71
    1314:	90 e2       	ldi	r25, 0x20	; 32
    1316:	58 cf       	rjmp	.-336    	; 0x11c8 <pwm_start>

00001318 <set_motorA>:
}

void set_motorA(int dir, int speed)
{
	if (dir == -1)
    1318:	8f 3f       	cpi	r24, 0xFF	; 255
    131a:	2f ef       	ldi	r18, 0xFF	; 255
    131c:	92 07       	cpc	r25, r18
    131e:	49 f4       	brne	.+18     	; 0x1332 <set_motorA+0x1a>
	{
		PORTR.OUT |= PIN0_bm;
    1320:	e0 ee       	ldi	r30, 0xE0	; 224
    1322:	f7 e0       	ldi	r31, 0x07	; 7
    1324:	84 81       	ldd	r24, Z+4	; 0x04
    1326:	81 60       	ori	r24, 0x01	; 1
    1328:	84 83       	std	Z+4, r24	; 0x04
		PORTR.OUT &= ~PIN1_bm;
    132a:	84 81       	ldd	r24, Z+4	; 0x04
    132c:	8d 7f       	andi	r24, 0xFD	; 253
    132e:	84 83       	std	Z+4, r24	; 0x04
    1330:	13 c0       	rjmp	.+38     	; 0x1358 <set_motorA+0x40>
	}
	else if(dir == 1)
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	49 f4       	brne	.+18     	; 0x1348 <set_motorA+0x30>
	{
		PORTR.OUT &= ~PIN0_bm;
    1336:	e0 ee       	ldi	r30, 0xE0	; 224
    1338:	f7 e0       	ldi	r31, 0x07	; 7
    133a:	84 81       	ldd	r24, Z+4	; 0x04
    133c:	8e 7f       	andi	r24, 0xFE	; 254
    133e:	84 83       	std	Z+4, r24	; 0x04
		PORTR.OUT |= PIN1_bm;
    1340:	84 81       	ldd	r24, Z+4	; 0x04
    1342:	82 60       	ori	r24, 0x02	; 2
    1344:	84 83       	std	Z+4, r24	; 0x04
    1346:	08 c0       	rjmp	.+16     	; 0x1358 <set_motorA+0x40>
	}
	else
	{
		PORTR.OUT &= ~PIN0_bm;
    1348:	e0 ee       	ldi	r30, 0xE0	; 224
    134a:	f7 e0       	ldi	r31, 0x07	; 7
    134c:	84 81       	ldd	r24, Z+4	; 0x04
    134e:	8e 7f       	andi	r24, 0xFE	; 254
    1350:	84 83       	std	Z+4, r24	; 0x04
		PORTR.OUT &= ~PIN1_bm;
    1352:	84 81       	ldd	r24, Z+4	; 0x04
    1354:	8d 7f       	andi	r24, 0xFD	; 253
    1356:	84 83       	std	Z+4, r24	; 0x04
	}
	pwm_start(&pwm_cfg[1], speed);
    1358:	81 e5       	ldi	r24, 0x51	; 81
    135a:	90 e2       	ldi	r25, 0x20	; 32
    135c:	35 cf       	rjmp	.-406    	; 0x11c8 <pwm_start>

0000135e <set_motors>:
	pwm_init(&pwm_cfg[0], PWM_TCE0, PWM_CH_A, 200); /* PE0 */
	pwm_init(&pwm_cfg[1], PWM_TCE0, PWM_CH_B, 200); /* PE1 */
}

void set_motors(int speed,int turn)
{
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	9c 01       	movw	r18, r24
	int speed_A=speed,speed_B=speed,dir_A=1,dir_B=1;
	if (turn >= 0)
    1368:	77 23       	and	r23, r23
    136a:	0c f4       	brge	.+2      	; 0x136e <set_motors+0x10>
    136c:	45 c0       	rjmp	.+138    	; 0x13f8 <set_motors+0x9a>
	{
		if (turn <= 100)
    136e:	65 36       	cpi	r22, 0x65	; 101
    1370:	71 05       	cpc	r23, r1
    1372:	a4 f4       	brge	.+40     	; 0x139c <set_motors+0x3e>
		{
			speed_A = speed - speed * turn / 100;
    1374:	26 9f       	mul	r18, r22
    1376:	c0 01       	movw	r24, r0
    1378:	27 9f       	mul	r18, r23
    137a:	90 0d       	add	r25, r0
    137c:	36 9f       	mul	r19, r22
    137e:	90 0d       	add	r25, r0
    1380:	11 24       	eor	r1, r1
    1382:	64 e6       	ldi	r22, 0x64	; 100
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	ee d2       	rcall	.+1500   	; 0x1964 <__divmodhi4>
    1388:	c9 01       	movw	r24, r18
    138a:	86 1b       	sub	r24, r22
    138c:	97 0b       	sbc	r25, r23
    138e:	bc 01       	movw	r22, r24
			speed_B = speed;
    1390:	89 01       	movw	r16, r18
			dir_A = 1;
			dir_B = 1;
    1392:	c1 e0       	ldi	r28, 0x01	; 1
    1394:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (turn <= 100)
		{
			speed_A = speed - speed * turn / 100;
			speed_B = speed;
			dir_A = 1;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	7d c0       	rjmp	.+250    	; 0x1496 <set_motors+0x138>
			dir_B = 1;
		}
		else if(100 < turn && turn <= 200)
    139c:	cb 01       	movw	r24, r22
    139e:	85 56       	subi	r24, 0x65	; 101
    13a0:	91 09       	sbc	r25, r1
    13a2:	84 36       	cpi	r24, 0x64	; 100
    13a4:	91 05       	cpc	r25, r1
    13a6:	90 f4       	brcc	.+36     	; 0x13cc <set_motors+0x6e>
		{
			turn -= 100;
    13a8:	64 56       	subi	r22, 0x64	; 100
    13aa:	71 09       	sbc	r23, r1
			speed_A = speed * turn / 100;
    13ac:	26 9f       	mul	r18, r22
    13ae:	c0 01       	movw	r24, r0
    13b0:	27 9f       	mul	r18, r23
    13b2:	90 0d       	add	r25, r0
    13b4:	36 9f       	mul	r19, r22
    13b6:	90 0d       	add	r25, r0
    13b8:	11 24       	eor	r1, r1
    13ba:	64 e6       	ldi	r22, 0x64	; 100
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	d2 d2       	rcall	.+1444   	; 0x1964 <__divmodhi4>
			speed_B = speed;
    13c0:	89 01       	movw	r16, r18
			dir_A = 0;
			dir_B = 1;
    13c2:	c1 e0       	ldi	r28, 0x01	; 1
    13c4:	d0 e0       	ldi	r29, 0x00	; 0
		else if(100 < turn && turn <= 200)
		{
			turn -= 100;
			speed_A = speed * turn / 100;
			speed_B = speed;
			dir_A = 0;
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	65 c0       	rjmp	.+202    	; 0x1496 <set_motors+0x138>
			dir_B = 1;
		}
		else if (200 < turn)
    13cc:	69 3c       	cpi	r22, 0xC9	; 201
    13ce:	71 05       	cpc	r23, r1
    13d0:	0c f4       	brge	.+2      	; 0x13d4 <set_motors+0x76>
    13d2:	5b c0       	rjmp	.+182    	; 0x148a <set_motors+0x12c>
		{
			turn -= 200;
    13d4:	68 5c       	subi	r22, 0xC8	; 200
    13d6:	71 09       	sbc	r23, r1
			speed_A = speed * turn / 100;
    13d8:	26 9f       	mul	r18, r22
    13da:	c0 01       	movw	r24, r0
    13dc:	27 9f       	mul	r18, r23
    13de:	90 0d       	add	r25, r0
    13e0:	36 9f       	mul	r19, r22
    13e2:	90 0d       	add	r25, r0
    13e4:	11 24       	eor	r1, r1
    13e6:	64 e6       	ldi	r22, 0x64	; 100
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	bc d2       	rcall	.+1400   	; 0x1964 <__divmodhi4>
			speed_B = speed;
    13ec:	89 01       	movw	r16, r18
			dir_A = -1;
			dir_B = 1;
    13ee:	c1 e0       	ldi	r28, 0x01	; 1
    13f0:	d0 e0       	ldi	r29, 0x00	; 0
		else if (200 < turn)
		{
			turn -= 200;
			speed_A = speed * turn / 100;
			speed_B = speed;
			dir_A = -1;
    13f2:	8f ef       	ldi	r24, 0xFF	; 255
    13f4:	9f ef       	ldi	r25, 0xFF	; 255
    13f6:	4f c0       	rjmp	.+158    	; 0x1496 <set_motors+0x138>
			dir_B = 1;
		}
	} 
	else
	{
		if (-100 <= turn)
    13f8:	6c 39       	cpi	r22, 0x9C	; 156
    13fa:	9f ef       	ldi	r25, 0xFF	; 255
    13fc:	79 07       	cpc	r23, r25
    13fe:	9c f0       	brlt	.+38     	; 0x1426 <set_motors+0xc8>
		{
			speed_A = speed;
			speed_B = speed + speed * turn / 100;
    1400:	26 9f       	mul	r18, r22
    1402:	c0 01       	movw	r24, r0
    1404:	27 9f       	mul	r18, r23
    1406:	90 0d       	add	r25, r0
    1408:	36 9f       	mul	r19, r22
    140a:	90 0d       	add	r25, r0
    140c:	11 24       	eor	r1, r1
    140e:	64 e6       	ldi	r22, 0x64	; 100
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	a8 d2       	rcall	.+1360   	; 0x1964 <__divmodhi4>
    1414:	8b 01       	movw	r16, r22
    1416:	02 0f       	add	r16, r18
    1418:	13 1f       	adc	r17, r19
	} 
	else
	{
		if (-100 <= turn)
		{
			speed_A = speed;
    141a:	b9 01       	movw	r22, r18
			speed_B = speed + speed * turn / 100;
			dir_A = 1;
			dir_B = 1;
    141c:	c1 e0       	ldi	r28, 0x01	; 1
    141e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (-100 <= turn)
		{
			speed_A = speed;
			speed_B = speed + speed * turn / 100;
			dir_A = 1;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	38 c0       	rjmp	.+112    	; 0x1496 <set_motors+0x138>
			dir_B = 1;
		}
		else if (-200 <= turn)
    1426:	68 33       	cpi	r22, 0x38	; 56
    1428:	8f ef       	ldi	r24, 0xFF	; 255
    142a:	78 07       	cpc	r23, r24
    142c:	bc f0       	brlt	.+46     	; 0x145c <set_motors+0xfe>
		{
			turn += 100;
			speed_A = speed;
			speed_B = - speed * turn / 100;
    142e:	44 27       	eor	r20, r20
    1430:	55 27       	eor	r21, r21
    1432:	42 1b       	sub	r20, r18
    1434:	53 0b       	sbc	r21, r19
			dir_A = 1;
			dir_B = 1;
		}
		else if (-200 <= turn)
		{
			turn += 100;
    1436:	6c 59       	subi	r22, 0x9C	; 156
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
			speed_A = speed;
			speed_B = - speed * turn / 100;
    143a:	46 9f       	mul	r20, r22
    143c:	c0 01       	movw	r24, r0
    143e:	47 9f       	mul	r20, r23
    1440:	90 0d       	add	r25, r0
    1442:	56 9f       	mul	r21, r22
    1444:	90 0d       	add	r25, r0
    1446:	11 24       	eor	r1, r1
    1448:	64 e6       	ldi	r22, 0x64	; 100
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	8b d2       	rcall	.+1302   	; 0x1964 <__divmodhi4>
    144e:	8b 01       	movw	r16, r22
			dir_B = 1;
		}
		else if (-200 <= turn)
		{
			turn += 100;
			speed_A = speed;
    1450:	b9 01       	movw	r22, r18
			speed_B = - speed * turn / 100;
			dir_A = 1;
			dir_B = 0;
    1452:	c0 e0       	ldi	r28, 0x00	; 0
    1454:	d0 e0       	ldi	r29, 0x00	; 0
		else if (-200 <= turn)
		{
			turn += 100;
			speed_A = speed;
			speed_B = - speed * turn / 100;
			dir_A = 1;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	1d c0       	rjmp	.+58     	; 0x1496 <set_motors+0x138>
		}
		else
		{
			turn += 200;
			speed_A = speed;
			speed_B = - speed * turn / 100;
    145c:	44 27       	eor	r20, r20
    145e:	55 27       	eor	r21, r21
    1460:	42 1b       	sub	r20, r18
    1462:	53 0b       	sbc	r21, r19
			dir_A = 1;
			dir_B = 0;
		}
		else
		{
			turn += 200;
    1464:	68 53       	subi	r22, 0x38	; 56
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
			speed_A = speed;
			speed_B = - speed * turn / 100;
    1468:	46 9f       	mul	r20, r22
    146a:	c0 01       	movw	r24, r0
    146c:	47 9f       	mul	r20, r23
    146e:	90 0d       	add	r25, r0
    1470:	56 9f       	mul	r21, r22
    1472:	90 0d       	add	r25, r0
    1474:	11 24       	eor	r1, r1
    1476:	64 e6       	ldi	r22, 0x64	; 100
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	74 d2       	rcall	.+1256   	; 0x1964 <__divmodhi4>
    147c:	8b 01       	movw	r16, r22
			dir_B = 0;
		}
		else
		{
			turn += 200;
			speed_A = speed;
    147e:	b9 01       	movw	r22, r18
			speed_B = - speed * turn / 100;
			dir_A = 1;
			dir_B = -1;
    1480:	cf ef       	ldi	r28, 0xFF	; 255
    1482:	df ef       	ldi	r29, 0xFF	; 255
		else
		{
			turn += 200;
			speed_A = speed;
			speed_B = - speed * turn / 100;
			dir_A = 1;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	06 c0       	rjmp	.+12     	; 0x1496 <set_motors+0x138>
	pwm_init(&pwm_cfg[1], PWM_TCE0, PWM_CH_B, 200); /* PE1 */
}

void set_motors(int speed,int turn)
{
	int speed_A=speed,speed_B=speed,dir_A=1,dir_B=1;
    148a:	89 01       	movw	r16, r18
    148c:	b9 01       	movw	r22, r18
    148e:	c1 e0       	ldi	r28, 0x01	; 1
    1490:	d0 e0       	ldi	r29, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
			speed_B = - speed * turn / 100;
			dir_A = 1;
			dir_B = -1;
		}
	}
	set_motorA(dir_A,speed_A);
    1496:	40 df       	rcall	.-384    	; 0x1318 <set_motorA>
	set_motorB(dir_B,speed_B);
    1498:	b8 01       	movw	r22, r16
    149a:	ce 01       	movw	r24, r28
    149c:	1a df       	rcall	.-460    	; 0x12d2 <set_motorB>
}
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	08 95       	ret

000014a8 <read_adc>:
	}
	pwm_start(&pwm_cfg[1], speed);
}

uint16_t read_adc(int port)
{
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <read_adc+0xa>
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <read_adc+0xc>
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	8c 01       	movw	r16, r24
	struct adc_channel_config adcch_conf;
	uint16_t result;
	
	adcch_read_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    14ba:	ae 01       	movw	r20, r28
    14bc:	4f 5f       	subi	r20, 0xFF	; 255
    14be:	5f 4f       	sbci	r21, 0xFF	; 255
    14c0:	61 e0       	ldi	r22, 0x01	; 1
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	92 e0       	ldi	r25, 0x02	; 2
    14c6:	0e 94 2c 02 	call	0x458	; 0x458 <adcch_read_configuration>
 */
static inline void adcch_set_input(struct adc_channel_config *ch_conf,
		enum adcch_positive_input pos, enum adcch_negative_input neg,
		uint8_t gain)
{
	if (pos >= ADCCH_POS_TEMPSENSE) {
    14ca:	00 31       	cpi	r16, 0x10	; 16
    14cc:	11 05       	cpc	r17, r1
    14ce:	38 f0       	brcs	.+14     	; 0x14de <read_adc+0x36>
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    14d0:	19 82       	std	Y+1, r1	; 0x01
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    14d2:	00 51       	subi	r16, 0x10	; 16
    14d4:	00 0f       	add	r16, r16
    14d6:	00 0f       	add	r16, r16
    14d8:	00 0f       	add	r16, r16
    14da:	0a 83       	std	Y+2, r16	; 0x02
    14dc:	07 c0       	rjmp	.+14     	; 0x14ec <read_adc+0x44>
		 * gain is enabled. To avoid unnecessary current consumption,
		 * do not enable gainstage for unity gain unless user explicitly
		 * specifies it with the ADCCH_FORCE_1X_GAINSTAGE macro.
		 */
		if (gain == 1) {
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	89 83       	std	Y+1, r24	; 0x01
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    14e2:	00 0f       	add	r16, r16
    14e4:	00 0f       	add	r16, r16
    14e6:	00 0f       	add	r16, r16
    14e8:	07 60       	ori	r16, 0x07	; 7
    14ea:	0a 83       	std	Y+2, r16	; 0x02
	
	
	adcch_set_input(&adcch_conf, port, ADCCH_NEG_INTERNAL_GND, 1);
	
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    14ec:	ae 01       	movw	r20, r28
    14ee:	4f 5f       	subi	r20, 0xFF	; 255
    14f0:	5f 4f       	sbci	r21, 0xFF	; 255
    14f2:	61 e0       	ldi	r22, 0x01	; 1
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	92 e0       	ldi	r25, 0x02	; 2
    14f8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <adcch_write_configuration>
	
	adc_enable(&MY_ADC);
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	92 e0       	ldi	r25, 0x02	; 2
    1500:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <adc_enable>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1504:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1506:	f8 94       	cli
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    1508:	e0 e0       	ldi	r30, 0x00	; 0
    150a:	f2 e0       	ldi	r31, 0x02	; 2
    150c:	90 81       	ld	r25, Z
    150e:	94 60       	ori	r25, 0x04	; 4
    1510:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1512:	8f bf       	out	0x3f, r24	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    1514:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    1516:	80 ff       	sbrs	r24, 0
    1518:	fd cf       	rjmp	.-6      	; 0x1514 <read_adc+0x6c>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    151a:	e0 e0       	ldi	r30, 0x00	; 0
    151c:	f2 e0       	ldi	r31, 0x02	; 2
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	86 83       	std	Z+6, r24	; 0x06

	adc_start_conversion(&MY_ADC, MY_ADC_CH);
	adc_wait_for_interrupt_flag(&MY_ADC, MY_ADC_CH);

	result = adc_get_result(&MY_ADC, MY_ADC_CH);
    1522:	24 a1       	ldd	r18, Z+36	; 0x24
    1524:	35 a1       	ldd	r19, Z+37	; 0x25
	
	return result;
}
    1526:	82 2f       	mov	r24, r18
    1528:	93 2f       	mov	r25, r19
    152a:	24 96       	adiw	r28, 0x04	; 4
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	08 95       	ret

0000153a <signalLeds>:
		}
	}
}

void signalLeds()
{
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
	int readings_L = read_adc(0) > DETECTVALUE;
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	b0 df       	rcall	.-160    	; 0x14a8 <read_adc>
    1548:	c1 e0       	ldi	r28, 0x01	; 1
    154a:	d0 e0       	ldi	r29, 0x00	; 0
    154c:	81 31       	cpi	r24, 0x11	; 17
    154e:	9e 40       	sbci	r25, 0x0E	; 14
    1550:	10 f4       	brcc	.+4      	; 0x1556 <signalLeds+0x1c>
    1552:	c0 e0       	ldi	r28, 0x00	; 0
    1554:	d0 e0       	ldi	r29, 0x00	; 0
	int readings_R = read_adc(1) > DETECTVALUE;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a6 df       	rcall	.-180    	; 0x14a8 <read_adc>
    155c:	01 e0       	ldi	r16, 0x01	; 1
    155e:	10 e0       	ldi	r17, 0x00	; 0
    1560:	81 31       	cpi	r24, 0x11	; 17
    1562:	9e 40       	sbci	r25, 0x0E	; 14
    1564:	10 f4       	brcc	.+4      	; 0x156a <signalLeds+0x30>
    1566:	00 e0       	ldi	r16, 0x00	; 0
    1568:	10 e0       	ldi	r17, 0x00	; 0
	if (readings_L == 1 || readings_R == 1)
    156a:	c1 30       	cpi	r28, 0x01	; 1
    156c:	d1 05       	cpc	r29, r1
    156e:	29 f1       	breq	.+74     	; 0x15ba <signalLeds+0x80>
    1570:	01 30       	cpi	r16, 0x01	; 1
    1572:	11 05       	cpc	r17, r1
    1574:	59 f4       	brne	.+22     	; 0x158c <signalLeds+0x52>
    1576:	38 c0       	rjmp	.+112    	; 0x15e8 <signalLeds+0xae>
		{
			readings_L = read_adc(0) > DETECTVALUE;
		}
		if (readings_R == 1)
		{
			readings_R = read_adc(1) > DETECTVALUE;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	95 df       	rcall	.-214    	; 0x14a8 <read_adc>
    157e:	01 e0       	ldi	r16, 0x01	; 1
    1580:	10 e0       	ldi	r17, 0x00	; 0
    1582:	81 31       	cpi	r24, 0x11	; 17
    1584:	9e 40       	sbci	r25, 0x0E	; 14
    1586:	10 f4       	brcc	.+4      	; 0x158c <signalLeds+0x52>
    1588:	00 e0       	ldi	r16, 0x00	; 0
    158a:	10 e0       	ldi	r17, 0x00	; 0
	if (readings_L == 1) readings_L = 1;
	else readings_L = 0;
	if (readings_R == 1) readings_R = 1;
	else readings_R = 0;
	*/
	if (readings_L)
    158c:	cd 2b       	or	r28, r29
    158e:	29 f0       	breq	.+10     	; 0x159a <signalLeds+0x60>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1590:	80 e2       	ldi	r24, 0x20	; 32
    1592:	e0 e6       	ldi	r30, 0x60	; 96
    1594:	f6 e0       	ldi	r31, 0x06	; 6
    1596:	85 83       	std	Z+5, r24	; 0x05
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <signalLeds+0x68>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    159a:	80 e2       	ldi	r24, 0x20	; 32
    159c:	e0 e6       	ldi	r30, 0x60	; 96
    159e:	f6 e0       	ldi	r31, 0x06	; 6
    15a0:	86 83       	std	Z+6, r24	; 0x06
	}
	else
	{
		ioport_set_pin_level(USER_LED0, 0);
	}
	if (readings_R)
    15a2:	01 2b       	or	r16, r17
    15a4:	29 f0       	breq	.+10     	; 0x15b0 <signalLeds+0x76>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    15a6:	80 e1       	ldi	r24, 0x10	; 16
    15a8:	e0 e6       	ldi	r30, 0x60	; 96
    15aa:	f6 e0       	ldi	r31, 0x06	; 6
    15ac:	85 83       	std	Z+5, r24	; 0x05
    15ae:	26 c0       	rjmp	.+76     	; 0x15fc <signalLeds+0xc2>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    15b0:	80 e1       	ldi	r24, 0x10	; 16
    15b2:	e0 e6       	ldi	r30, 0x60	; 96
    15b4:	f6 e0       	ldi	r31, 0x06	; 6
    15b6:	86 83       	std	Z+6, r24	; 0x06
    15b8:	21 c0       	rjmp	.+66     	; 0x15fc <signalLeds+0xc2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15ba:	8f ef       	ldi	r24, 0xFF	; 255
    15bc:	91 ee       	ldi	r25, 0xE1	; 225
    15be:	24 e0       	ldi	r18, 0x04	; 4
    15c0:	81 50       	subi	r24, 0x01	; 1
    15c2:	90 40       	sbci	r25, 0x00	; 0
    15c4:	20 40       	sbci	r18, 0x00	; 0
    15c6:	e1 f7       	brne	.-8      	; 0x15c0 <signalLeds+0x86>
    15c8:	00 c0       	rjmp	.+0      	; 0x15ca <signalLeds+0x90>
    15ca:	00 00       	nop
	if (readings_L == 1 || readings_R == 1)
	{
		_delay_ms(50);
		if (readings_L == 1)
		{
			readings_L = read_adc(0) > DETECTVALUE;
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	6b df       	rcall	.-298    	; 0x14a8 <read_adc>
    15d2:	c1 e0       	ldi	r28, 0x01	; 1
    15d4:	d0 e0       	ldi	r29, 0x00	; 0
    15d6:	81 31       	cpi	r24, 0x11	; 17
    15d8:	9e 40       	sbci	r25, 0x0E	; 14
    15da:	10 f4       	brcc	.+4      	; 0x15e0 <signalLeds+0xa6>
    15dc:	c0 e0       	ldi	r28, 0x00	; 0
    15de:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (readings_R == 1)
    15e0:	01 30       	cpi	r16, 0x01	; 1
    15e2:	11 05       	cpc	r17, r1
    15e4:	99 f6       	brne	.-90     	; 0x158c <signalLeds+0x52>
    15e6:	c8 cf       	rjmp	.-112    	; 0x1578 <signalLeds+0x3e>
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	91 ee       	ldi	r25, 0xE1	; 225
    15ec:	24 e0       	ldi	r18, 0x04	; 4
    15ee:	81 50       	subi	r24, 0x01	; 1
    15f0:	90 40       	sbci	r25, 0x00	; 0
    15f2:	20 40       	sbci	r18, 0x00	; 0
    15f4:	e1 f7       	brne	.-8      	; 0x15ee <signalLeds+0xb4>
    15f6:	00 c0       	rjmp	.+0      	; 0x15f8 <signalLeds+0xbe>
    15f8:	00 00       	nop
    15fa:	be cf       	rjmp	.-132    	; 0x1578 <signalLeds+0x3e>
	}
	else
	{
		ioport_set_pin_level(USER_LED1, 0);
	}
}
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	1f 91       	pop	r17
    1602:	0f 91       	pop	r16
    1604:	08 95       	ret

00001606 <read_distance_sensors>:
	while (1)
	{
	}
}
int read_distance_sensors(void)
{
    1606:	cf 92       	push	r12
    1608:	df 92       	push	r13
    160a:	ef 92       	push	r14
    160c:	ff 92       	push	r15
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
	int readings_L = read_adc(0) > DETECTVALUE;
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	46 df       	rcall	.-372    	; 0x14a8 <read_adc>
    161c:	21 e0       	ldi	r18, 0x01	; 1
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	81 31       	cpi	r24, 0x11	; 17
    1622:	9e 40       	sbci	r25, 0x0E	; 14
    1624:	10 f4       	brcc	.+4      	; 0x162a <read_distance_sensors+0x24>
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	79 01       	movw	r14, r18
	int readings_R = read_adc(1) > DETECTVALUE;
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	3b df       	rcall	.-394    	; 0x14a8 <read_adc>
    1632:	21 e0       	ldi	r18, 0x01	; 1
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 31       	cpi	r24, 0x11	; 17
    1638:	9e 40       	sbci	r25, 0x0E	; 14
    163a:	10 f4       	brcc	.+4      	; 0x1640 <read_distance_sensors+0x3a>
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	69 01       	movw	r12, r18
	if (readings_L == 1 || readings_R == 1)
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	e8 16       	cp	r14, r24
    1646:	f1 04       	cpc	r15, r1
    1648:	09 f4       	brne	.+2      	; 0x164c <read_distance_sensors+0x46>
    164a:	8b c0       	rjmp	.+278    	; 0x1762 <read_distance_sensors+0x15c>
    164c:	21 30       	cpi	r18, 0x01	; 1
    164e:	31 05       	cpc	r19, r1
    1650:	61 f4       	brne	.+24     	; 0x166a <read_distance_sensors+0x64>
    1652:	a1 c0       	rjmp	.+322    	; 0x1796 <read_distance_sensors+0x190>
		{
			readings_L = read_adc(0) > DETECTVALUE;
		}
		if (readings_R == 1)
		{
			readings_R = read_adc(1) > DETECTVALUE;
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	27 df       	rcall	.-434    	; 0x14a8 <read_adc>
    165a:	21 e0       	ldi	r18, 0x01	; 1
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 31       	cpi	r24, 0x11	; 17
    1660:	9e 40       	sbci	r25, 0x0E	; 14
    1662:	10 f4       	brcc	.+4      	; 0x1668 <read_distance_sensors+0x62>
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	69 01       	movw	r12, r18
	while (1)
	{
	}
}
int read_distance_sensors(void)
{
    166a:	ca e0       	ldi	r28, 0x0A	; 10
    166c:	d0 e0       	ldi	r29, 0x00	; 0
		if (readings_R == 1)
		{
			readings_R = read_adc(1) > DETECTVALUE;
		}
	}
	int low_range = 0;
    166e:	00 e0       	ldi	r16, 0x00	; 0
    1670:	10 e0       	ldi	r17, 0x00	; 0
	for (int i = 0; i < 10; i++)
	{
		low_range += read_adc(2) < DETECTVALUE;
    1672:	82 e0       	ldi	r24, 0x02	; 2
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	18 df       	rcall	.-464    	; 0x14a8 <read_adc>
    1678:	21 e0       	ldi	r18, 0x01	; 1
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	80 31       	cpi	r24, 0x10	; 16
    167e:	9e 40       	sbci	r25, 0x0E	; 14
    1680:	10 f0       	brcs	.+4      	; 0x1686 <read_distance_sensors+0x80>
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	02 0f       	add	r16, r18
    1688:	13 1f       	adc	r17, r19
    168a:	21 97       	sbiw	r28, 0x01	; 1
		{
			readings_R = read_adc(1) > DETECTVALUE;
		}
	}
	int low_range = 0;
	for (int i = 0; i < 10; i++)
    168c:	91 f7       	brne	.-28     	; 0x1672 <read_distance_sensors+0x6c>
	else readings_L = 0;
	if (readings_R == 2) readings_R = 1;
	else readings_R = 0;
	*/
	
	if (readings_L)
    168e:	e1 14       	cp	r14, r1
    1690:	f1 04       	cpc	r15, r1
    1692:	29 f0       	breq	.+10     	; 0x169e <read_distance_sensors+0x98>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1694:	80 e2       	ldi	r24, 0x20	; 32
    1696:	e0 e6       	ldi	r30, 0x60	; 96
    1698:	f6 e0       	ldi	r31, 0x06	; 6
    169a:	85 83       	std	Z+5, r24	; 0x05
    169c:	04 c0       	rjmp	.+8      	; 0x16a6 <read_distance_sensors+0xa0>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    169e:	80 e2       	ldi	r24, 0x20	; 32
    16a0:	e0 e6       	ldi	r30, 0x60	; 96
    16a2:	f6 e0       	ldi	r31, 0x06	; 6
    16a4:	86 83       	std	Z+6, r24	; 0x06
	}
	else
	{
		ioport_set_pin_level(USER_LED0, 0);
	}
	if (readings_R)
    16a6:	c1 14       	cp	r12, r1
    16a8:	d1 04       	cpc	r13, r1
    16aa:	29 f0       	breq	.+10     	; 0x16b6 <read_distance_sensors+0xb0>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    16ac:	80 e1       	ldi	r24, 0x10	; 16
    16ae:	e0 e6       	ldi	r30, 0x60	; 96
    16b0:	f6 e0       	ldi	r31, 0x06	; 6
    16b2:	85 83       	std	Z+5, r24	; 0x05
    16b4:	04 c0       	rjmp	.+8      	; 0x16be <read_distance_sensors+0xb8>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    16b6:	80 e1       	ldi	r24, 0x10	; 16
    16b8:	e0 e6       	ldi	r30, 0x60	; 96
    16ba:	f6 e0       	ldi	r31, 0x06	; 6
    16bc:	86 83       	std	Z+6, r24	; 0x06
	}
	else
	{
		ioport_set_pin_level(USER_LED1, 0);
	}
	if (low_range == 1)
    16be:	0a 30       	cpi	r16, 0x0A	; 10
    16c0:	11 05       	cpc	r17, r1
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <read_distance_sensors+0xc0>
    16c4:	72 c0       	rjmp	.+228    	; 0x17aa <read_distance_sensors+0x1a4>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    16c6:	e0 e6       	ldi	r30, 0x60	; 96
    16c8:	f6 e0       	ldi	r31, 0x06	; 6
    16ca:	80 e2       	ldi	r24, 0x20	; 32
    16cc:	85 83       	std	Z+5, r24	; 0x05
    16ce:	80 e1       	ldi	r24, 0x10	; 16
    16d0:	85 83       	std	Z+5, r24	; 0x05
		ioport_set_pin_level(USER_LED1, 1);
	}
	
	if (low_range == 1)
	{
		lastOponentPosition = 0;
    16d2:	10 92 37 20 	sts	0x2037, r1
    16d6:	10 92 38 20 	sts	0x2038, r1
		return 0;
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	3e c0       	rjmp	.+124    	; 0x175c <read_distance_sensors+0x156>
	}
	else if (readings_L == 1 && readings_R == 1)
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	c8 16       	cp	r12, r24
    16e4:	d1 04       	cpc	r13, r1
    16e6:	b9 f4       	brne	.+46     	; 0x1716 <read_distance_sensors+0x110>
	{
		lastOponentPosition = 0;
    16e8:	10 92 37 20 	sts	0x2037, r1
    16ec:	10 92 38 20 	sts	0x2038, r1
		return 0;
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	33 c0       	rjmp	.+102    	; 0x175c <read_distance_sensors+0x156>
	} 
	else if(readings_L == 0 && readings_R == 1)
    16f6:	e1 14       	cp	r14, r1
    16f8:	f1 04       	cpc	r15, r1
    16fa:	c1 f4       	brne	.+48     	; 0x172c <read_distance_sensors+0x126>
    16fc:	91 e0       	ldi	r25, 0x01	; 1
    16fe:	c9 16       	cp	r12, r25
    1700:	d1 04       	cpc	r13, r1
    1702:	b1 f4       	brne	.+44     	; 0x1730 <read_distance_sensors+0x12a>
	{
		lastOponentPosition = 1;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	80 93 37 20 	sts	0x2037, r24
    170c:	90 93 38 20 	sts	0x2038, r25
		return 1;
    1710:	21 e0       	ldi	r18, 0x01	; 1
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	23 c0       	rjmp	.+70     	; 0x175c <read_distance_sensors+0x156>
	}
	else if(readings_L == 1 && readings_R == 0)
    1716:	cd 28       	or	r12, r13
    1718:	b1 f4       	brne	.+44     	; 0x1746 <read_distance_sensors+0x140>
	{
		lastOponentPosition = -1;
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	9f ef       	ldi	r25, 0xFF	; 255
    171e:	80 93 37 20 	sts	0x2037, r24
    1722:	90 93 38 20 	sts	0x2038, r25
		return -1;
    1726:	2f ef       	ldi	r18, 0xFF	; 255
    1728:	3f ef       	ldi	r19, 0xFF	; 255
    172a:	18 c0       	rjmp	.+48     	; 0x175c <read_distance_sensors+0x156>
	}
	else if(readings_L == 0 && readings_R == 0)
    172c:	ef 28       	or	r14, r15
    172e:	71 f4       	brne	.+28     	; 0x174c <read_distance_sensors+0x146>
    1730:	cd 28       	or	r12, r13
    1732:	79 f4       	brne	.+30     	; 0x1752 <read_distance_sensors+0x14c>
	{
		if (lastOponentPosition == -1)
    1734:	80 91 37 20 	lds	r24, 0x2037
    1738:	90 91 38 20 	lds	r25, 0x2038
    173c:	01 96       	adiw	r24, 0x01	; 1
    173e:	61 f4       	brne	.+24     	; 0x1758 <read_distance_sensors+0x152>
		{
			return -2;
    1740:	2e ef       	ldi	r18, 0xFE	; 254
    1742:	3f ef       	ldi	r19, 0xFF	; 255
    1744:	0b c0       	rjmp	.+22     	; 0x175c <read_distance_sensors+0x156>
		else
		{
			return 2;
		}
	}
	return -2;
    1746:	2e ef       	ldi	r18, 0xFE	; 254
    1748:	3f ef       	ldi	r19, 0xFF	; 255
    174a:	08 c0       	rjmp	.+16     	; 0x175c <read_distance_sensors+0x156>
    174c:	2e ef       	ldi	r18, 0xFE	; 254
    174e:	3f ef       	ldi	r19, 0xFF	; 255
    1750:	05 c0       	rjmp	.+10     	; 0x175c <read_distance_sensors+0x156>
    1752:	2e ef       	ldi	r18, 0xFE	; 254
    1754:	3f ef       	ldi	r19, 0xFF	; 255
    1756:	02 c0       	rjmp	.+4      	; 0x175c <read_distance_sensors+0x156>
		{
			return -2;
		} 
		else
		{
			return 2;
    1758:	22 e0       	ldi	r18, 0x02	; 2
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	82 2f       	mov	r24, r18
    175e:	93 2f       	mov	r25, r19
    1760:	2a c0       	rjmp	.+84     	; 0x17b6 <read_distance_sensors+0x1b0>
    1762:	4f ef       	ldi	r20, 0xFF	; 255
    1764:	81 ee       	ldi	r24, 0xE1	; 225
    1766:	94 e0       	ldi	r25, 0x04	; 4
    1768:	41 50       	subi	r20, 0x01	; 1
    176a:	80 40       	sbci	r24, 0x00	; 0
    176c:	90 40       	sbci	r25, 0x00	; 0
    176e:	e1 f7       	brne	.-8      	; 0x1768 <read_distance_sensors+0x162>
    1770:	00 c0       	rjmp	.+0      	; 0x1772 <read_distance_sensors+0x16c>
    1772:	00 00       	nop
	if (readings_L == 1 || readings_R == 1)
	{
		_delay_ms(50);
		if (readings_L == 1)
		{
			readings_L = read_adc(0) > DETECTVALUE;
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	97 de       	rcall	.-722    	; 0x14a8 <read_adc>
    177a:	21 e0       	ldi	r18, 0x01	; 1
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 31       	cpi	r24, 0x11	; 17
    1780:	9e 40       	sbci	r25, 0x0E	; 14
    1782:	10 f4       	brcc	.+4      	; 0x1788 <read_distance_sensors+0x182>
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	79 01       	movw	r14, r18
		}
		if (readings_R == 1)
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	c8 16       	cp	r12, r24
    178e:	d1 04       	cpc	r13, r1
    1790:	09 f0       	breq	.+2      	; 0x1794 <read_distance_sensors+0x18e>
    1792:	6b cf       	rjmp	.-298    	; 0x166a <read_distance_sensors+0x64>
    1794:	5f cf       	rjmp	.-322    	; 0x1654 <read_distance_sensors+0x4e>
    1796:	9f ef       	ldi	r25, 0xFF	; 255
    1798:	21 ee       	ldi	r18, 0xE1	; 225
    179a:	44 e0       	ldi	r20, 0x04	; 4
    179c:	91 50       	subi	r25, 0x01	; 1
    179e:	20 40       	sbci	r18, 0x00	; 0
    17a0:	40 40       	sbci	r20, 0x00	; 0
    17a2:	e1 f7       	brne	.-8      	; 0x179c <read_distance_sensors+0x196>
    17a4:	00 c0       	rjmp	.+0      	; 0x17a6 <read_distance_sensors+0x1a0>
    17a6:	00 00       	nop
    17a8:	55 cf       	rjmp	.-342    	; 0x1654 <read_distance_sensors+0x4e>
	if (low_range == 1)
	{
		lastOponentPosition = 0;
		return 0;
	}
	else if (readings_L == 1 && readings_R == 1)
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	e8 16       	cp	r14, r24
    17ae:	f1 04       	cpc	r15, r1
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <read_distance_sensors+0x1ae>
    17b2:	a1 cf       	rjmp	.-190    	; 0x16f6 <read_distance_sensors+0xf0>
    17b4:	95 cf       	rjmp	.-214    	; 0x16e0 <read_distance_sensors+0xda>
		{
			return 2;
		}
	}
	return -2;
}
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	df 90       	pop	r13
    17c4:	cf 90       	pop	r12
    17c6:	08 95       	ret

000017c8 <mainLoop>:
int Mode = SEEKMODE;

void mainLoop()
{
	
	int oponentPosition = read_distance_sensors();
    17c8:	1e df       	rcall	.-452    	; 0x1606 <read_distance_sensors>
	if (Mode == SEEKMODE)
    17ca:	20 91 35 20 	lds	r18, 0x2035
    17ce:	30 91 36 20 	lds	r19, 0x2036
    17d2:	23 2b       	or	r18, r19
    17d4:	61 f4       	brne	.+24     	; 0x17ee <mainLoop+0x26>
	{
		set_motors(MAXSPEED/1.5,50);
    17d6:	62 e3       	ldi	r22, 0x32	; 50
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	8c e3       	ldi	r24, 0x3C	; 60
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	bf dd       	rcall	.-1154   	; 0x135e <set_motors>
		if (oponentPosition |= -2)
		{
			Mode = CHASEMODE;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	80 93 35 20 	sts	0x2035, r24
    17e8:	90 93 36 20 	sts	0x2036, r25
    17ec:	08 95       	ret
		}
	}
	else
	{
		if (oponentPosition == -2)
    17ee:	8e 3f       	cpi	r24, 0xFE	; 254
    17f0:	2f ef       	ldi	r18, 0xFF	; 255
    17f2:	92 07       	cpc	r25, r18
    17f4:	29 f4       	brne	.+10     	; 0x1800 <mainLoop+0x38>
		{
			set_motors(MAXSPEED/4.5, -300);
    17f6:	64 ed       	ldi	r22, 0xD4	; 212
    17f8:	7e ef       	ldi	r23, 0xFE	; 254
    17fa:	84 e1       	ldi	r24, 0x14	; 20
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	af cd       	rjmp	.-1186   	; 0x135e <set_motors>
		}
		else if (oponentPosition == -1)
    1800:	8f 3f       	cpi	r24, 0xFF	; 255
    1802:	2f ef       	ldi	r18, 0xFF	; 255
    1804:	92 07       	cpc	r25, r18
    1806:	29 f4       	brne	.+10     	; 0x1812 <mainLoop+0x4a>
		{
			set_motors(MAXSPEED/2.5, -200);
    1808:	68 e3       	ldi	r22, 0x38	; 56
    180a:	7f ef       	ldi	r23, 0xFF	; 255
    180c:	84 e2       	ldi	r24, 0x24	; 36
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a6 cd       	rjmp	.-1204   	; 0x135e <set_motors>
		}
		else if (oponentPosition == 0)
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	29 f4       	brne	.+10     	; 0x1820 <mainLoop+0x58>
		{
			set_motors(MAXSPEED, 0);
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	8a e5       	ldi	r24, 0x5A	; 90
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	9f cd       	rjmp	.-1218   	; 0x135e <set_motors>
		}
		else if (oponentPosition == 1)
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	91 05       	cpc	r25, r1
    1824:	29 f4       	brne	.+10     	; 0x1830 <mainLoop+0x68>
		{
			set_motors(MAXSPEED/2.5, 200);
    1826:	68 ec       	ldi	r22, 0xC8	; 200
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	84 e2       	ldi	r24, 0x24	; 36
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	97 cd       	rjmp	.-1234   	; 0x135e <set_motors>
		}
		else if (oponentPosition == 2)
    1830:	02 97       	sbiw	r24, 0x02	; 2
    1832:	29 f4       	brne	.+10     	; 0x183e <mainLoop+0x76>
		{
			set_motors(MAXSPEED/4.5, 300);
    1834:	6c e2       	ldi	r22, 0x2C	; 44
    1836:	71 e0       	ldi	r23, 0x01	; 1
    1838:	84 e1       	ldi	r24, 0x14	; 20
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	90 cd       	rjmp	.-1248   	; 0x135e <set_motors>
    183e:	08 95       	ret

00001840 <main>:
void tc_init(void);
void mainLoop(void);
void signalLeds();

int main (void)
{
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	2b 97       	sbiw	r28, 0x0b	; 11
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	de bf       	out	0x3e, r29	; 62
	board_init();
    184e:	0e 94 1c 01 	call	0x238	; 0x238 <board_init>
	sysclk_init();
    1852:	0e 94 1d 01 	call	0x23a	; 0x23a <sysclk_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    1856:	87 e0       	ldi	r24, 0x07	; 7
    1858:	e0 ea       	ldi	r30, 0xA0	; 160
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	82 83       	std	Z+2, r24	; 0x02
static void adc_init(void)
{
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;

	adc_read_configuration(&MY_ADC, &adc_conf);
    185e:	be 01       	movw	r22, r28
    1860:	6f 5f       	subi	r22, 0xFF	; 255
    1862:	7f 4f       	sbci	r23, 0xFF	; 255
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	92 e0       	ldi	r25, 0x02	; 2
    1868:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <adc_read_configuration>
	adcch_read_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    186c:	ae 01       	movw	r20, r28
    186e:	48 5f       	subi	r20, 0xF8	; 248
    1870:	5f 4f       	sbci	r21, 0xFF	; 255
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	92 e0       	ldi	r25, 0x02	; 2
    1878:	0e 94 2c 02 	call	0x458	; 0x458 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    187e:	9b 81       	ldd	r25, Y+3	; 0x03
    1880:	9f 78       	andi	r25, 0x8F	; 143
	conf->refctrl |= ref;
    1882:	90 61       	ori	r25, 0x10	; 16
    1884:	9b 83       	std	Y+3, r25	; 0x03
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1886:	81 7e       	andi	r24, 0xE1	; 225
    1888:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
    188a:	1c 82       	std	Y+4, r1	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	8d 83       	std	Y+5, r24	; 0x05
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	88 87       	std	Y+8, r24	; 0x08
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    1894:	80 e3       	ldi	r24, 0x30	; 48
    1896:	89 87       	std	Y+9, r24	; 0x09
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 2000000UL);

	adcch_set_input(&adcch_conf, ADCCH_POS_PIN6, ADCCH_NEG_PIN4,1);

	adc_write_configuration(&MY_ADC, &adc_conf);
    1898:	be 01       	movw	r22, r28
    189a:	6f 5f       	subi	r22, 0xFF	; 255
    189c:	7f 4f       	sbci	r23, 0xFF	; 255
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	92 e0       	ldi	r25, 0x02	; 2
    18a2:	0e 94 93 01 	call	0x326	; 0x326 <adc_write_configuration>
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    18a6:	ae 01       	movw	r20, r28
    18a8:	48 5f       	subi	r20, 0xF8	; 248
    18aa:	5f 4f       	sbci	r21, 0xFF	; 255
    18ac:	61 e0       	ldi	r22, 0x01	; 1
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	92 e0       	ldi	r25, 0x02	; 2
    18b2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <adcch_write_configuration>
	
	read_adc(0);
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	f6 dd       	rcall	.-1044   	; 0x14a8 <read_adc>
{
	board_init();
	sysclk_init();
	pmic_init();
	adc_init();
	init_motors();
    18bc:	f8 dc       	rcall	.-1552   	; 0x12ae <init_motors>

	PORTE.DIRSET = 0xFF;
    18be:	8f ef       	ldi	r24, 0xFF	; 255
    18c0:	e0 e8       	ldi	r30, 0x80	; 128
    18c2:	f6 e0       	ldi	r31, 0x06	; 6
    18c4:	81 83       	std	Z+1, r24	; 0x01
	PORTR.DIRSET = 0xFF;
    18c6:	e0 ee       	ldi	r30, 0xE0	; 224
    18c8:	f7 e0       	ldi	r31, 0x07	; 7
    18ca:	81 83       	std	Z+1, r24	; 0x01
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    18cc:	e0 e6       	ldi	r30, 0x60	; 96
    18ce:	f6 e0       	ldi	r31, 0x06	; 6
    18d0:	80 e2       	ldi	r24, 0x20	; 32
    18d2:	81 83       	std	Z+1, r24	; 0x01
    18d4:	80 e1       	ldi	r24, 0x10	; 16
    18d6:	81 83       	std	Z+1, r24	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	82 83       	std	Z+2, r24	; 0x02

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    18dc:	80 85       	ldd	r24, Z+8	; 0x08
    18de:	80 85       	ldd	r24, Z+8	; 0x08
    18e0:	80 85       	ldd	r24, Z+8	; 0x08
	ioport_get_pin_level(MY_BUTTON);
	
	while(1)
	{
		bool  state = ioport_get_pin_level(MY_BUTTON);
		if (state == 0)
    18e2:	80 ff       	sbrs	r24, 0
    18e4:	07 c0       	rjmp	.+14     	; 0x18f4 <main+0xb4>
    18e6:	00 e6       	ldi	r16, 0x60	; 96
    18e8:	16 e0       	ldi	r17, 0x06	; 6
		{
			break;
		}
		signalLeds();
    18ea:	27 de       	rcall	.-946    	; 0x153a <signalLeds>
    18ec:	f8 01       	movw	r30, r16
    18ee:	80 85       	ldd	r24, Z+8	; 0x08
	ioport_get_pin_level(MY_BUTTON);
	
	while(1)
	{
		bool  state = ioport_get_pin_level(MY_BUTTON);
		if (state == 0)
    18f0:	80 fd       	sbrc	r24, 0
    18f2:	fb cf       	rjmp	.-10     	; 0x18ea <main+0xaa>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    18f4:	e0 e6       	ldi	r30, 0x60	; 96
    18f6:	f6 e0       	ldi	r31, 0x06	; 6
    18f8:	80 e2       	ldi	r24, 0x20	; 32
    18fa:	85 83       	std	Z+5, r24	; 0x05
    18fc:	2f ef       	ldi	r18, 0xFF	; 255
    18fe:	37 ea       	ldi	r19, 0xA7	; 167
    1900:	91 e6       	ldi	r25, 0x61	; 97
    1902:	21 50       	subi	r18, 0x01	; 1
    1904:	30 40       	sbci	r19, 0x00	; 0
    1906:	90 40       	sbci	r25, 0x00	; 0
    1908:	e1 f7       	brne	.-8      	; 0x1902 <main+0xc2>
    190a:	00 c0       	rjmp	.+0      	; 0x190c <main+0xcc>
    190c:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    190e:	86 83       	std	Z+6, r24	; 0x06
    1910:	2f ef       	ldi	r18, 0xFF	; 255
    1912:	37 ea       	ldi	r19, 0xA7	; 167
    1914:	91 e6       	ldi	r25, 0x61	; 97
    1916:	21 50       	subi	r18, 0x01	; 1
    1918:	30 40       	sbci	r19, 0x00	; 0
    191a:	90 40       	sbci	r25, 0x00	; 0
    191c:	e1 f7       	brne	.-8      	; 0x1916 <main+0xd6>
    191e:	00 c0       	rjmp	.+0      	; 0x1920 <main+0xe0>
    1920:	00 00       	nop
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1922:	85 83       	std	Z+5, r24	; 0x05
    1924:	2f ef       	ldi	r18, 0xFF	; 255
    1926:	37 ea       	ldi	r19, 0xA7	; 167
    1928:	91 e6       	ldi	r25, 0x61	; 97
    192a:	21 50       	subi	r18, 0x01	; 1
    192c:	30 40       	sbci	r19, 0x00	; 0
    192e:	90 40       	sbci	r25, 0x00	; 0
    1930:	e1 f7       	brne	.-8      	; 0x192a <main+0xea>
    1932:	00 c0       	rjmp	.+0      	; 0x1934 <main+0xf4>
    1934:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1936:	86 83       	std	Z+6, r24	; 0x06
    1938:	2f ef       	ldi	r18, 0xFF	; 255
    193a:	37 ea       	ldi	r19, 0xA7	; 167
    193c:	91 e6       	ldi	r25, 0x61	; 97
    193e:	21 50       	subi	r18, 0x01	; 1
    1940:	30 40       	sbci	r19, 0x00	; 0
    1942:	90 40       	sbci	r25, 0x00	; 0
    1944:	e1 f7       	brne	.-8      	; 0x193e <main+0xfe>
    1946:	00 c0       	rjmp	.+0      	; 0x1948 <main+0x108>
    1948:	00 00       	nop
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    194a:	85 83       	std	Z+5, r24	; 0x05
    194c:	2f ef       	ldi	r18, 0xFF	; 255
    194e:	37 ea       	ldi	r19, 0xA7	; 167
    1950:	91 e6       	ldi	r25, 0x61	; 97
    1952:	21 50       	subi	r18, 0x01	; 1
    1954:	30 40       	sbci	r19, 0x00	; 0
    1956:	90 40       	sbci	r25, 0x00	; 0
    1958:	e1 f7       	brne	.-8      	; 0x1952 <main+0x112>
    195a:	00 c0       	rjmp	.+0      	; 0x195c <main+0x11c>
    195c:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    195e:	86 83       	std	Z+6, r24	; 0x06
	_delay_ms(1000);
	ioport_set_pin_level(USER_LED0, 1);
	_delay_ms(1000);
	ioport_set_pin_level(USER_LED0, 0);
	
	tc_init();
    1960:	89 dc       	rcall	.-1774   	; 0x1274 <tc_init>
    1962:	ff cf       	rjmp	.-2      	; 0x1962 <main+0x122>

00001964 <__divmodhi4>:
    1964:	97 fb       	bst	r25, 7
    1966:	07 2e       	mov	r0, r23
    1968:	16 f4       	brtc	.+4      	; 0x196e <__divmodhi4+0xa>
    196a:	00 94       	com	r0
    196c:	06 d0       	rcall	.+12     	; 0x197a <__divmodhi4_neg1>
    196e:	77 fd       	sbrc	r23, 7
    1970:	08 d0       	rcall	.+16     	; 0x1982 <__divmodhi4_neg2>
    1972:	39 d0       	rcall	.+114    	; 0x19e6 <__udivmodhi4>
    1974:	07 fc       	sbrc	r0, 7
    1976:	05 d0       	rcall	.+10     	; 0x1982 <__divmodhi4_neg2>
    1978:	3e f4       	brtc	.+14     	; 0x1988 <__divmodhi4_exit>

0000197a <__divmodhi4_neg1>:
    197a:	90 95       	com	r25
    197c:	81 95       	neg	r24
    197e:	9f 4f       	sbci	r25, 0xFF	; 255
    1980:	08 95       	ret

00001982 <__divmodhi4_neg2>:
    1982:	70 95       	com	r23
    1984:	61 95       	neg	r22
    1986:	7f 4f       	sbci	r23, 0xFF	; 255

00001988 <__divmodhi4_exit>:
    1988:	08 95       	ret

0000198a <__udivmodsi4>:
    198a:	a1 e2       	ldi	r26, 0x21	; 33
    198c:	1a 2e       	mov	r1, r26
    198e:	aa 1b       	sub	r26, r26
    1990:	bb 1b       	sub	r27, r27
    1992:	fd 01       	movw	r30, r26
    1994:	0d c0       	rjmp	.+26     	; 0x19b0 <__udivmodsi4_ep>

00001996 <__udivmodsi4_loop>:
    1996:	aa 1f       	adc	r26, r26
    1998:	bb 1f       	adc	r27, r27
    199a:	ee 1f       	adc	r30, r30
    199c:	ff 1f       	adc	r31, r31
    199e:	a2 17       	cp	r26, r18
    19a0:	b3 07       	cpc	r27, r19
    19a2:	e4 07       	cpc	r30, r20
    19a4:	f5 07       	cpc	r31, r21
    19a6:	20 f0       	brcs	.+8      	; 0x19b0 <__udivmodsi4_ep>
    19a8:	a2 1b       	sub	r26, r18
    19aa:	b3 0b       	sbc	r27, r19
    19ac:	e4 0b       	sbc	r30, r20
    19ae:	f5 0b       	sbc	r31, r21

000019b0 <__udivmodsi4_ep>:
    19b0:	66 1f       	adc	r22, r22
    19b2:	77 1f       	adc	r23, r23
    19b4:	88 1f       	adc	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	1a 94       	dec	r1
    19ba:	69 f7       	brne	.-38     	; 0x1996 <__udivmodsi4_loop>
    19bc:	60 95       	com	r22
    19be:	70 95       	com	r23
    19c0:	80 95       	com	r24
    19c2:	90 95       	com	r25
    19c4:	9b 01       	movw	r18, r22
    19c6:	ac 01       	movw	r20, r24
    19c8:	bd 01       	movw	r22, r26
    19ca:	cf 01       	movw	r24, r30
    19cc:	08 95       	ret

000019ce <__umulhisi3>:
    19ce:	a2 9f       	mul	r26, r18
    19d0:	b0 01       	movw	r22, r0
    19d2:	b3 9f       	mul	r27, r19
    19d4:	c0 01       	movw	r24, r0
    19d6:	a3 9f       	mul	r26, r19
    19d8:	01 d0       	rcall	.+2      	; 0x19dc <__umulhisi3+0xe>
    19da:	b2 9f       	mul	r27, r18
    19dc:	70 0d       	add	r23, r0
    19de:	81 1d       	adc	r24, r1
    19e0:	11 24       	eor	r1, r1
    19e2:	91 1d       	adc	r25, r1
    19e4:	08 95       	ret

000019e6 <__udivmodhi4>:
    19e6:	aa 1b       	sub	r26, r26
    19e8:	bb 1b       	sub	r27, r27
    19ea:	51 e1       	ldi	r21, 0x11	; 17
    19ec:	07 c0       	rjmp	.+14     	; 0x19fc <__udivmodhi4_ep>

000019ee <__udivmodhi4_loop>:
    19ee:	aa 1f       	adc	r26, r26
    19f0:	bb 1f       	adc	r27, r27
    19f2:	a6 17       	cp	r26, r22
    19f4:	b7 07       	cpc	r27, r23
    19f6:	10 f0       	brcs	.+4      	; 0x19fc <__udivmodhi4_ep>
    19f8:	a6 1b       	sub	r26, r22
    19fa:	b7 0b       	sbc	r27, r23

000019fc <__udivmodhi4_ep>:
    19fc:	88 1f       	adc	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	5a 95       	dec	r21
    1a02:	a9 f7       	brne	.-22     	; 0x19ee <__udivmodhi4_loop>
    1a04:	80 95       	com	r24
    1a06:	90 95       	com	r25
    1a08:	bc 01       	movw	r22, r24
    1a0a:	cd 01       	movw	r24, r26
    1a0c:	08 95       	ret

00001a0e <_exit>:
    1a0e:	f8 94       	cli

00001a10 <__stop_program>:
    1a10:	ff cf       	rjmp	.-2      	; 0x1a10 <__stop_program>
