
Tracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002802  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  00002802  00002896  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009b  0080200e  0080200e  000028a4  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000028a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  00002ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000030ff  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000005e0  00000000  00000000  00003130  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000dc89  00000000  00000000  00003710  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e60  00000000  00000000  00011399  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007cda  00000000  00000000  000141f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000151c  00000000  00000000  0001bed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0002657a  00000000  00000000  0001d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000660c  00000000  00000000  0004396a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000420  00000000  00000000  00049f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00009e38  00000000  00000000  0004a398  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	18 c1       	rjmp	.+560    	; 0x236 <__bad_interrupt>
       6:	00 00       	nop
       8:	16 c1       	rjmp	.+556    	; 0x236 <__bad_interrupt>
       a:	00 00       	nop
       c:	14 c1       	rjmp	.+552    	; 0x236 <__bad_interrupt>
       e:	00 00       	nop
      10:	12 c1       	rjmp	.+548    	; 0x236 <__bad_interrupt>
      12:	00 00       	nop
      14:	10 c1       	rjmp	.+544    	; 0x236 <__bad_interrupt>
      16:	00 00       	nop
      18:	0e c1       	rjmp	.+540    	; 0x236 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c c1       	rjmp	.+536    	; 0x236 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0a c1       	rjmp	.+532    	; 0x236 <__bad_interrupt>
      22:	00 00       	nop
      24:	08 c1       	rjmp	.+528    	; 0x236 <__bad_interrupt>
      26:	00 00       	nop
      28:	06 c1       	rjmp	.+524    	; 0x236 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	04 c1       	rjmp	.+520    	; 0x236 <__bad_interrupt>
      2e:	00 00       	nop
      30:	02 c1       	rjmp	.+516    	; 0x236 <__bad_interrupt>
      32:	00 00       	nop
      34:	00 c1       	rjmp	.+512    	; 0x236 <__bad_interrupt>
      36:	00 00       	nop
      38:	82 c7       	rjmp	.+3844   	; 0xf3e <__vector_14>
      3a:	00 00       	nop
      3c:	a9 c7       	rjmp	.+3922   	; 0xf90 <__vector_15>
      3e:	00 00       	nop
      40:	d0 c7       	rjmp	.+4000   	; 0xfe2 <__vector_16>
      42:	00 00       	nop
      44:	f7 c7       	rjmp	.+4078   	; 0x1034 <__vector_17>
      46:	00 00       	nop
      48:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__vector_18>
      4c:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__vector_19>
      50:	0c 94 95 08 	jmp	0x112a	; 0x112a <__vector_20>
      54:	0c 94 be 08 	jmp	0x117c	; 0x117c <__vector_21>
      58:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__vector_22>
      5c:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__vector_23>
      60:	ea c0       	rjmp	.+468    	; 0x236 <__bad_interrupt>
      62:	00 00       	nop
      64:	e8 c0       	rjmp	.+464    	; 0x236 <__bad_interrupt>
      66:	00 00       	nop
      68:	e6 c0       	rjmp	.+460    	; 0x236 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e4 c0       	rjmp	.+456    	; 0x236 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e2 c0       	rjmp	.+452    	; 0x236 <__bad_interrupt>
      72:	00 00       	nop
      74:	e0 c0       	rjmp	.+448    	; 0x236 <__bad_interrupt>
      76:	00 00       	nop
      78:	de c0       	rjmp	.+444    	; 0x236 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	dc c0       	rjmp	.+440    	; 0x236 <__bad_interrupt>
      7e:	00 00       	nop
      80:	da c0       	rjmp	.+436    	; 0x236 <__bad_interrupt>
      82:	00 00       	nop
      84:	d8 c0       	rjmp	.+432    	; 0x236 <__bad_interrupt>
      86:	00 00       	nop
      88:	d6 c0       	rjmp	.+428    	; 0x236 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d4 c0       	rjmp	.+424    	; 0x236 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d2 c0       	rjmp	.+420    	; 0x236 <__bad_interrupt>
      92:	00 00       	nop
      94:	d0 c0       	rjmp	.+416    	; 0x236 <__bad_interrupt>
      96:	00 00       	nop
      98:	ce c0       	rjmp	.+412    	; 0x236 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cc c0       	rjmp	.+408    	; 0x236 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ca c0       	rjmp	.+404    	; 0x236 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c8 c0       	rjmp	.+400    	; 0x236 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c6 c0       	rjmp	.+396    	; 0x236 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c4 c0       	rjmp	.+392    	; 0x236 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c2 c0       	rjmp	.+388    	; 0x236 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c0 c0       	rjmp	.+384    	; 0x236 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	be c0       	rjmp	.+380    	; 0x236 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__vector_47>
      c0:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__vector_48>
      c4:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__vector_49>
      c8:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__vector_50>
      cc:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__vector_51>
      d0:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__vector_52>
      d4:	b0 c0       	rjmp	.+352    	; 0x236 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ae c0       	rjmp	.+348    	; 0x236 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ac c0       	rjmp	.+344    	; 0x236 <__bad_interrupt>
      de:	00 00       	nop
      e0:	aa c0       	rjmp	.+340    	; 0x236 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a8 c0       	rjmp	.+336    	; 0x236 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a6 c0       	rjmp	.+332    	; 0x236 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a4 c0       	rjmp	.+328    	; 0x236 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a2 c0       	rjmp	.+324    	; 0x236 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a0 c0       	rjmp	.+320    	; 0x236 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9e c0       	rjmp	.+316    	; 0x236 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9c c0       	rjmp	.+312    	; 0x236 <__bad_interrupt>
      fe:	00 00       	nop
     100:	9a c0       	rjmp	.+308    	; 0x236 <__bad_interrupt>
     102:	00 00       	nop
     104:	98 c0       	rjmp	.+304    	; 0x236 <__bad_interrupt>
     106:	00 00       	nop
     108:	96 c0       	rjmp	.+300    	; 0x236 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	94 c0       	rjmp	.+296    	; 0x236 <__bad_interrupt>
     10e:	00 00       	nop
     110:	92 c0       	rjmp	.+292    	; 0x236 <__bad_interrupt>
     112:	00 00       	nop
     114:	90 c0       	rjmp	.+288    	; 0x236 <__bad_interrupt>
     116:	00 00       	nop
     118:	8e c0       	rjmp	.+284    	; 0x236 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8c c0       	rjmp	.+280    	; 0x236 <__bad_interrupt>
     11e:	00 00       	nop
     120:	8a c0       	rjmp	.+276    	; 0x236 <__bad_interrupt>
     122:	00 00       	nop
     124:	88 c0       	rjmp	.+272    	; 0x236 <__bad_interrupt>
     126:	00 00       	nop
     128:	86 c0       	rjmp	.+268    	; 0x236 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	84 c0       	rjmp	.+264    	; 0x236 <__bad_interrupt>
     12e:	00 00       	nop
     130:	82 c0       	rjmp	.+260    	; 0x236 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__vector_77>
     138:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__vector_78>
     13c:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__vector_79>
     140:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__vector_80>
     144:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__vector_81>
     148:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__vector_82>
     14c:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__vector_83>
     150:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__vector_84>
     154:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__vector_85>
     158:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__vector_86>
     15c:	6c c0       	rjmp	.+216    	; 0x236 <__bad_interrupt>
     15e:	00 00       	nop
     160:	6a c0       	rjmp	.+212    	; 0x236 <__bad_interrupt>
     162:	00 00       	nop
     164:	68 c0       	rjmp	.+208    	; 0x236 <__bad_interrupt>
     166:	00 00       	nop
     168:	66 c0       	rjmp	.+204    	; 0x236 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	64 c0       	rjmp	.+200    	; 0x236 <__bad_interrupt>
     16e:	00 00       	nop
     170:	62 c0       	rjmp	.+196    	; 0x236 <__bad_interrupt>
     172:	00 00       	nop
     174:	60 c0       	rjmp	.+192    	; 0x236 <__bad_interrupt>
     176:	00 00       	nop
     178:	5e c0       	rjmp	.+188    	; 0x236 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5c c0       	rjmp	.+184    	; 0x236 <__bad_interrupt>
     17e:	00 00       	nop
     180:	5a c0       	rjmp	.+180    	; 0x236 <__bad_interrupt>
     182:	00 00       	nop
     184:	58 c0       	rjmp	.+176    	; 0x236 <__bad_interrupt>
     186:	00 00       	nop
     188:	56 c0       	rjmp	.+172    	; 0x236 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	54 c0       	rjmp	.+168    	; 0x236 <__bad_interrupt>
     18e:	00 00       	nop
     190:	52 c0       	rjmp	.+164    	; 0x236 <__bad_interrupt>
     192:	00 00       	nop
     194:	50 c0       	rjmp	.+160    	; 0x236 <__bad_interrupt>
     196:	00 00       	nop
     198:	4e c0       	rjmp	.+156    	; 0x236 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4c c0       	rjmp	.+152    	; 0x236 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4a c0       	rjmp	.+148    	; 0x236 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	48 c0       	rjmp	.+144    	; 0x236 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	46 c0       	rjmp	.+140    	; 0x236 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	44 c0       	rjmp	.+136    	; 0x236 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	42 c0       	rjmp	.+132    	; 0x236 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	40 c0       	rjmp	.+128    	; 0x236 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	3e c0       	rjmp	.+124    	; 0x236 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3c c0       	rjmp	.+120    	; 0x236 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3a c0       	rjmp	.+116    	; 0x236 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	38 c0       	rjmp	.+112    	; 0x236 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	36 c0       	rjmp	.+108    	; 0x236 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	34 c0       	rjmp	.+104    	; 0x236 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	32 c0       	rjmp	.+100    	; 0x236 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	30 c0       	rjmp	.+96     	; 0x236 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2e c0       	rjmp	.+92     	; 0x236 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2c c0       	rjmp	.+88     	; 0x236 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2a c0       	rjmp	.+84     	; 0x236 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	28 c0       	rjmp	.+80     	; 0x236 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	26 c0       	rjmp	.+76     	; 0x236 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	24 c0       	rjmp	.+72     	; 0x236 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	22 c0       	rjmp	.+68     	; 0x236 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	20 c0       	rjmp	.+64     	; 0x236 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	1e c0       	rjmp	.+60     	; 0x236 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e2       	ldi	r29, 0x2F	; 47
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e2 e0       	ldi	r30, 0x02	; 2
     210:	f8 e2       	ldi	r31, 0x28	; 40
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	ae 30       	cpi	r26, 0x0E	; 14
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	20 e2       	ldi	r18, 0x20	; 32
     220:	ae e0       	ldi	r26, 0x0E	; 14
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a9 3a       	cpi	r26, 0xA9	; 169
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 3a 10 	call	0x2074	; 0x2074 <main>
     232:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <_exit>

00000236 <__bad_interrupt>:
     236:	e4 ce       	rjmp	.-568    	; 0x0 <__vectors>

00000238 <_fpadd_parts>:
     238:	a4 e0       	ldi	r26, 0x04	; 4
     23a:	b0 e0       	ldi	r27, 0x00	; 0
     23c:	e2 e2       	ldi	r30, 0x22	; 34
     23e:	f1 e0       	ldi	r31, 0x01	; 1
     240:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__prologue_saves__+0x4>
     244:	7c 01       	movw	r14, r24
     246:	6a 01       	movw	r12, r20
     248:	fc 01       	movw	r30, r24
     24a:	80 81       	ld	r24, Z
     24c:	82 30       	cpi	r24, 0x02	; 2
     24e:	08 f4       	brcc	.+2      	; 0x252 <_fpadd_parts+0x1a>
     250:	4a c1       	rjmp	.+660    	; 0x4e6 <_fpadd_parts+0x2ae>
     252:	fb 01       	movw	r30, r22
     254:	90 81       	ld	r25, Z
     256:	92 30       	cpi	r25, 0x02	; 2
     258:	08 f4       	brcc	.+2      	; 0x25c <_fpadd_parts+0x24>
     25a:	42 c1       	rjmp	.+644    	; 0x4e0 <_fpadd_parts+0x2a8>
     25c:	84 30       	cpi	r24, 0x04	; 4
     25e:	79 f4       	brne	.+30     	; 0x27e <_fpadd_parts+0x46>
     260:	94 30       	cpi	r25, 0x04	; 4
     262:	09 f0       	breq	.+2      	; 0x266 <_fpadd_parts+0x2e>
     264:	40 c1       	rjmp	.+640    	; 0x4e6 <_fpadd_parts+0x2ae>
     266:	f7 01       	movw	r30, r14
     268:	91 81       	ldd	r25, Z+1	; 0x01
     26a:	fb 01       	movw	r30, r22
     26c:	81 81       	ldd	r24, Z+1	; 0x01
     26e:	98 17       	cp	r25, r24
     270:	09 f4       	brne	.+2      	; 0x274 <_fpadd_parts+0x3c>
     272:	39 c1       	rjmp	.+626    	; 0x4e6 <_fpadd_parts+0x2ae>
     274:	a6 e0       	ldi	r26, 0x06	; 6
     276:	ea 2e       	mov	r14, r26
     278:	a0 e2       	ldi	r26, 0x20	; 32
     27a:	fa 2e       	mov	r15, r26
     27c:	34 c1       	rjmp	.+616    	; 0x4e6 <_fpadd_parts+0x2ae>
     27e:	94 30       	cpi	r25, 0x04	; 4
     280:	09 f4       	brne	.+2      	; 0x284 <_fpadd_parts+0x4c>
     282:	2e c1       	rjmp	.+604    	; 0x4e0 <_fpadd_parts+0x2a8>
     284:	92 30       	cpi	r25, 0x02	; 2
     286:	91 f4       	brne	.+36     	; 0x2ac <_fpadd_parts+0x74>
     288:	82 30       	cpi	r24, 0x02	; 2
     28a:	09 f0       	breq	.+2      	; 0x28e <_fpadd_parts+0x56>
     28c:	2c c1       	rjmp	.+600    	; 0x4e6 <_fpadd_parts+0x2ae>
     28e:	88 e0       	ldi	r24, 0x08	; 8
     290:	f7 01       	movw	r30, r14
     292:	da 01       	movw	r26, r20
     294:	01 90       	ld	r0, Z+
     296:	0d 92       	st	X+, r0
     298:	8a 95       	dec	r24
     29a:	e1 f7       	brne	.-8      	; 0x294 <_fpadd_parts+0x5c>
     29c:	fb 01       	movw	r30, r22
     29e:	81 81       	ldd	r24, Z+1	; 0x01
     2a0:	f7 01       	movw	r30, r14
     2a2:	91 81       	ldd	r25, Z+1	; 0x01
     2a4:	89 23       	and	r24, r25
     2a6:	fa 01       	movw	r30, r20
     2a8:	81 83       	std	Z+1, r24	; 0x01
     2aa:	1c c1       	rjmp	.+568    	; 0x4e4 <_fpadd_parts+0x2ac>
     2ac:	82 30       	cpi	r24, 0x02	; 2
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <_fpadd_parts+0x7a>
     2b0:	17 c1       	rjmp	.+558    	; 0x4e0 <_fpadd_parts+0x2a8>
     2b2:	f7 01       	movw	r30, r14
     2b4:	82 81       	ldd	r24, Z+2	; 0x02
     2b6:	93 81       	ldd	r25, Z+3	; 0x03
     2b8:	fb 01       	movw	r30, r22
     2ba:	a2 81       	ldd	r26, Z+2	; 0x02
     2bc:	b3 81       	ldd	r27, Z+3	; 0x03
     2be:	f7 01       	movw	r30, r14
     2c0:	04 81       	ldd	r16, Z+4	; 0x04
     2c2:	15 81       	ldd	r17, Z+5	; 0x05
     2c4:	26 81       	ldd	r18, Z+6	; 0x06
     2c6:	37 81       	ldd	r19, Z+7	; 0x07
     2c8:	fb 01       	movw	r30, r22
     2ca:	84 80       	ldd	r8, Z+4	; 0x04
     2cc:	95 80       	ldd	r9, Z+5	; 0x05
     2ce:	a6 80       	ldd	r10, Z+6	; 0x06
     2d0:	b7 80       	ldd	r11, Z+7	; 0x07
     2d2:	fc 01       	movw	r30, r24
     2d4:	ea 1b       	sub	r30, r26
     2d6:	fb 0b       	sbc	r31, r27
     2d8:	af 01       	movw	r20, r30
     2da:	f7 ff       	sbrs	r31, 7
     2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <_fpadd_parts+0xae>
     2de:	44 27       	eor	r20, r20
     2e0:	55 27       	eor	r21, r21
     2e2:	4e 1b       	sub	r20, r30
     2e4:	5f 0b       	sbc	r21, r31
     2e6:	40 32       	cpi	r20, 0x20	; 32
     2e8:	51 05       	cpc	r21, r1
     2ea:	0c f0       	brlt	.+2      	; 0x2ee <_fpadd_parts+0xb6>
     2ec:	74 c0       	rjmp	.+232    	; 0x3d6 <_fpadd_parts+0x19e>
     2ee:	1e 16       	cp	r1, r30
     2f0:	1f 06       	cpc	r1, r31
     2f2:	b4 f5       	brge	.+108    	; 0x360 <_fpadd_parts+0x128>
     2f4:	24 01       	movw	r4, r8
     2f6:	35 01       	movw	r6, r10
     2f8:	04 2e       	mov	r0, r20
     2fa:	04 c0       	rjmp	.+8      	; 0x304 <_fpadd_parts+0xcc>
     2fc:	76 94       	lsr	r7
     2fe:	67 94       	ror	r6
     300:	57 94       	ror	r5
     302:	47 94       	ror	r4
     304:	0a 94       	dec	r0
     306:	d2 f7       	brpl	.-12     	; 0x2fc <_fpadd_parts+0xc4>
     308:	49 82       	std	Y+1, r4	; 0x01
     30a:	5a 82       	std	Y+2, r5	; 0x02
     30c:	6b 82       	std	Y+3, r6	; 0x03
     30e:	7c 82       	std	Y+4, r7	; 0x04
     310:	41 2c       	mov	r4, r1
     312:	51 2c       	mov	r5, r1
     314:	32 01       	movw	r6, r4
     316:	43 94       	inc	r4
     318:	04 c0       	rjmp	.+8      	; 0x322 <_fpadd_parts+0xea>
     31a:	44 0c       	add	r4, r4
     31c:	55 1c       	adc	r5, r5
     31e:	66 1c       	adc	r6, r6
     320:	77 1c       	adc	r7, r7
     322:	4a 95       	dec	r20
     324:	d2 f7       	brpl	.-12     	; 0x31a <_fpadd_parts+0xe2>
     326:	41 e0       	ldi	r20, 0x01	; 1
     328:	44 1a       	sub	r4, r20
     32a:	51 08       	sbc	r5, r1
     32c:	61 08       	sbc	r6, r1
     32e:	71 08       	sbc	r7, r1
     330:	48 20       	and	r4, r8
     332:	59 20       	and	r5, r9
     334:	6a 20       	and	r6, r10
     336:	7b 20       	and	r7, r11
     338:	81 2c       	mov	r8, r1
     33a:	91 2c       	mov	r9, r1
     33c:	54 01       	movw	r10, r8
     33e:	83 94       	inc	r8
     340:	45 28       	or	r4, r5
     342:	46 28       	or	r4, r6
     344:	47 28       	or	r4, r7
     346:	19 f4       	brne	.+6      	; 0x34e <_fpadd_parts+0x116>
     348:	81 2c       	mov	r8, r1
     34a:	91 2c       	mov	r9, r1
     34c:	54 01       	movw	r10, r8
     34e:	49 80       	ldd	r4, Y+1	; 0x01
     350:	5a 80       	ldd	r5, Y+2	; 0x02
     352:	6b 80       	ldd	r6, Y+3	; 0x03
     354:	7c 80       	ldd	r7, Y+4	; 0x04
     356:	84 28       	or	r8, r4
     358:	95 28       	or	r9, r5
     35a:	a6 28       	or	r10, r6
     35c:	b7 28       	or	r11, r7
     35e:	46 c0       	rjmp	.+140    	; 0x3ec <_fpadd_parts+0x1b4>
     360:	ef 2b       	or	r30, r31
     362:	09 f4       	brne	.+2      	; 0x366 <_fpadd_parts+0x12e>
     364:	43 c0       	rjmp	.+134    	; 0x3ec <_fpadd_parts+0x1b4>
     366:	84 0f       	add	r24, r20
     368:	95 1f       	adc	r25, r21
     36a:	28 01       	movw	r4, r16
     36c:	39 01       	movw	r6, r18
     36e:	04 2e       	mov	r0, r20
     370:	04 c0       	rjmp	.+8      	; 0x37a <_fpadd_parts+0x142>
     372:	76 94       	lsr	r7
     374:	67 94       	ror	r6
     376:	57 94       	ror	r5
     378:	47 94       	ror	r4
     37a:	0a 94       	dec	r0
     37c:	d2 f7       	brpl	.-12     	; 0x372 <_fpadd_parts+0x13a>
     37e:	49 82       	std	Y+1, r4	; 0x01
     380:	5a 82       	std	Y+2, r5	; 0x02
     382:	6b 82       	std	Y+3, r6	; 0x03
     384:	7c 82       	std	Y+4, r7	; 0x04
     386:	41 2c       	mov	r4, r1
     388:	51 2c       	mov	r5, r1
     38a:	32 01       	movw	r6, r4
     38c:	43 94       	inc	r4
     38e:	04 c0       	rjmp	.+8      	; 0x398 <_fpadd_parts+0x160>
     390:	44 0c       	add	r4, r4
     392:	55 1c       	adc	r5, r5
     394:	66 1c       	adc	r6, r6
     396:	77 1c       	adc	r7, r7
     398:	4a 95       	dec	r20
     39a:	d2 f7       	brpl	.-12     	; 0x390 <_fpadd_parts+0x158>
     39c:	41 e0       	ldi	r20, 0x01	; 1
     39e:	44 1a       	sub	r4, r20
     3a0:	51 08       	sbc	r5, r1
     3a2:	61 08       	sbc	r6, r1
     3a4:	71 08       	sbc	r7, r1
     3a6:	40 22       	and	r4, r16
     3a8:	51 22       	and	r5, r17
     3aa:	62 22       	and	r6, r18
     3ac:	73 22       	and	r7, r19
     3ae:	01 e0       	ldi	r16, 0x01	; 1
     3b0:	10 e0       	ldi	r17, 0x00	; 0
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	45 28       	or	r4, r5
     3b8:	46 28       	or	r4, r6
     3ba:	47 28       	or	r4, r7
     3bc:	19 f4       	brne	.+6      	; 0x3c4 <_fpadd_parts+0x18c>
     3be:	00 e0       	ldi	r16, 0x00	; 0
     3c0:	10 e0       	ldi	r17, 0x00	; 0
     3c2:	98 01       	movw	r18, r16
     3c4:	49 80       	ldd	r4, Y+1	; 0x01
     3c6:	5a 80       	ldd	r5, Y+2	; 0x02
     3c8:	6b 80       	ldd	r6, Y+3	; 0x03
     3ca:	7c 80       	ldd	r7, Y+4	; 0x04
     3cc:	04 29       	or	r16, r4
     3ce:	15 29       	or	r17, r5
     3d0:	26 29       	or	r18, r6
     3d2:	37 29       	or	r19, r7
     3d4:	0b c0       	rjmp	.+22     	; 0x3ec <_fpadd_parts+0x1b4>
     3d6:	a8 17       	cp	r26, r24
     3d8:	b9 07       	cpc	r27, r25
     3da:	24 f4       	brge	.+8      	; 0x3e4 <_fpadd_parts+0x1ac>
     3dc:	81 2c       	mov	r8, r1
     3de:	91 2c       	mov	r9, r1
     3e0:	54 01       	movw	r10, r8
     3e2:	04 c0       	rjmp	.+8      	; 0x3ec <_fpadd_parts+0x1b4>
     3e4:	cd 01       	movw	r24, r26
     3e6:	00 e0       	ldi	r16, 0x00	; 0
     3e8:	10 e0       	ldi	r17, 0x00	; 0
     3ea:	98 01       	movw	r18, r16
     3ec:	f7 01       	movw	r30, r14
     3ee:	41 81       	ldd	r20, Z+1	; 0x01
     3f0:	fb 01       	movw	r30, r22
     3f2:	51 81       	ldd	r21, Z+1	; 0x01
     3f4:	45 17       	cp	r20, r21
     3f6:	09 f4       	brne	.+2      	; 0x3fa <_fpadd_parts+0x1c2>
     3f8:	46 c0       	rjmp	.+140    	; 0x486 <_fpadd_parts+0x24e>
     3fa:	44 23       	and	r20, r20
     3fc:	49 f0       	breq	.+18     	; 0x410 <_fpadd_parts+0x1d8>
     3fe:	24 01       	movw	r4, r8
     400:	35 01       	movw	r6, r10
     402:	40 1a       	sub	r4, r16
     404:	51 0a       	sbc	r5, r17
     406:	62 0a       	sbc	r6, r18
     408:	73 0a       	sbc	r7, r19
     40a:	93 01       	movw	r18, r6
     40c:	82 01       	movw	r16, r4
     40e:	04 c0       	rjmp	.+8      	; 0x418 <_fpadd_parts+0x1e0>
     410:	08 19       	sub	r16, r8
     412:	19 09       	sbc	r17, r9
     414:	2a 09       	sbc	r18, r10
     416:	3b 09       	sbc	r19, r11
     418:	37 fd       	sbrc	r19, 7
     41a:	05 c0       	rjmp	.+10     	; 0x426 <_fpadd_parts+0x1ee>
     41c:	f6 01       	movw	r30, r12
     41e:	11 82       	std	Z+1, r1	; 0x01
     420:	82 83       	std	Z+2, r24	; 0x02
     422:	93 83       	std	Z+3, r25	; 0x03
     424:	0c c0       	rjmp	.+24     	; 0x43e <_fpadd_parts+0x206>
     426:	41 e0       	ldi	r20, 0x01	; 1
     428:	f6 01       	movw	r30, r12
     42a:	41 83       	std	Z+1, r20	; 0x01
     42c:	82 83       	std	Z+2, r24	; 0x02
     42e:	93 83       	std	Z+3, r25	; 0x03
     430:	30 95       	com	r19
     432:	20 95       	com	r18
     434:	10 95       	com	r17
     436:	01 95       	neg	r16
     438:	1f 4f       	sbci	r17, 0xFF	; 255
     43a:	2f 4f       	sbci	r18, 0xFF	; 255
     43c:	3f 4f       	sbci	r19, 0xFF	; 255
     43e:	04 83       	std	Z+4, r16	; 0x04
     440:	15 83       	std	Z+5, r17	; 0x05
     442:	26 83       	std	Z+6, r18	; 0x06
     444:	37 83       	std	Z+7, r19	; 0x07
     446:	0e c0       	rjmp	.+28     	; 0x464 <_fpadd_parts+0x22c>
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	aa 1f       	adc	r26, r26
     44e:	bb 1f       	adc	r27, r27
     450:	f6 01       	movw	r30, r12
     452:	84 83       	std	Z+4, r24	; 0x04
     454:	95 83       	std	Z+5, r25	; 0x05
     456:	a6 83       	std	Z+6, r26	; 0x06
     458:	b7 83       	std	Z+7, r27	; 0x07
     45a:	82 81       	ldd	r24, Z+2	; 0x02
     45c:	93 81       	ldd	r25, Z+3	; 0x03
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	82 83       	std	Z+2, r24	; 0x02
     462:	93 83       	std	Z+3, r25	; 0x03
     464:	f6 01       	movw	r30, r12
     466:	84 81       	ldd	r24, Z+4	; 0x04
     468:	95 81       	ldd	r25, Z+5	; 0x05
     46a:	a6 81       	ldd	r26, Z+6	; 0x06
     46c:	b7 81       	ldd	r27, Z+7	; 0x07
     46e:	ac 01       	movw	r20, r24
     470:	bd 01       	movw	r22, r26
     472:	41 50       	subi	r20, 0x01	; 1
     474:	51 09       	sbc	r21, r1
     476:	61 09       	sbc	r22, r1
     478:	71 09       	sbc	r23, r1
     47a:	4f 3f       	cpi	r20, 0xFF	; 255
     47c:	5f 4f       	sbci	r21, 0xFF	; 255
     47e:	6f 4f       	sbci	r22, 0xFF	; 255
     480:	7f 43       	sbci	r23, 0x3F	; 63
     482:	10 f3       	brcs	.-60     	; 0x448 <_fpadd_parts+0x210>
     484:	0c c0       	rjmp	.+24     	; 0x49e <_fpadd_parts+0x266>
     486:	f6 01       	movw	r30, r12
     488:	41 83       	std	Z+1, r20	; 0x01
     48a:	82 83       	std	Z+2, r24	; 0x02
     48c:	93 83       	std	Z+3, r25	; 0x03
     48e:	08 0d       	add	r16, r8
     490:	19 1d       	adc	r17, r9
     492:	2a 1d       	adc	r18, r10
     494:	3b 1d       	adc	r19, r11
     496:	04 83       	std	Z+4, r16	; 0x04
     498:	15 83       	std	Z+5, r17	; 0x05
     49a:	26 83       	std	Z+6, r18	; 0x06
     49c:	37 83       	std	Z+7, r19	; 0x07
     49e:	83 e0       	ldi	r24, 0x03	; 3
     4a0:	f6 01       	movw	r30, r12
     4a2:	80 83       	st	Z, r24
     4a4:	44 81       	ldd	r20, Z+4	; 0x04
     4a6:	55 81       	ldd	r21, Z+5	; 0x05
     4a8:	66 81       	ldd	r22, Z+6	; 0x06
     4aa:	77 81       	ldd	r23, Z+7	; 0x07
     4ac:	77 ff       	sbrs	r23, 7
     4ae:	1a c0       	rjmp	.+52     	; 0x4e4 <_fpadd_parts+0x2ac>
     4b0:	db 01       	movw	r26, r22
     4b2:	ca 01       	movw	r24, r20
     4b4:	81 70       	andi	r24, 0x01	; 1
     4b6:	99 27       	eor	r25, r25
     4b8:	aa 27       	eor	r26, r26
     4ba:	bb 27       	eor	r27, r27
     4bc:	76 95       	lsr	r23
     4be:	67 95       	ror	r22
     4c0:	57 95       	ror	r21
     4c2:	47 95       	ror	r20
     4c4:	84 2b       	or	r24, r20
     4c6:	95 2b       	or	r25, r21
     4c8:	a6 2b       	or	r26, r22
     4ca:	b7 2b       	or	r27, r23
     4cc:	84 83       	std	Z+4, r24	; 0x04
     4ce:	95 83       	std	Z+5, r25	; 0x05
     4d0:	a6 83       	std	Z+6, r26	; 0x06
     4d2:	b7 83       	std	Z+7, r27	; 0x07
     4d4:	82 81       	ldd	r24, Z+2	; 0x02
     4d6:	93 81       	ldd	r25, Z+3	; 0x03
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	82 83       	std	Z+2, r24	; 0x02
     4dc:	93 83       	std	Z+3, r25	; 0x03
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <_fpadd_parts+0x2ac>
     4e0:	7b 01       	movw	r14, r22
     4e2:	01 c0       	rjmp	.+2      	; 0x4e6 <_fpadd_parts+0x2ae>
     4e4:	76 01       	movw	r14, r12
     4e6:	c7 01       	movw	r24, r14
     4e8:	24 96       	adiw	r28, 0x04	; 4
     4ea:	e0 e1       	ldi	r30, 0x10	; 16
     4ec:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__epilogue_restores__+0x4>

000004f0 <__addsf3>:
     4f0:	a0 e2       	ldi	r26, 0x20	; 32
     4f2:	b0 e0       	ldi	r27, 0x00	; 0
     4f4:	ee e7       	ldi	r30, 0x7E	; 126
     4f6:	f2 e0       	ldi	r31, 0x02	; 2
     4f8:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__prologue_saves__+0x20>
     4fc:	6d 8f       	std	Y+29, r22	; 0x1d
     4fe:	7e 8f       	std	Y+30, r23	; 0x1e
     500:	8f 8f       	std	Y+31, r24	; 0x1f
     502:	98 a3       	std	Y+32, r25	; 0x20
     504:	29 8f       	std	Y+25, r18	; 0x19
     506:	3a 8f       	std	Y+26, r19	; 0x1a
     508:	4b 8f       	std	Y+27, r20	; 0x1b
     50a:	5c 8f       	std	Y+28, r21	; 0x1c
     50c:	be 01       	movw	r22, r28
     50e:	6f 5e       	subi	r22, 0xEF	; 239
     510:	7f 4f       	sbci	r23, 0xFF	; 255
     512:	ce 01       	movw	r24, r28
     514:	4d 96       	adiw	r24, 0x1d	; 29
     516:	ed d2       	rcall	.+1498   	; 0xaf2 <__unpack_f>
     518:	be 01       	movw	r22, r28
     51a:	67 5f       	subi	r22, 0xF7	; 247
     51c:	7f 4f       	sbci	r23, 0xFF	; 255
     51e:	ce 01       	movw	r24, r28
     520:	49 96       	adiw	r24, 0x19	; 25
     522:	e7 d2       	rcall	.+1486   	; 0xaf2 <__unpack_f>
     524:	ae 01       	movw	r20, r28
     526:	4f 5f       	subi	r20, 0xFF	; 255
     528:	5f 4f       	sbci	r21, 0xFF	; 255
     52a:	be 01       	movw	r22, r28
     52c:	67 5f       	subi	r22, 0xF7	; 247
     52e:	7f 4f       	sbci	r23, 0xFF	; 255
     530:	ce 01       	movw	r24, r28
     532:	41 96       	adiw	r24, 0x11	; 17
     534:	81 de       	rcall	.-766    	; 0x238 <_fpadd_parts>
     536:	13 d2       	rcall	.+1062   	; 0x95e <__pack_f>
     538:	a0 96       	adiw	r28, 0x20	; 32
     53a:	e2 e0       	ldi	r30, 0x02	; 2
     53c:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__epilogue_restores__+0x20>

00000540 <__subsf3>:
     540:	a0 e2       	ldi	r26, 0x20	; 32
     542:	b0 e0       	ldi	r27, 0x00	; 0
     544:	e6 ea       	ldi	r30, 0xA6	; 166
     546:	f2 e0       	ldi	r31, 0x02	; 2
     548:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__prologue_saves__+0x20>
     54c:	6d 8f       	std	Y+29, r22	; 0x1d
     54e:	7e 8f       	std	Y+30, r23	; 0x1e
     550:	8f 8f       	std	Y+31, r24	; 0x1f
     552:	98 a3       	std	Y+32, r25	; 0x20
     554:	29 8f       	std	Y+25, r18	; 0x19
     556:	3a 8f       	std	Y+26, r19	; 0x1a
     558:	4b 8f       	std	Y+27, r20	; 0x1b
     55a:	5c 8f       	std	Y+28, r21	; 0x1c
     55c:	be 01       	movw	r22, r28
     55e:	6f 5e       	subi	r22, 0xEF	; 239
     560:	7f 4f       	sbci	r23, 0xFF	; 255
     562:	ce 01       	movw	r24, r28
     564:	4d 96       	adiw	r24, 0x1d	; 29
     566:	c5 d2       	rcall	.+1418   	; 0xaf2 <__unpack_f>
     568:	be 01       	movw	r22, r28
     56a:	67 5f       	subi	r22, 0xF7	; 247
     56c:	7f 4f       	sbci	r23, 0xFF	; 255
     56e:	ce 01       	movw	r24, r28
     570:	49 96       	adiw	r24, 0x19	; 25
     572:	bf d2       	rcall	.+1406   	; 0xaf2 <__unpack_f>
     574:	8a 85       	ldd	r24, Y+10	; 0x0a
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	89 27       	eor	r24, r25
     57a:	8a 87       	std	Y+10, r24	; 0x0a
     57c:	ae 01       	movw	r20, r28
     57e:	4f 5f       	subi	r20, 0xFF	; 255
     580:	5f 4f       	sbci	r21, 0xFF	; 255
     582:	be 01       	movw	r22, r28
     584:	67 5f       	subi	r22, 0xF7	; 247
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	ce 01       	movw	r24, r28
     58a:	41 96       	adiw	r24, 0x11	; 17
     58c:	55 de       	rcall	.-854    	; 0x238 <_fpadd_parts>
     58e:	e7 d1       	rcall	.+974    	; 0x95e <__pack_f>
     590:	a0 96       	adiw	r28, 0x20	; 32
     592:	e2 e0       	ldi	r30, 0x02	; 2
     594:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__epilogue_restores__+0x20>

00000598 <__mulsf3>:
     598:	a0 e2       	ldi	r26, 0x20	; 32
     59a:	b0 e0       	ldi	r27, 0x00	; 0
     59c:	e2 ed       	ldi	r30, 0xD2	; 210
     59e:	f2 e0       	ldi	r31, 0x02	; 2
     5a0:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__prologue_saves__+0x4>
     5a4:	6d 8f       	std	Y+29, r22	; 0x1d
     5a6:	7e 8f       	std	Y+30, r23	; 0x1e
     5a8:	8f 8f       	std	Y+31, r24	; 0x1f
     5aa:	98 a3       	std	Y+32, r25	; 0x20
     5ac:	29 8f       	std	Y+25, r18	; 0x19
     5ae:	3a 8f       	std	Y+26, r19	; 0x1a
     5b0:	4b 8f       	std	Y+27, r20	; 0x1b
     5b2:	5c 8f       	std	Y+28, r21	; 0x1c
     5b4:	be 01       	movw	r22, r28
     5b6:	6f 5e       	subi	r22, 0xEF	; 239
     5b8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ba:	ce 01       	movw	r24, r28
     5bc:	4d 96       	adiw	r24, 0x1d	; 29
     5be:	99 d2       	rcall	.+1330   	; 0xaf2 <__unpack_f>
     5c0:	be 01       	movw	r22, r28
     5c2:	67 5f       	subi	r22, 0xF7	; 247
     5c4:	7f 4f       	sbci	r23, 0xFF	; 255
     5c6:	ce 01       	movw	r24, r28
     5c8:	49 96       	adiw	r24, 0x19	; 25
     5ca:	93 d2       	rcall	.+1318   	; 0xaf2 <__unpack_f>
     5cc:	99 89       	ldd	r25, Y+17	; 0x11
     5ce:	92 30       	cpi	r25, 0x02	; 2
     5d0:	08 f4       	brcc	.+2      	; 0x5d4 <__mulsf3+0x3c>
     5d2:	12 c0       	rjmp	.+36     	; 0x5f8 <__mulsf3+0x60>
     5d4:	89 85       	ldd	r24, Y+9	; 0x09
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	08 f4       	brcc	.+2      	; 0x5dc <__mulsf3+0x44>
     5da:	1a c0       	rjmp	.+52     	; 0x610 <__mulsf3+0x78>
     5dc:	94 30       	cpi	r25, 0x04	; 4
     5de:	21 f4       	brne	.+8      	; 0x5e8 <__mulsf3+0x50>
     5e0:	82 30       	cpi	r24, 0x02	; 2
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <__mulsf3+0x4e>
     5e4:	b4 c0       	rjmp	.+360    	; 0x74e <__mulsf3+0x1b6>
     5e6:	08 c0       	rjmp	.+16     	; 0x5f8 <__mulsf3+0x60>
     5e8:	84 30       	cpi	r24, 0x04	; 4
     5ea:	21 f4       	brne	.+8      	; 0x5f4 <__mulsf3+0x5c>
     5ec:	92 30       	cpi	r25, 0x02	; 2
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <__mulsf3+0x5a>
     5f0:	ae c0       	rjmp	.+348    	; 0x74e <__mulsf3+0x1b6>
     5f2:	0e c0       	rjmp	.+28     	; 0x610 <__mulsf3+0x78>
     5f4:	92 30       	cpi	r25, 0x02	; 2
     5f6:	51 f4       	brne	.+20     	; 0x60c <__mulsf3+0x74>
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	2a 89       	ldd	r18, Y+18	; 0x12
     5fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5fe:	29 13       	cpse	r18, r25
     600:	01 c0       	rjmp	.+2      	; 0x604 <__mulsf3+0x6c>
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	8a 8b       	std	Y+18, r24	; 0x12
     606:	ce 01       	movw	r24, r28
     608:	41 96       	adiw	r24, 0x11	; 17
     60a:	a3 c0       	rjmp	.+326    	; 0x752 <__mulsf3+0x1ba>
     60c:	82 30       	cpi	r24, 0x02	; 2
     60e:	51 f4       	brne	.+20     	; 0x624 <__mulsf3+0x8c>
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	2a 89       	ldd	r18, Y+18	; 0x12
     614:	9a 85       	ldd	r25, Y+10	; 0x0a
     616:	29 13       	cpse	r18, r25
     618:	01 c0       	rjmp	.+2      	; 0x61c <__mulsf3+0x84>
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	8a 87       	std	Y+10, r24	; 0x0a
     61e:	ce 01       	movw	r24, r28
     620:	09 96       	adiw	r24, 0x09	; 9
     622:	97 c0       	rjmp	.+302    	; 0x752 <__mulsf3+0x1ba>
     624:	8d 88       	ldd	r8, Y+21	; 0x15
     626:	9e 88       	ldd	r9, Y+22	; 0x16
     628:	af 88       	ldd	r10, Y+23	; 0x17
     62a:	b8 8c       	ldd	r11, Y+24	; 0x18
     62c:	0d 85       	ldd	r16, Y+13	; 0x0d
     62e:	1e 85       	ldd	r17, Y+14	; 0x0e
     630:	2f 85       	ldd	r18, Y+15	; 0x0f
     632:	38 89       	ldd	r19, Y+16	; 0x10
     634:	e0 e2       	ldi	r30, 0x20	; 32
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	dc 01       	movw	r26, r24
     63e:	c1 2c       	mov	r12, r1
     640:	d1 2c       	mov	r13, r1
     642:	76 01       	movw	r14, r12
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	ba 01       	movw	r22, r20
     64a:	80 fe       	sbrs	r8, 0
     64c:	18 c0       	rjmp	.+48     	; 0x67e <__mulsf3+0xe6>
     64e:	40 0f       	add	r20, r16
     650:	51 1f       	adc	r21, r17
     652:	62 1f       	adc	r22, r18
     654:	73 1f       	adc	r23, r19
     656:	8c 0d       	add	r24, r12
     658:	9d 1d       	adc	r25, r13
     65a:	ae 1d       	adc	r26, r14
     65c:	bf 1d       	adc	r27, r15
     65e:	41 2c       	mov	r4, r1
     660:	51 2c       	mov	r5, r1
     662:	32 01       	movw	r6, r4
     664:	43 94       	inc	r4
     666:	40 17       	cp	r20, r16
     668:	51 07       	cpc	r21, r17
     66a:	62 07       	cpc	r22, r18
     66c:	73 07       	cpc	r23, r19
     66e:	18 f0       	brcs	.+6      	; 0x676 <__mulsf3+0xde>
     670:	41 2c       	mov	r4, r1
     672:	51 2c       	mov	r5, r1
     674:	32 01       	movw	r6, r4
     676:	84 0d       	add	r24, r4
     678:	95 1d       	adc	r25, r5
     67a:	a6 1d       	adc	r26, r6
     67c:	b7 1d       	adc	r27, r7
     67e:	cc 0c       	add	r12, r12
     680:	dd 1c       	adc	r13, r13
     682:	ee 1c       	adc	r14, r14
     684:	ff 1c       	adc	r15, r15
     686:	37 ff       	sbrs	r19, 7
     688:	02 c0       	rjmp	.+4      	; 0x68e <__mulsf3+0xf6>
     68a:	68 94       	set
     68c:	c0 f8       	bld	r12, 0
     68e:	00 0f       	add	r16, r16
     690:	11 1f       	adc	r17, r17
     692:	22 1f       	adc	r18, r18
     694:	33 1f       	adc	r19, r19
     696:	b6 94       	lsr	r11
     698:	a7 94       	ror	r10
     69a:	97 94       	ror	r9
     69c:	87 94       	ror	r8
     69e:	31 97       	sbiw	r30, 0x01	; 1
     6a0:	a1 f6       	brne	.-88     	; 0x64a <__mulsf3+0xb2>
     6a2:	2b 89       	ldd	r18, Y+19	; 0x13
     6a4:	3c 89       	ldd	r19, Y+20	; 0x14
     6a6:	eb 85       	ldd	r30, Y+11	; 0x0b
     6a8:	fc 85       	ldd	r31, Y+12	; 0x0c
     6aa:	2e 0f       	add	r18, r30
     6ac:	3f 1f       	adc	r19, r31
     6ae:	2e 5f       	subi	r18, 0xFE	; 254
     6b0:	3f 4f       	sbci	r19, 0xFF	; 255
     6b2:	2b 83       	std	Y+3, r18	; 0x03
     6b4:	3c 83       	std	Y+4, r19	; 0x04
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	ea 89       	ldd	r30, Y+18	; 0x12
     6ba:	3a 85       	ldd	r19, Y+10	; 0x0a
     6bc:	e3 13       	cpse	r30, r19
     6be:	01 c0       	rjmp	.+2      	; 0x6c2 <__mulsf3+0x12a>
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	2a 83       	std	Y+2, r18	; 0x02
     6c4:	eb 81       	ldd	r30, Y+3	; 0x03
     6c6:	fc 81       	ldd	r31, Y+4	; 0x04
     6c8:	0c c0       	rjmp	.+24     	; 0x6e2 <__mulsf3+0x14a>
     6ca:	80 ff       	sbrs	r24, 0
     6cc:	05 c0       	rjmp	.+10     	; 0x6d8 <__mulsf3+0x140>
     6ce:	76 95       	lsr	r23
     6d0:	67 95       	ror	r22
     6d2:	57 95       	ror	r21
     6d4:	47 95       	ror	r20
     6d6:	70 68       	ori	r23, 0x80	; 128
     6d8:	b6 95       	lsr	r27
     6da:	a7 95       	ror	r26
     6dc:	97 95       	ror	r25
     6de:	87 95       	ror	r24
     6e0:	31 96       	adiw	r30, 0x01	; 1
     6e2:	b7 fd       	sbrc	r27, 7
     6e4:	f2 cf       	rjmp	.-28     	; 0x6ca <__mulsf3+0x132>
     6e6:	9f 01       	movw	r18, r30
     6e8:	0c c0       	rjmp	.+24     	; 0x702 <__mulsf3+0x16a>
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	aa 1f       	adc	r26, r26
     6f0:	bb 1f       	adc	r27, r27
     6f2:	77 fd       	sbrc	r23, 7
     6f4:	81 60       	ori	r24, 0x01	; 1
     6f6:	44 0f       	add	r20, r20
     6f8:	55 1f       	adc	r21, r21
     6fa:	66 1f       	adc	r22, r22
     6fc:	77 1f       	adc	r23, r23
     6fe:	21 50       	subi	r18, 0x01	; 1
     700:	31 09       	sbc	r19, r1
     702:	00 97       	sbiw	r24, 0x00	; 0
     704:	a1 05       	cpc	r26, r1
     706:	e0 e4       	ldi	r30, 0x40	; 64
     708:	be 07       	cpc	r27, r30
     70a:	78 f3       	brcs	.-34     	; 0x6ea <__mulsf3+0x152>
     70c:	2b 83       	std	Y+3, r18	; 0x03
     70e:	3c 83       	std	Y+4, r19	; 0x04
     710:	8c 01       	movw	r16, r24
     712:	9d 01       	movw	r18, r26
     714:	0f 77       	andi	r16, 0x7F	; 127
     716:	11 27       	eor	r17, r17
     718:	22 27       	eor	r18, r18
     71a:	33 27       	eor	r19, r19
     71c:	00 34       	cpi	r16, 0x40	; 64
     71e:	11 05       	cpc	r17, r1
     720:	21 05       	cpc	r18, r1
     722:	31 05       	cpc	r19, r1
     724:	59 f4       	brne	.+22     	; 0x73c <__mulsf3+0x1a4>
     726:	87 fd       	sbrc	r24, 7
     728:	09 c0       	rjmp	.+18     	; 0x73c <__mulsf3+0x1a4>
     72a:	45 2b       	or	r20, r21
     72c:	46 2b       	or	r20, r22
     72e:	47 2b       	or	r20, r23
     730:	29 f0       	breq	.+10     	; 0x73c <__mulsf3+0x1a4>
     732:	80 5c       	subi	r24, 0xC0	; 192
     734:	9f 4f       	sbci	r25, 0xFF	; 255
     736:	af 4f       	sbci	r26, 0xFF	; 255
     738:	bf 4f       	sbci	r27, 0xFF	; 255
     73a:	80 78       	andi	r24, 0x80	; 128
     73c:	8d 83       	std	Y+5, r24	; 0x05
     73e:	9e 83       	std	Y+6, r25	; 0x06
     740:	af 83       	std	Y+7, r26	; 0x07
     742:	b8 87       	std	Y+8, r27	; 0x08
     744:	83 e0       	ldi	r24, 0x03	; 3
     746:	89 83       	std	Y+1, r24	; 0x01
     748:	ce 01       	movw	r24, r28
     74a:	01 96       	adiw	r24, 0x01	; 1
     74c:	02 c0       	rjmp	.+4      	; 0x752 <__mulsf3+0x1ba>
     74e:	86 e0       	ldi	r24, 0x06	; 6
     750:	90 e2       	ldi	r25, 0x20	; 32
     752:	05 d1       	rcall	.+522    	; 0x95e <__pack_f>
     754:	a0 96       	adiw	r28, 0x20	; 32
     756:	e0 e1       	ldi	r30, 0x10	; 16
     758:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__epilogue_restores__+0x4>

0000075c <__gtsf2>:
     75c:	a8 e1       	ldi	r26, 0x18	; 24
     75e:	b0 e0       	ldi	r27, 0x00	; 0
     760:	e4 eb       	ldi	r30, 0xB4	; 180
     762:	f3 e0       	ldi	r31, 0x03	; 3
     764:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__prologue_saves__+0x20>
     768:	6d 8b       	std	Y+21, r22	; 0x15
     76a:	7e 8b       	std	Y+22, r23	; 0x16
     76c:	8f 8b       	std	Y+23, r24	; 0x17
     76e:	98 8f       	std	Y+24, r25	; 0x18
     770:	29 8b       	std	Y+17, r18	; 0x11
     772:	3a 8b       	std	Y+18, r19	; 0x12
     774:	4b 8b       	std	Y+19, r20	; 0x13
     776:	5c 8b       	std	Y+20, r21	; 0x14
     778:	be 01       	movw	r22, r28
     77a:	67 5f       	subi	r22, 0xF7	; 247
     77c:	7f 4f       	sbci	r23, 0xFF	; 255
     77e:	ce 01       	movw	r24, r28
     780:	45 96       	adiw	r24, 0x15	; 21
     782:	b7 d1       	rcall	.+878    	; 0xaf2 <__unpack_f>
     784:	be 01       	movw	r22, r28
     786:	6f 5f       	subi	r22, 0xFF	; 255
     788:	7f 4f       	sbci	r23, 0xFF	; 255
     78a:	ce 01       	movw	r24, r28
     78c:	41 96       	adiw	r24, 0x11	; 17
     78e:	b1 d1       	rcall	.+866    	; 0xaf2 <__unpack_f>
     790:	89 85       	ldd	r24, Y+9	; 0x09
     792:	82 30       	cpi	r24, 0x02	; 2
     794:	50 f0       	brcs	.+20     	; 0x7aa <__gtsf2+0x4e>
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	82 30       	cpi	r24, 0x02	; 2
     79a:	38 f0       	brcs	.+14     	; 0x7aa <__gtsf2+0x4e>
     79c:	be 01       	movw	r22, r28
     79e:	6f 5f       	subi	r22, 0xFF	; 255
     7a0:	7f 4f       	sbci	r23, 0xFF	; 255
     7a2:	ce 01       	movw	r24, r28
     7a4:	09 96       	adiw	r24, 0x09	; 9
     7a6:	14 d2       	rcall	.+1064   	; 0xbd0 <__fpcmp_parts_f>
     7a8:	01 c0       	rjmp	.+2      	; 0x7ac <__gtsf2+0x50>
     7aa:	8f ef       	ldi	r24, 0xFF	; 255
     7ac:	68 96       	adiw	r28, 0x18	; 24
     7ae:	e2 e0       	ldi	r30, 0x02	; 2
     7b0:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__epilogue_restores__+0x20>

000007b4 <__ltsf2>:
     7b4:	a8 e1       	ldi	r26, 0x18	; 24
     7b6:	b0 e0       	ldi	r27, 0x00	; 0
     7b8:	e0 ee       	ldi	r30, 0xE0	; 224
     7ba:	f3 e0       	ldi	r31, 0x03	; 3
     7bc:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__prologue_saves__+0x20>
     7c0:	6d 8b       	std	Y+21, r22	; 0x15
     7c2:	7e 8b       	std	Y+22, r23	; 0x16
     7c4:	8f 8b       	std	Y+23, r24	; 0x17
     7c6:	98 8f       	std	Y+24, r25	; 0x18
     7c8:	29 8b       	std	Y+17, r18	; 0x11
     7ca:	3a 8b       	std	Y+18, r19	; 0x12
     7cc:	4b 8b       	std	Y+19, r20	; 0x13
     7ce:	5c 8b       	std	Y+20, r21	; 0x14
     7d0:	be 01       	movw	r22, r28
     7d2:	67 5f       	subi	r22, 0xF7	; 247
     7d4:	7f 4f       	sbci	r23, 0xFF	; 255
     7d6:	ce 01       	movw	r24, r28
     7d8:	45 96       	adiw	r24, 0x15	; 21
     7da:	8b d1       	rcall	.+790    	; 0xaf2 <__unpack_f>
     7dc:	be 01       	movw	r22, r28
     7de:	6f 5f       	subi	r22, 0xFF	; 255
     7e0:	7f 4f       	sbci	r23, 0xFF	; 255
     7e2:	ce 01       	movw	r24, r28
     7e4:	41 96       	adiw	r24, 0x11	; 17
     7e6:	85 d1       	rcall	.+778    	; 0xaf2 <__unpack_f>
     7e8:	89 85       	ldd	r24, Y+9	; 0x09
     7ea:	82 30       	cpi	r24, 0x02	; 2
     7ec:	50 f0       	brcs	.+20     	; 0x802 <__ltsf2+0x4e>
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	82 30       	cpi	r24, 0x02	; 2
     7f2:	38 f0       	brcs	.+14     	; 0x802 <__ltsf2+0x4e>
     7f4:	be 01       	movw	r22, r28
     7f6:	6f 5f       	subi	r22, 0xFF	; 255
     7f8:	7f 4f       	sbci	r23, 0xFF	; 255
     7fa:	ce 01       	movw	r24, r28
     7fc:	09 96       	adiw	r24, 0x09	; 9
     7fe:	e8 d1       	rcall	.+976    	; 0xbd0 <__fpcmp_parts_f>
     800:	01 c0       	rjmp	.+2      	; 0x804 <__ltsf2+0x50>
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	68 96       	adiw	r28, 0x18	; 24
     806:	e2 e0       	ldi	r30, 0x02	; 2
     808:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__epilogue_restores__+0x20>

0000080c <__floatsisf>:
     80c:	a8 e0       	ldi	r26, 0x08	; 8
     80e:	b0 e0       	ldi	r27, 0x00	; 0
     810:	ec e0       	ldi	r30, 0x0C	; 12
     812:	f4 e0       	ldi	r31, 0x04	; 4
     814:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <__prologue_saves__+0x1c>
     818:	23 e0       	ldi	r18, 0x03	; 3
     81a:	29 83       	std	Y+1, r18	; 0x01
     81c:	8b 01       	movw	r16, r22
     81e:	9c 01       	movw	r18, r24
     820:	00 27       	eor	r16, r16
     822:	37 fd       	sbrc	r19, 7
     824:	03 95       	inc	r16
     826:	11 27       	eor	r17, r17
     828:	22 27       	eor	r18, r18
     82a:	33 27       	eor	r19, r19
     82c:	40 2f       	mov	r20, r16
     82e:	0a 83       	std	Y+2, r16	; 0x02
     830:	61 15       	cp	r22, r1
     832:	71 05       	cpc	r23, r1
     834:	81 05       	cpc	r24, r1
     836:	91 05       	cpc	r25, r1
     838:	19 f4       	brne	.+6      	; 0x840 <__floatsisf+0x34>
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	89 83       	std	Y+1, r24	; 0x01
     83e:	35 c0       	rjmp	.+106    	; 0x8aa <__floatsisf+0x9e>
     840:	2e e1       	ldi	r18, 0x1E	; 30
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	2b 83       	std	Y+3, r18	; 0x03
     846:	3c 83       	std	Y+4, r19	; 0x04
     848:	44 23       	and	r20, r20
     84a:	71 f0       	breq	.+28     	; 0x868 <__floatsisf+0x5c>
     84c:	61 15       	cp	r22, r1
     84e:	71 05       	cpc	r23, r1
     850:	81 05       	cpc	r24, r1
     852:	20 e8       	ldi	r18, 0x80	; 128
     854:	92 07       	cpc	r25, r18
     856:	69 f1       	breq	.+90     	; 0x8b2 <__floatsisf+0xa6>
     858:	00 27       	eor	r16, r16
     85a:	11 27       	eor	r17, r17
     85c:	98 01       	movw	r18, r16
     85e:	06 1b       	sub	r16, r22
     860:	17 0b       	sbc	r17, r23
     862:	28 0b       	sbc	r18, r24
     864:	39 0b       	sbc	r19, r25
     866:	02 c0       	rjmp	.+4      	; 0x86c <__floatsisf+0x60>
     868:	8b 01       	movw	r16, r22
     86a:	9c 01       	movw	r18, r24
     86c:	c9 01       	movw	r24, r18
     86e:	b8 01       	movw	r22, r16
     870:	0e 94 b5 13 	call	0x276a	; 0x276a <__clzsi2>
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	18 16       	cp	r1, r24
     878:	19 06       	cpc	r1, r25
     87a:	2c f0       	brlt	.+10     	; 0x886 <__floatsisf+0x7a>
     87c:	0d 83       	std	Y+5, r16	; 0x05
     87e:	1e 83       	std	Y+6, r17	; 0x06
     880:	2f 83       	std	Y+7, r18	; 0x07
     882:	38 87       	std	Y+8, r19	; 0x08
     884:	12 c0       	rjmp	.+36     	; 0x8aa <__floatsisf+0x9e>
     886:	08 2e       	mov	r0, r24
     888:	04 c0       	rjmp	.+8      	; 0x892 <__floatsisf+0x86>
     88a:	00 0f       	add	r16, r16
     88c:	11 1f       	adc	r17, r17
     88e:	22 1f       	adc	r18, r18
     890:	33 1f       	adc	r19, r19
     892:	0a 94       	dec	r0
     894:	d2 f7       	brpl	.-12     	; 0x88a <__floatsisf+0x7e>
     896:	0d 83       	std	Y+5, r16	; 0x05
     898:	1e 83       	std	Y+6, r17	; 0x06
     89a:	2f 83       	std	Y+7, r18	; 0x07
     89c:	38 87       	std	Y+8, r19	; 0x08
     89e:	2e e1       	ldi	r18, 0x1E	; 30
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	28 1b       	sub	r18, r24
     8a4:	39 0b       	sbc	r19, r25
     8a6:	2b 83       	std	Y+3, r18	; 0x03
     8a8:	3c 83       	std	Y+4, r19	; 0x04
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	57 d0       	rcall	.+174    	; 0x95e <__pack_f>
     8b0:	04 c0       	rjmp	.+8      	; 0x8ba <__floatsisf+0xae>
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	9f ec       	ldi	r25, 0xCF	; 207
     8ba:	28 96       	adiw	r28, 0x08	; 8
     8bc:	e4 e0       	ldi	r30, 0x04	; 4
     8be:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <__epilogue_restores__+0x1c>

000008c2 <__fixsfsi>:
     8c2:	ac e0       	ldi	r26, 0x0C	; 12
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	e7 e6       	ldi	r30, 0x67	; 103
     8c8:	f4 e0       	ldi	r31, 0x04	; 4
     8ca:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <__prologue_saves__+0x1c>
     8ce:	69 87       	std	Y+9, r22	; 0x09
     8d0:	7a 87       	std	Y+10, r23	; 0x0a
     8d2:	8b 87       	std	Y+11, r24	; 0x0b
     8d4:	9c 87       	std	Y+12, r25	; 0x0c
     8d6:	be 01       	movw	r22, r28
     8d8:	6f 5f       	subi	r22, 0xFF	; 255
     8da:	7f 4f       	sbci	r23, 0xFF	; 255
     8dc:	ce 01       	movw	r24, r28
     8de:	09 96       	adiw	r24, 0x09	; 9
     8e0:	08 d1       	rcall	.+528    	; 0xaf2 <__unpack_f>
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	82 30       	cpi	r24, 0x02	; 2
     8e6:	91 f1       	breq	.+100    	; 0x94c <__fixsfsi+0x8a>
     8e8:	82 30       	cpi	r24, 0x02	; 2
     8ea:	80 f1       	brcs	.+96     	; 0x94c <__fixsfsi+0x8a>
     8ec:	84 30       	cpi	r24, 0x04	; 4
     8ee:	41 f4       	brne	.+16     	; 0x900 <__fixsfsi+0x3e>
     8f0:	8a 81       	ldd	r24, Y+2	; 0x02
     8f2:	88 23       	and	r24, r24
     8f4:	31 f1       	breq	.+76     	; 0x942 <__fixsfsi+0x80>
     8f6:	00 e0       	ldi	r16, 0x00	; 0
     8f8:	10 e0       	ldi	r17, 0x00	; 0
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e8       	ldi	r19, 0x80	; 128
     8fe:	29 c0       	rjmp	.+82     	; 0x952 <__fixsfsi+0x90>
     900:	2b 81       	ldd	r18, Y+3	; 0x03
     902:	3c 81       	ldd	r19, Y+4	; 0x04
     904:	37 fd       	sbrc	r19, 7
     906:	22 c0       	rjmp	.+68     	; 0x94c <__fixsfsi+0x8a>
     908:	2f 31       	cpi	r18, 0x1F	; 31
     90a:	31 05       	cpc	r19, r1
     90c:	8c f7       	brge	.-30     	; 0x8f0 <__fixsfsi+0x2e>
     90e:	8e e1       	ldi	r24, 0x1E	; 30
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	82 1b       	sub	r24, r18
     914:	93 0b       	sbc	r25, r19
     916:	0d 81       	ldd	r16, Y+5	; 0x05
     918:	1e 81       	ldd	r17, Y+6	; 0x06
     91a:	2f 81       	ldd	r18, Y+7	; 0x07
     91c:	38 85       	ldd	r19, Y+8	; 0x08
     91e:	04 c0       	rjmp	.+8      	; 0x928 <__fixsfsi+0x66>
     920:	36 95       	lsr	r19
     922:	27 95       	ror	r18
     924:	17 95       	ror	r17
     926:	07 95       	ror	r16
     928:	8a 95       	dec	r24
     92a:	d2 f7       	brpl	.-12     	; 0x920 <__fixsfsi+0x5e>
     92c:	8a 81       	ldd	r24, Y+2	; 0x02
     92e:	88 23       	and	r24, r24
     930:	81 f0       	breq	.+32     	; 0x952 <__fixsfsi+0x90>
     932:	30 95       	com	r19
     934:	20 95       	com	r18
     936:	10 95       	com	r17
     938:	01 95       	neg	r16
     93a:	1f 4f       	sbci	r17, 0xFF	; 255
     93c:	2f 4f       	sbci	r18, 0xFF	; 255
     93e:	3f 4f       	sbci	r19, 0xFF	; 255
     940:	08 c0       	rjmp	.+16     	; 0x952 <__fixsfsi+0x90>
     942:	0f ef       	ldi	r16, 0xFF	; 255
     944:	1f ef       	ldi	r17, 0xFF	; 255
     946:	2f ef       	ldi	r18, 0xFF	; 255
     948:	3f e7       	ldi	r19, 0x7F	; 127
     94a:	03 c0       	rjmp	.+6      	; 0x952 <__fixsfsi+0x90>
     94c:	00 e0       	ldi	r16, 0x00	; 0
     94e:	10 e0       	ldi	r17, 0x00	; 0
     950:	98 01       	movw	r18, r16
     952:	b8 01       	movw	r22, r16
     954:	c9 01       	movw	r24, r18
     956:	2c 96       	adiw	r28, 0x0c	; 12
     958:	e4 e0       	ldi	r30, 0x04	; 4
     95a:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <__epilogue_restores__+0x1c>

0000095e <__pack_f>:
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	dc 01       	movw	r26, r24
     968:	14 96       	adiw	r26, 0x04	; 4
     96a:	4d 91       	ld	r20, X+
     96c:	5d 91       	ld	r21, X+
     96e:	6d 91       	ld	r22, X+
     970:	7c 91       	ld	r23, X
     972:	17 97       	sbiw	r26, 0x07	; 7
     974:	11 96       	adiw	r26, 0x01	; 1
     976:	ec 91       	ld	r30, X
     978:	11 97       	sbiw	r26, 0x01	; 1
     97a:	8c 91       	ld	r24, X
     97c:	82 30       	cpi	r24, 0x02	; 2
     97e:	20 f4       	brcc	.+8      	; 0x988 <__pack_f+0x2a>
     980:	60 61       	ori	r22, 0x10	; 16
     982:	8f ef       	ldi	r24, 0xFF	; 255
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a6 c0       	rjmp	.+332    	; 0xad4 <__pack_f+0x176>
     988:	84 30       	cpi	r24, 0x04	; 4
     98a:	09 f4       	brne	.+2      	; 0x98e <__pack_f+0x30>
     98c:	9e c0       	rjmp	.+316    	; 0xaca <__pack_f+0x16c>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	09 f4       	brne	.+2      	; 0x994 <__pack_f+0x36>
     992:	95 c0       	rjmp	.+298    	; 0xabe <__pack_f+0x160>
     994:	41 15       	cp	r20, r1
     996:	51 05       	cpc	r21, r1
     998:	61 05       	cpc	r22, r1
     99a:	71 05       	cpc	r23, r1
     99c:	09 f4       	brne	.+2      	; 0x9a0 <__pack_f+0x42>
     99e:	92 c0       	rjmp	.+292    	; 0xac4 <__pack_f+0x166>
     9a0:	12 96       	adiw	r26, 0x02	; 2
     9a2:	2d 91       	ld	r18, X+
     9a4:	3c 91       	ld	r19, X
     9a6:	13 97       	sbiw	r26, 0x03	; 3
     9a8:	22 38       	cpi	r18, 0x82	; 130
     9aa:	8f ef       	ldi	r24, 0xFF	; 255
     9ac:	38 07       	cpc	r19, r24
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x54>
     9b0:	58 c0       	rjmp	.+176    	; 0xa62 <__pack_f+0x104>
     9b2:	c2 e8       	ldi	r28, 0x82	; 130
     9b4:	df ef       	ldi	r29, 0xFF	; 255
     9b6:	c2 1b       	sub	r28, r18
     9b8:	d3 0b       	sbc	r29, r19
     9ba:	ca 31       	cpi	r28, 0x1A	; 26
     9bc:	d1 05       	cpc	r29, r1
     9be:	6c f5       	brge	.+90     	; 0xa1a <__pack_f+0xbc>
     9c0:	8a 01       	movw	r16, r20
     9c2:	9b 01       	movw	r18, r22
     9c4:	0c 2e       	mov	r0, r28
     9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <__pack_f+0x72>
     9c8:	36 95       	lsr	r19
     9ca:	27 95       	ror	r18
     9cc:	17 95       	ror	r17
     9ce:	07 95       	ror	r16
     9d0:	0a 94       	dec	r0
     9d2:	d2 f7       	brpl	.-12     	; 0x9c8 <__pack_f+0x6a>
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	0c 2e       	mov	r0, r28
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__pack_f+0x8a>
     9e0:	88 0f       	add	r24, r24
     9e2:	99 1f       	adc	r25, r25
     9e4:	aa 1f       	adc	r26, r26
     9e6:	bb 1f       	adc	r27, r27
     9e8:	0a 94       	dec	r0
     9ea:	d2 f7       	brpl	.-12     	; 0x9e0 <__pack_f+0x82>
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	a1 09       	sbc	r26, r1
     9f0:	b1 09       	sbc	r27, r1
     9f2:	84 23       	and	r24, r20
     9f4:	95 23       	and	r25, r21
     9f6:	a6 23       	and	r26, r22
     9f8:	b7 23       	and	r27, r23
     9fa:	41 e0       	ldi	r20, 0x01	; 1
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	89 2b       	or	r24, r25
     a04:	8a 2b       	or	r24, r26
     a06:	8b 2b       	or	r24, r27
     a08:	19 f4       	brne	.+6      	; 0xa10 <__pack_f+0xb2>
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	ba 01       	movw	r22, r20
     a10:	40 2b       	or	r20, r16
     a12:	51 2b       	or	r21, r17
     a14:	62 2b       	or	r22, r18
     a16:	73 2b       	or	r23, r19
     a18:	03 c0       	rjmp	.+6      	; 0xa20 <__pack_f+0xc2>
     a1a:	40 e0       	ldi	r20, 0x00	; 0
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	ba 01       	movw	r22, r20
     a20:	db 01       	movw	r26, r22
     a22:	ca 01       	movw	r24, r20
     a24:	8f 77       	andi	r24, 0x7F	; 127
     a26:	99 27       	eor	r25, r25
     a28:	aa 27       	eor	r26, r26
     a2a:	bb 27       	eor	r27, r27
     a2c:	80 34       	cpi	r24, 0x40	; 64
     a2e:	91 05       	cpc	r25, r1
     a30:	a1 05       	cpc	r26, r1
     a32:	b1 05       	cpc	r27, r1
     a34:	39 f4       	brne	.+14     	; 0xa44 <__pack_f+0xe6>
     a36:	47 ff       	sbrs	r20, 7
     a38:	09 c0       	rjmp	.+18     	; 0xa4c <__pack_f+0xee>
     a3a:	40 5c       	subi	r20, 0xC0	; 192
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	6f 4f       	sbci	r22, 0xFF	; 255
     a40:	7f 4f       	sbci	r23, 0xFF	; 255
     a42:	04 c0       	rjmp	.+8      	; 0xa4c <__pack_f+0xee>
     a44:	41 5c       	subi	r20, 0xC1	; 193
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	6f 4f       	sbci	r22, 0xFF	; 255
     a4a:	7f 4f       	sbci	r23, 0xFF	; 255
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	41 15       	cp	r20, r1
     a52:	51 05       	cpc	r21, r1
     a54:	61 05       	cpc	r22, r1
     a56:	20 e4       	ldi	r18, 0x40	; 64
     a58:	72 07       	cpc	r23, r18
     a5a:	48 f5       	brcc	.+82     	; 0xaae <__pack_f+0x150>
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	26 c0       	rjmp	.+76     	; 0xaae <__pack_f+0x150>
     a62:	20 38       	cpi	r18, 0x80	; 128
     a64:	31 05       	cpc	r19, r1
     a66:	8c f5       	brge	.+98     	; 0xaca <__pack_f+0x16c>
     a68:	db 01       	movw	r26, r22
     a6a:	ca 01       	movw	r24, r20
     a6c:	8f 77       	andi	r24, 0x7F	; 127
     a6e:	99 27       	eor	r25, r25
     a70:	aa 27       	eor	r26, r26
     a72:	bb 27       	eor	r27, r27
     a74:	80 34       	cpi	r24, 0x40	; 64
     a76:	91 05       	cpc	r25, r1
     a78:	a1 05       	cpc	r26, r1
     a7a:	b1 05       	cpc	r27, r1
     a7c:	39 f4       	brne	.+14     	; 0xa8c <__pack_f+0x12e>
     a7e:	47 ff       	sbrs	r20, 7
     a80:	09 c0       	rjmp	.+18     	; 0xa94 <__pack_f+0x136>
     a82:	40 5c       	subi	r20, 0xC0	; 192
     a84:	5f 4f       	sbci	r21, 0xFF	; 255
     a86:	6f 4f       	sbci	r22, 0xFF	; 255
     a88:	7f 4f       	sbci	r23, 0xFF	; 255
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <__pack_f+0x136>
     a8c:	41 5c       	subi	r20, 0xC1	; 193
     a8e:	5f 4f       	sbci	r21, 0xFF	; 255
     a90:	6f 4f       	sbci	r22, 0xFF	; 255
     a92:	7f 4f       	sbci	r23, 0xFF	; 255
     a94:	77 fd       	sbrc	r23, 7
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x142>
     a98:	c9 01       	movw	r24, r18
     a9a:	81 58       	subi	r24, 0x81	; 129
     a9c:	9f 4f       	sbci	r25, 0xFF	; 255
     a9e:	07 c0       	rjmp	.+14     	; 0xaae <__pack_f+0x150>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	c9 01       	movw	r24, r18
     aaa:	80 58       	subi	r24, 0x80	; 128
     aac:	9f 4f       	sbci	r25, 0xFF	; 255
     aae:	97 e0       	ldi	r25, 0x07	; 7
     ab0:	76 95       	lsr	r23
     ab2:	67 95       	ror	r22
     ab4:	57 95       	ror	r21
     ab6:	47 95       	ror	r20
     ab8:	9a 95       	dec	r25
     aba:	d1 f7       	brne	.-12     	; 0xab0 <__pack_f+0x152>
     abc:	0b c0       	rjmp	.+22     	; 0xad4 <__pack_f+0x176>
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x170>
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	05 c0       	rjmp	.+10     	; 0xad4 <__pack_f+0x176>
     aca:	8f ef       	ldi	r24, 0xFF	; 255
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	ba 01       	movw	r22, r20
     ad4:	98 2f       	mov	r25, r24
     ad6:	96 95       	lsr	r25
     ad8:	e0 fb       	bst	r30, 0
     ada:	97 f9       	bld	r25, 7
     adc:	36 2f       	mov	r19, r22
     ade:	80 fb       	bst	r24, 0
     ae0:	37 f9       	bld	r19, 7
     ae2:	64 2f       	mov	r22, r20
     ae4:	75 2f       	mov	r23, r21
     ae6:	83 2f       	mov	r24, r19
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	08 95       	ret

00000af2 <__unpack_f>:
     af2:	cf 92       	push	r12
     af4:	df 92       	push	r13
     af6:	ef 92       	push	r14
     af8:	dc 01       	movw	r26, r24
     afa:	fb 01       	movw	r30, r22
     afc:	cc 90       	ld	r12, X
     afe:	11 96       	adiw	r26, 0x01	; 1
     b00:	dc 90       	ld	r13, X
     b02:	11 97       	sbiw	r26, 0x01	; 1
     b04:	12 96       	adiw	r26, 0x02	; 2
     b06:	8c 91       	ld	r24, X
     b08:	12 97       	sbiw	r26, 0x02	; 2
     b0a:	3f e7       	ldi	r19, 0x7F	; 127
     b0c:	e3 2e       	mov	r14, r19
     b0e:	e8 22       	and	r14, r24
     b10:	6e 2d       	mov	r22, r14
     b12:	a6 01       	movw	r20, r12
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	98 2f       	mov	r25, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	99 27       	eor	r25, r25
     b1c:	99 1f       	adc	r25, r25
     b1e:	13 96       	adiw	r26, 0x03	; 3
     b20:	2c 91       	ld	r18, X
     b22:	82 2f       	mov	r24, r18
     b24:	88 0f       	add	r24, r24
     b26:	89 2b       	or	r24, r25
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	27 fb       	bst	r18, 7
     b2c:	22 27       	eor	r18, r18
     b2e:	20 f9       	bld	r18, 0
     b30:	21 83       	std	Z+1, r18	; 0x01
     b32:	00 97       	sbiw	r24, 0x00	; 0
     b34:	29 f5       	brne	.+74     	; 0xb80 <__unpack_f+0x8e>
     b36:	41 15       	cp	r20, r1
     b38:	51 05       	cpc	r21, r1
     b3a:	61 05       	cpc	r22, r1
     b3c:	71 05       	cpc	r23, r1
     b3e:	11 f4       	brne	.+4      	; 0xb44 <__unpack_f+0x52>
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	27 c0       	rjmp	.+78     	; 0xb92 <__unpack_f+0xa0>
     b44:	82 e8       	ldi	r24, 0x82	; 130
     b46:	9f ef       	ldi	r25, 0xFF	; 255
     b48:	82 83       	std	Z+2, r24	; 0x02
     b4a:	93 83       	std	Z+3, r25	; 0x03
     b4c:	27 e0       	ldi	r18, 0x07	; 7
     b4e:	44 0f       	add	r20, r20
     b50:	55 1f       	adc	r21, r21
     b52:	66 1f       	adc	r22, r22
     b54:	77 1f       	adc	r23, r23
     b56:	2a 95       	dec	r18
     b58:	d1 f7       	brne	.-12     	; 0xb4e <__unpack_f+0x5c>
     b5a:	83 e0       	ldi	r24, 0x03	; 3
     b5c:	80 83       	st	Z, r24
     b5e:	09 c0       	rjmp	.+18     	; 0xb72 <__unpack_f+0x80>
     b60:	44 0f       	add	r20, r20
     b62:	55 1f       	adc	r21, r21
     b64:	66 1f       	adc	r22, r22
     b66:	77 1f       	adc	r23, r23
     b68:	82 81       	ldd	r24, Z+2	; 0x02
     b6a:	93 81       	ldd	r25, Z+3	; 0x03
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	82 83       	std	Z+2, r24	; 0x02
     b70:	93 83       	std	Z+3, r25	; 0x03
     b72:	41 15       	cp	r20, r1
     b74:	51 05       	cpc	r21, r1
     b76:	61 05       	cpc	r22, r1
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	78 07       	cpc	r23, r24
     b7c:	88 f3       	brcs	.-30     	; 0xb60 <__unpack_f+0x6e>
     b7e:	20 c0       	rjmp	.+64     	; 0xbc0 <__unpack_f+0xce>
     b80:	8f 3f       	cpi	r24, 0xFF	; 255
     b82:	91 05       	cpc	r25, r1
     b84:	79 f4       	brne	.+30     	; 0xba4 <__unpack_f+0xb2>
     b86:	41 15       	cp	r20, r1
     b88:	51 05       	cpc	r21, r1
     b8a:	61 05       	cpc	r22, r1
     b8c:	71 05       	cpc	r23, r1
     b8e:	19 f4       	brne	.+6      	; 0xb96 <__unpack_f+0xa4>
     b90:	84 e0       	ldi	r24, 0x04	; 4
     b92:	80 83       	st	Z, r24
     b94:	19 c0       	rjmp	.+50     	; 0xbc8 <__unpack_f+0xd6>
     b96:	e4 fe       	sbrs	r14, 4
     b98:	03 c0       	rjmp	.+6      	; 0xba0 <__unpack_f+0xae>
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	80 83       	st	Z, r24
     b9e:	10 c0       	rjmp	.+32     	; 0xbc0 <__unpack_f+0xce>
     ba0:	10 82       	st	Z, r1
     ba2:	0e c0       	rjmp	.+28     	; 0xbc0 <__unpack_f+0xce>
     ba4:	8f 57       	subi	r24, 0x7F	; 127
     ba6:	91 09       	sbc	r25, r1
     ba8:	82 83       	std	Z+2, r24	; 0x02
     baa:	93 83       	std	Z+3, r25	; 0x03
     bac:	83 e0       	ldi	r24, 0x03	; 3
     bae:	80 83       	st	Z, r24
     bb0:	87 e0       	ldi	r24, 0x07	; 7
     bb2:	44 0f       	add	r20, r20
     bb4:	55 1f       	adc	r21, r21
     bb6:	66 1f       	adc	r22, r22
     bb8:	77 1f       	adc	r23, r23
     bba:	8a 95       	dec	r24
     bbc:	d1 f7       	brne	.-12     	; 0xbb2 <__unpack_f+0xc0>
     bbe:	70 64       	ori	r23, 0x40	; 64
     bc0:	44 83       	std	Z+4, r20	; 0x04
     bc2:	55 83       	std	Z+5, r21	; 0x05
     bc4:	66 83       	std	Z+6, r22	; 0x06
     bc6:	77 83       	std	Z+7, r23	; 0x07
     bc8:	ef 90       	pop	r14
     bca:	df 90       	pop	r13
     bcc:	cf 90       	pop	r12
     bce:	08 95       	ret

00000bd0 <__fpcmp_parts_f>:
     bd0:	cf 93       	push	r28
     bd2:	fc 01       	movw	r30, r24
     bd4:	db 01       	movw	r26, r22
     bd6:	90 81       	ld	r25, Z
     bd8:	92 30       	cpi	r25, 0x02	; 2
     bda:	08 f4       	brcc	.+2      	; 0xbde <__fpcmp_parts_f+0xe>
     bdc:	52 c0       	rjmp	.+164    	; 0xc82 <__fpcmp_parts_f+0xb2>
     bde:	8c 91       	ld	r24, X
     be0:	82 30       	cpi	r24, 0x02	; 2
     be2:	08 f4       	brcc	.+2      	; 0xbe6 <__fpcmp_parts_f+0x16>
     be4:	4e c0       	rjmp	.+156    	; 0xc82 <__fpcmp_parts_f+0xb2>
     be6:	94 30       	cpi	r25, 0x04	; 4
     be8:	71 f4       	brne	.+28     	; 0xc06 <__fpcmp_parts_f+0x36>
     bea:	84 30       	cpi	r24, 0x04	; 4
     bec:	39 f4       	brne	.+14     	; 0xbfc <__fpcmp_parts_f+0x2c>
     bee:	11 96       	adiw	r26, 0x01	; 1
     bf0:	2c 91       	ld	r18, X
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	81 81       	ldd	r24, Z+1	; 0x01
     bf6:	28 1b       	sub	r18, r24
     bf8:	31 09       	sbc	r19, r1
     bfa:	48 c0       	rjmp	.+144    	; 0xc8c <__fpcmp_parts_f+0xbc>
     bfc:	81 81       	ldd	r24, Z+1	; 0x01
     bfe:	88 23       	and	r24, r24
     c00:	09 f4       	brne	.+2      	; 0xc04 <__fpcmp_parts_f+0x34>
     c02:	3f c0       	rjmp	.+126    	; 0xc82 <__fpcmp_parts_f+0xb2>
     c04:	3b c0       	rjmp	.+118    	; 0xc7c <__fpcmp_parts_f+0xac>
     c06:	84 30       	cpi	r24, 0x04	; 4
     c08:	29 f4       	brne	.+10     	; 0xc14 <__fpcmp_parts_f+0x44>
     c0a:	11 96       	adiw	r26, 0x01	; 1
     c0c:	8c 91       	ld	r24, X
     c0e:	81 11       	cpse	r24, r1
     c10:	38 c0       	rjmp	.+112    	; 0xc82 <__fpcmp_parts_f+0xb2>
     c12:	34 c0       	rjmp	.+104    	; 0xc7c <__fpcmp_parts_f+0xac>
     c14:	92 30       	cpi	r25, 0x02	; 2
     c16:	19 f4       	brne	.+6      	; 0xc1e <__fpcmp_parts_f+0x4e>
     c18:	82 30       	cpi	r24, 0x02	; 2
     c1a:	b9 f7       	brne	.-18     	; 0xc0a <__fpcmp_parts_f+0x3a>
     c1c:	35 c0       	rjmp	.+106    	; 0xc88 <__fpcmp_parts_f+0xb8>
     c1e:	82 30       	cpi	r24, 0x02	; 2
     c20:	69 f3       	breq	.-38     	; 0xbfc <__fpcmp_parts_f+0x2c>
     c22:	c1 81       	ldd	r28, Z+1	; 0x01
     c24:	11 96       	adiw	r26, 0x01	; 1
     c26:	8c 91       	ld	r24, X
     c28:	11 97       	sbiw	r26, 0x01	; 1
     c2a:	c8 13       	cpse	r28, r24
     c2c:	1d c0       	rjmp	.+58     	; 0xc68 <__fpcmp_parts_f+0x98>
     c2e:	22 81       	ldd	r18, Z+2	; 0x02
     c30:	33 81       	ldd	r19, Z+3	; 0x03
     c32:	12 96       	adiw	r26, 0x02	; 2
     c34:	8d 91       	ld	r24, X+
     c36:	9c 91       	ld	r25, X
     c38:	13 97       	sbiw	r26, 0x03	; 3
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	0c f4       	brge	.+2      	; 0xc42 <__fpcmp_parts_f+0x72>
     c40:	13 c0       	rjmp	.+38     	; 0xc68 <__fpcmp_parts_f+0x98>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	0c f4       	brge	.+2      	; 0xc4a <__fpcmp_parts_f+0x7a>
     c48:	17 c0       	rjmp	.+46     	; 0xc78 <__fpcmp_parts_f+0xa8>
     c4a:	44 81       	ldd	r20, Z+4	; 0x04
     c4c:	55 81       	ldd	r21, Z+5	; 0x05
     c4e:	66 81       	ldd	r22, Z+6	; 0x06
     c50:	77 81       	ldd	r23, Z+7	; 0x07
     c52:	14 96       	adiw	r26, 0x04	; 4
     c54:	8d 91       	ld	r24, X+
     c56:	9d 91       	ld	r25, X+
     c58:	0d 90       	ld	r0, X+
     c5a:	bc 91       	ld	r27, X
     c5c:	a0 2d       	mov	r26, r0
     c5e:	84 17       	cp	r24, r20
     c60:	95 07       	cpc	r25, r21
     c62:	a6 07       	cpc	r26, r22
     c64:	b7 07       	cpc	r27, r23
     c66:	18 f4       	brcc	.+6      	; 0xc6e <__fpcmp_parts_f+0x9e>
     c68:	c1 11       	cpse	r28, r1
     c6a:	08 c0       	rjmp	.+16     	; 0xc7c <__fpcmp_parts_f+0xac>
     c6c:	0a c0       	rjmp	.+20     	; 0xc82 <__fpcmp_parts_f+0xb2>
     c6e:	48 17       	cp	r20, r24
     c70:	59 07       	cpc	r21, r25
     c72:	6a 07       	cpc	r22, r26
     c74:	7b 07       	cpc	r23, r27
     c76:	40 f4       	brcc	.+16     	; 0xc88 <__fpcmp_parts_f+0xb8>
     c78:	c1 11       	cpse	r28, r1
     c7a:	03 c0       	rjmp	.+6      	; 0xc82 <__fpcmp_parts_f+0xb2>
     c7c:	2f ef       	ldi	r18, 0xFF	; 255
     c7e:	3f ef       	ldi	r19, 0xFF	; 255
     c80:	05 c0       	rjmp	.+10     	; 0xc8c <__fpcmp_parts_f+0xbc>
     c82:	21 e0       	ldi	r18, 0x01	; 1
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <__fpcmp_parts_f+0xbc>
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	c9 01       	movw	r24, r18
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     c92:	08 95       	ret

00000c94 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     c94:	8f ef       	ldi	r24, 0xFF	; 255
     c96:	80 93 70 00 	sts	0x0070, r24
     c9a:	80 93 71 00 	sts	0x0071, r24
     c9e:	80 93 72 00 	sts	0x0072, r24
     ca2:	80 93 73 00 	sts	0x0073, r24
     ca6:	80 93 74 00 	sts	0x0074, r24
     caa:	80 93 75 00 	sts	0x0075, r24
     cae:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     cb2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     cb4:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     cb6:	e0 e5       	ldi	r30, 0x50	; 80
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	90 81       	ld	r25, Z
     cbc:	92 60       	ori	r25, 0x02	; 2
     cbe:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cc0:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     cc2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     cc4:	81 ff       	sbrs	r24, 1
     cc6:	fd cf       	rjmp	.-6      	; 0xcc2 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	80 e4       	ldi	r24, 0x40	; 64
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	27 d1       	rcall	.+590    	; 0xf1e <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     cd0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     cd2:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     cd4:	e0 e5       	ldi	r30, 0x50	; 80
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	90 81       	ld	r25, Z
     cda:	9e 7f       	andi	r25, 0xFE	; 254
     cdc:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cde:	8f bf       	out	0x3f, r24	; 63
     ce0:	08 95       	ret

00000ce2 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     ce2:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     ce4:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     ce6:	fc 01       	movw	r30, r24
     ce8:	e0 59       	subi	r30, 0x90	; 144
     cea:	ff 4f       	sbci	r31, 0xFF	; 255
     cec:	60 95       	com	r22
     cee:	80 81       	ld	r24, Z
     cf0:	68 23       	and	r22, r24
     cf2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cf4:	2f bf       	out	0x3f, r18	; 63
     cf6:	08 95       	ret

00000cf8 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     cf8:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     cfa:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     cfc:	fc 01       	movw	r30, r24
     cfe:	e0 59       	subi	r30, 0x90	; 144
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	80 81       	ld	r24, Z
     d04:	68 2b       	or	r22, r24
     d06:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d08:	2f bf       	out	0x3f, r18	; 63
     d0a:	08 95       	ret

00000d0c <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     d0c:	81 15       	cp	r24, r1
     d0e:	92 40       	sbci	r25, 0x02	; 2
     d10:	61 f4       	brne	.+24     	; 0xd2a <adc_enable_clock+0x1e>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     d12:	80 91 0e 20 	lds	r24, 0x200E
     d16:	98 2f       	mov	r25, r24
     d18:	9f 5f       	subi	r25, 0xFF	; 255
     d1a:	90 93 0e 20 	sts	0x200E, r25
     d1e:	81 11       	cpse	r24, r1
     d20:	04 c0       	rjmp	.+8      	; 0xd2a <adc_enable_clock+0x1e>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     d22:	62 e0       	ldi	r22, 0x02	; 2
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	dc cf       	rjmp	.-72     	; 0xce2 <sysclk_enable_module>
     d2a:	08 95       	ret

00000d2c <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     d2c:	81 15       	cp	r24, r1
     d2e:	92 40       	sbci	r25, 0x02	; 2
     d30:	59 f4       	brne	.+22     	; 0xd48 <adc_disable_clock+0x1c>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     d32:	80 91 0e 20 	lds	r24, 0x200E
     d36:	81 50       	subi	r24, 0x01	; 1
     d38:	80 93 0e 20 	sts	0x200E, r24
     d3c:	81 11       	cpse	r24, r1
     d3e:	04 c0       	rjmp	.+8      	; 0xd48 <adc_disable_clock+0x1c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     d40:	62 e0       	ldi	r22, 0x02	; 2
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	d8 cf       	rjmp	.-80     	; 0xcf8 <sysclk_disable_module>
     d48:	08 95       	ret

00000d4a <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     d52:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
     d54:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     d56:	da df       	rcall	.-76     	; 0xd0c <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     d58:	88 81       	ld	r24, Y
     d5a:	81 60       	ori	r24, 0x01	; 1
     d5c:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d5e:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     d60:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     d62:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     d64:	ec e4       	ldi	r30, 0x4C	; 76
     d66:	f0 e2       	ldi	r31, 0x20	; 32
     d68:	90 81       	ld	r25, Z
     d6a:	9f 5f       	subi	r25, 0xFF	; 255
     d6c:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d6e:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	08 95       	ret

00000d78 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	eb 01       	movw	r28, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     d84:	81 15       	cp	r24, r1
     d86:	92 40       	sbci	r25, 0x02	; 2
     d88:	71 f5       	brne	.+92     	; 0xde6 <adc_write_configuration+0x6e>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     d8a:	61 e2       	ldi	r22, 0x21	; 33
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	cc d0       	rcall	.+408    	; 0xf2a <nvm_read_byte>
     d92:	18 2f       	mov	r17, r24
     d94:	60 e2       	ldi	r22, 0x20	; 32
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	c7 d0       	rcall	.+398    	; 0xf2a <nvm_read_byte>

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
		data <<= 8;
     d9c:	31 2f       	mov	r19, r17
     d9e:	20 e0       	ldi	r18, 0x00	; 0
		data |= nvm_read_production_signature_row(ADCACAL0);
     da0:	89 01       	movw	r16, r18
     da2:	08 2b       	or	r16, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     da4:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
     da6:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	92 e0       	ldi	r25, 0x02	; 2
     dac:	af df       	rcall	.-162    	; 0xd0c <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     dae:	e0 e0       	ldi	r30, 0x00	; 0
     db0:	f2 e0       	ldi	r31, 0x02	; 2
     db2:	20 81       	ld	r18, Z

	adc->CTRLA = ADC_FLUSH_bm;
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	80 83       	st	Z, r24
	adc->CAL = cal;
     db8:	04 87       	std	Z+12, r16	; 0x0c
     dba:	15 87       	std	Z+13, r17	; 0x0d
	adc->CMP = conf->cmp;
     dbc:	8d 81       	ldd	r24, Y+5	; 0x05
     dbe:	9e 81       	ldd	r25, Y+6	; 0x06
     dc0:	80 8f       	std	Z+24, r24	; 0x18
     dc2:	91 8f       	std	Z+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	82 83       	std	Z+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	84 83       	std	Z+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	83 83       	std	Z+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	81 83       	std	Z+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
     dd4:	82 2f       	mov	r24, r18
     dd6:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
     dd8:	98 81       	ld	r25, Y
     dda:	89 2b       	or	r24, r25
     ddc:	80 83       	st	Z, r24

	adc_disable_clock(adc);
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	92 e0       	ldi	r25, 0x02	; 2
     de2:	a4 df       	rcall	.-184    	; 0xd2c <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     de4:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	ff 90       	pop	r15
     df0:	08 95       	ret

00000df2 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     df2:	ff 92       	push	r15
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	ec 01       	movw	r28, r24
     dfe:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     e00:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
     e02:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     e04:	83 df       	rcall	.-250    	; 0xd0c <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     e06:	88 81       	ld	r24, Y
     e08:	80 7c       	andi	r24, 0xC0	; 192
     e0a:	f8 01       	movw	r30, r16
     e0c:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     e0e:	88 8d       	ldd	r24, Y+24	; 0x18
     e10:	99 8d       	ldd	r25, Y+25	; 0x19
     e12:	85 83       	std	Z+5, r24	; 0x05
     e14:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
     e26:	ce 01       	movw	r24, r28
     e28:	81 df       	rcall	.-254    	; 0xd2c <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e2a:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	08 95       	ret

00000e38 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     e38:	cf 92       	push	r12
     e3a:	df 92       	push	r13
     e3c:	ef 92       	push	r14
     e3e:	ff 92       	push	r15
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	7c 01       	movw	r14, r24
     e4a:	d6 2e       	mov	r13, r22
     e4c:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     e4e:	86 2f       	mov	r24, r22
     e50:	83 70       	andi	r24, 0x03	; 3
     e52:	29 f4       	brne	.+10     	; 0xe5e <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
     e54:	96 2f       	mov	r25, r22
     e56:	96 95       	lsr	r25
     e58:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <adcch_write_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     e5e:	96 2f       	mov	r25, r22
 */
__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     e60:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     e62:	90 ff       	sbrs	r25, 0
		index++;
     e64:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     e66:	e7 01       	movw	r28, r14
     e68:	a0 96       	adiw	r28, 0x20	; 32
     e6a:	98 e0       	ldi	r25, 0x08	; 8
     e6c:	89 9f       	mul	r24, r25
     e6e:	c0 0d       	add	r28, r0
     e70:	d1 1d       	adc	r29, r1
     e72:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     e74:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
     e76:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     e78:	c7 01       	movw	r24, r14
     e7a:	48 df       	rcall	.-368    	; 0xd0c <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     e7c:	f8 01       	movw	r30, r16
     e7e:	80 81       	ld	r24, Z
     e80:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     e86:	81 81       	ldd	r24, Z+1	; 0x01
     e88:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     e8a:	d0 fe       	sbrs	r13, 0
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     e8e:	83 81       	ldd	r24, Z+3	; 0x03
     e90:	8e 83       	std	Y+6, r24	; 0x06
	}
	adc_disable_clock(adc);
     e92:	c7 01       	movw	r24, r14
     e94:	4b df       	rcall	.-362    	; 0xd2c <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e96:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	08 95       	ret

00000eaa <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     eaa:	cf 92       	push	r12
     eac:	df 92       	push	r13
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	7c 01       	movw	r14, r24
     ebc:	d6 2e       	mov	r13, r22
     ebe:	ea 01       	movw	r28, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     ec0:	86 2f       	mov	r24, r22
     ec2:	83 70       	andi	r24, 0x03	; 3
     ec4:	29 f4       	brne	.+10     	; 0xed0 <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
     ec6:	96 2f       	mov	r25, r22
     ec8:	96 95       	lsr	r25
     eca:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     ecc:	82 e0       	ldi	r24, 0x02	; 2
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <adcch_read_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     ed0:	96 2f       	mov	r25, r22
 */
__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     ed2:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     ed4:	90 ff       	sbrs	r25, 0
		index++;
     ed6:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     ed8:	87 01       	movw	r16, r14
     eda:	00 5e       	subi	r16, 0xE0	; 224
     edc:	1f 4f       	sbci	r17, 0xFF	; 255
     ede:	98 e0       	ldi	r25, 0x08	; 8
     ee0:	89 9f       	mul	r24, r25
     ee2:	00 0d       	add	r16, r0
     ee4:	11 1d       	adc	r17, r1
     ee6:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     ee8:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
     eea:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     eec:	c7 01       	movw	r24, r14
     eee:	0e df       	rcall	.-484    	; 0xd0c <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     ef0:	f8 01       	movw	r30, r16
     ef2:	80 81       	ld	r24, Z
     ef4:	88 83       	st	Y, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     ef6:	82 81       	ldd	r24, Z+2	; 0x02
     ef8:	8a 83       	std	Y+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     efa:	81 81       	ldd	r24, Z+1	; 0x01
     efc:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     efe:	d0 fe       	sbrs	r13, 0
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <adcch_read_configuration+0x5c>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     f02:	86 81       	ldd	r24, Z+6	; 0x06
     f04:	8b 83       	std	Y+3, r24	; 0x03
	}
	adc_disable_clock(adc);
     f06:	c7 01       	movw	r24, r14
     f08:	11 df       	rcall	.-478    	; 0xd2c <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f0a:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	08 95       	ret

00000f1e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     f1e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     f20:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     f22:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     f24:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     f26:	60 83       	st	Z, r22
	ret                             // Return to caller
     f28:	08 95       	ret

00000f2a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     f2a:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
     f2e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     f30:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     f32:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
     f36:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     f38:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     f3c:	08 95       	ret

00000f3e <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
     f3e:	1f 92       	push	r1
     f40:	0f 92       	push	r0
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	0f 92       	push	r0
     f46:	11 24       	eor	r1, r1
     f48:	2f 93       	push	r18
     f4a:	3f 93       	push	r19
     f4c:	4f 93       	push	r20
     f4e:	5f 93       	push	r21
     f50:	6f 93       	push	r22
     f52:	7f 93       	push	r23
     f54:	8f 93       	push	r24
     f56:	9f 93       	push	r25
     f58:	af 93       	push	r26
     f5a:	bf 93       	push	r27
     f5c:	ef 93       	push	r30
     f5e:	ff 93       	push	r31
     f60:	e0 91 0f 20 	lds	r30, 0x200F
     f64:	f0 91 10 20 	lds	r31, 0x2010
     f68:	30 97       	sbiw	r30, 0x00	; 0
     f6a:	09 f0       	breq	.+2      	; 0xf6e <__vector_14+0x30>
     f6c:	09 95       	icall
     f6e:	ff 91       	pop	r31
     f70:	ef 91       	pop	r30
     f72:	bf 91       	pop	r27
     f74:	af 91       	pop	r26
     f76:	9f 91       	pop	r25
     f78:	8f 91       	pop	r24
     f7a:	7f 91       	pop	r23
     f7c:	6f 91       	pop	r22
     f7e:	5f 91       	pop	r21
     f80:	4f 91       	pop	r20
     f82:	3f 91       	pop	r19
     f84:	2f 91       	pop	r18
     f86:	0f 90       	pop	r0
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	0f 90       	pop	r0
     f8c:	1f 90       	pop	r1
     f8e:	18 95       	reti

00000f90 <__vector_15>:
     f90:	1f 92       	push	r1
     f92:	0f 92       	push	r0
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	0f 92       	push	r0
     f98:	11 24       	eor	r1, r1
     f9a:	2f 93       	push	r18
     f9c:	3f 93       	push	r19
     f9e:	4f 93       	push	r20
     fa0:	5f 93       	push	r21
     fa2:	6f 93       	push	r22
     fa4:	7f 93       	push	r23
     fa6:	8f 93       	push	r24
     fa8:	9f 93       	push	r25
     faa:	af 93       	push	r26
     fac:	bf 93       	push	r27
     fae:	ef 93       	push	r30
     fb0:	ff 93       	push	r31
     fb2:	e0 91 11 20 	lds	r30, 0x2011
     fb6:	f0 91 12 20 	lds	r31, 0x2012
     fba:	30 97       	sbiw	r30, 0x00	; 0
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <__vector_15+0x30>
     fbe:	09 95       	icall
     fc0:	ff 91       	pop	r31
     fc2:	ef 91       	pop	r30
     fc4:	bf 91       	pop	r27
     fc6:	af 91       	pop	r26
     fc8:	9f 91       	pop	r25
     fca:	8f 91       	pop	r24
     fcc:	7f 91       	pop	r23
     fce:	6f 91       	pop	r22
     fd0:	5f 91       	pop	r21
     fd2:	4f 91       	pop	r20
     fd4:	3f 91       	pop	r19
     fd6:	2f 91       	pop	r18
     fd8:	0f 90       	pop	r0
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	0f 90       	pop	r0
     fde:	1f 90       	pop	r1
     fe0:	18 95       	reti

00000fe2 <__vector_16>:
     fe2:	1f 92       	push	r1
     fe4:	0f 92       	push	r0
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	0f 92       	push	r0
     fea:	11 24       	eor	r1, r1
     fec:	2f 93       	push	r18
     fee:	3f 93       	push	r19
     ff0:	4f 93       	push	r20
     ff2:	5f 93       	push	r21
     ff4:	6f 93       	push	r22
     ff6:	7f 93       	push	r23
     ff8:	8f 93       	push	r24
     ffa:	9f 93       	push	r25
     ffc:	af 93       	push	r26
     ffe:	bf 93       	push	r27
    1000:	ef 93       	push	r30
    1002:	ff 93       	push	r31
    1004:	e0 91 13 20 	lds	r30, 0x2013
    1008:	f0 91 14 20 	lds	r31, 0x2014
    100c:	30 97       	sbiw	r30, 0x00	; 0
    100e:	09 f0       	breq	.+2      	; 0x1012 <__vector_16+0x30>
    1010:	09 95       	icall
    1012:	ff 91       	pop	r31
    1014:	ef 91       	pop	r30
    1016:	bf 91       	pop	r27
    1018:	af 91       	pop	r26
    101a:	9f 91       	pop	r25
    101c:	8f 91       	pop	r24
    101e:	7f 91       	pop	r23
    1020:	6f 91       	pop	r22
    1022:	5f 91       	pop	r21
    1024:	4f 91       	pop	r20
    1026:	3f 91       	pop	r19
    1028:	2f 91       	pop	r18
    102a:	0f 90       	pop	r0
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	0f 90       	pop	r0
    1030:	1f 90       	pop	r1
    1032:	18 95       	reti

00001034 <__vector_17>:
    1034:	1f 92       	push	r1
    1036:	0f 92       	push	r0
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	0f 92       	push	r0
    103c:	11 24       	eor	r1, r1
    103e:	2f 93       	push	r18
    1040:	3f 93       	push	r19
    1042:	4f 93       	push	r20
    1044:	5f 93       	push	r21
    1046:	6f 93       	push	r22
    1048:	7f 93       	push	r23
    104a:	8f 93       	push	r24
    104c:	9f 93       	push	r25
    104e:	af 93       	push	r26
    1050:	bf 93       	push	r27
    1052:	ef 93       	push	r30
    1054:	ff 93       	push	r31
    1056:	e0 91 15 20 	lds	r30, 0x2015
    105a:	f0 91 16 20 	lds	r31, 0x2016
    105e:	30 97       	sbiw	r30, 0x00	; 0
    1060:	09 f0       	breq	.+2      	; 0x1064 <__vector_17+0x30>
    1062:	09 95       	icall
    1064:	ff 91       	pop	r31
    1066:	ef 91       	pop	r30
    1068:	bf 91       	pop	r27
    106a:	af 91       	pop	r26
    106c:	9f 91       	pop	r25
    106e:	8f 91       	pop	r24
    1070:	7f 91       	pop	r23
    1072:	6f 91       	pop	r22
    1074:	5f 91       	pop	r21
    1076:	4f 91       	pop	r20
    1078:	3f 91       	pop	r19
    107a:	2f 91       	pop	r18
    107c:	0f 90       	pop	r0
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	0f 90       	pop	r0
    1082:	1f 90       	pop	r1
    1084:	18 95       	reti

00001086 <__vector_18>:
    1086:	1f 92       	push	r1
    1088:	0f 92       	push	r0
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	0f 92       	push	r0
    108e:	11 24       	eor	r1, r1
    1090:	2f 93       	push	r18
    1092:	3f 93       	push	r19
    1094:	4f 93       	push	r20
    1096:	5f 93       	push	r21
    1098:	6f 93       	push	r22
    109a:	7f 93       	push	r23
    109c:	8f 93       	push	r24
    109e:	9f 93       	push	r25
    10a0:	af 93       	push	r26
    10a2:	bf 93       	push	r27
    10a4:	ef 93       	push	r30
    10a6:	ff 93       	push	r31
    10a8:	e0 91 17 20 	lds	r30, 0x2017
    10ac:	f0 91 18 20 	lds	r31, 0x2018
    10b0:	30 97       	sbiw	r30, 0x00	; 0
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <__vector_18+0x30>
    10b4:	09 95       	icall
    10b6:	ff 91       	pop	r31
    10b8:	ef 91       	pop	r30
    10ba:	bf 91       	pop	r27
    10bc:	af 91       	pop	r26
    10be:	9f 91       	pop	r25
    10c0:	8f 91       	pop	r24
    10c2:	7f 91       	pop	r23
    10c4:	6f 91       	pop	r22
    10c6:	5f 91       	pop	r21
    10c8:	4f 91       	pop	r20
    10ca:	3f 91       	pop	r19
    10cc:	2f 91       	pop	r18
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <__vector_19>:
    10d8:	1f 92       	push	r1
    10da:	0f 92       	push	r0
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	0f 92       	push	r0
    10e0:	11 24       	eor	r1, r1
    10e2:	2f 93       	push	r18
    10e4:	3f 93       	push	r19
    10e6:	4f 93       	push	r20
    10e8:	5f 93       	push	r21
    10ea:	6f 93       	push	r22
    10ec:	7f 93       	push	r23
    10ee:	8f 93       	push	r24
    10f0:	9f 93       	push	r25
    10f2:	af 93       	push	r26
    10f4:	bf 93       	push	r27
    10f6:	ef 93       	push	r30
    10f8:	ff 93       	push	r31
    10fa:	e0 91 19 20 	lds	r30, 0x2019
    10fe:	f0 91 1a 20 	lds	r31, 0x201A
    1102:	30 97       	sbiw	r30, 0x00	; 0
    1104:	09 f0       	breq	.+2      	; 0x1108 <__vector_19+0x30>
    1106:	09 95       	icall
    1108:	ff 91       	pop	r31
    110a:	ef 91       	pop	r30
    110c:	bf 91       	pop	r27
    110e:	af 91       	pop	r26
    1110:	9f 91       	pop	r25
    1112:	8f 91       	pop	r24
    1114:	7f 91       	pop	r23
    1116:	6f 91       	pop	r22
    1118:	5f 91       	pop	r21
    111a:	4f 91       	pop	r20
    111c:	3f 91       	pop	r19
    111e:	2f 91       	pop	r18
    1120:	0f 90       	pop	r0
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	0f 90       	pop	r0
    1126:	1f 90       	pop	r1
    1128:	18 95       	reti

0000112a <__vector_20>:
    112a:	1f 92       	push	r1
    112c:	0f 92       	push	r0
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	0f 92       	push	r0
    1132:	11 24       	eor	r1, r1
    1134:	2f 93       	push	r18
    1136:	3f 93       	push	r19
    1138:	4f 93       	push	r20
    113a:	5f 93       	push	r21
    113c:	6f 93       	push	r22
    113e:	7f 93       	push	r23
    1140:	8f 93       	push	r24
    1142:	9f 93       	push	r25
    1144:	af 93       	push	r26
    1146:	bf 93       	push	r27
    1148:	ef 93       	push	r30
    114a:	ff 93       	push	r31
    114c:	e0 91 1b 20 	lds	r30, 0x201B
    1150:	f0 91 1c 20 	lds	r31, 0x201C
    1154:	30 97       	sbiw	r30, 0x00	; 0
    1156:	09 f0       	breq	.+2      	; 0x115a <__vector_20+0x30>
    1158:	09 95       	icall
    115a:	ff 91       	pop	r31
    115c:	ef 91       	pop	r30
    115e:	bf 91       	pop	r27
    1160:	af 91       	pop	r26
    1162:	9f 91       	pop	r25
    1164:	8f 91       	pop	r24
    1166:	7f 91       	pop	r23
    1168:	6f 91       	pop	r22
    116a:	5f 91       	pop	r21
    116c:	4f 91       	pop	r20
    116e:	3f 91       	pop	r19
    1170:	2f 91       	pop	r18
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	0f 90       	pop	r0
    1178:	1f 90       	pop	r1
    117a:	18 95       	reti

0000117c <__vector_21>:
    117c:	1f 92       	push	r1
    117e:	0f 92       	push	r0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	0f 92       	push	r0
    1184:	11 24       	eor	r1, r1
    1186:	2f 93       	push	r18
    1188:	3f 93       	push	r19
    118a:	4f 93       	push	r20
    118c:	5f 93       	push	r21
    118e:	6f 93       	push	r22
    1190:	7f 93       	push	r23
    1192:	8f 93       	push	r24
    1194:	9f 93       	push	r25
    1196:	af 93       	push	r26
    1198:	bf 93       	push	r27
    119a:	ef 93       	push	r30
    119c:	ff 93       	push	r31
    119e:	e0 91 1d 20 	lds	r30, 0x201D
    11a2:	f0 91 1e 20 	lds	r31, 0x201E
    11a6:	30 97       	sbiw	r30, 0x00	; 0
    11a8:	09 f0       	breq	.+2      	; 0x11ac <__vector_21+0x30>
    11aa:	09 95       	icall
    11ac:	ff 91       	pop	r31
    11ae:	ef 91       	pop	r30
    11b0:	bf 91       	pop	r27
    11b2:	af 91       	pop	r26
    11b4:	9f 91       	pop	r25
    11b6:	8f 91       	pop	r24
    11b8:	7f 91       	pop	r23
    11ba:	6f 91       	pop	r22
    11bc:	5f 91       	pop	r21
    11be:	4f 91       	pop	r20
    11c0:	3f 91       	pop	r19
    11c2:	2f 91       	pop	r18
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	0f 90       	pop	r0
    11ca:	1f 90       	pop	r1
    11cc:	18 95       	reti

000011ce <__vector_22>:
    11ce:	1f 92       	push	r1
    11d0:	0f 92       	push	r0
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	0f 92       	push	r0
    11d6:	11 24       	eor	r1, r1
    11d8:	2f 93       	push	r18
    11da:	3f 93       	push	r19
    11dc:	4f 93       	push	r20
    11de:	5f 93       	push	r21
    11e0:	6f 93       	push	r22
    11e2:	7f 93       	push	r23
    11e4:	8f 93       	push	r24
    11e6:	9f 93       	push	r25
    11e8:	af 93       	push	r26
    11ea:	bf 93       	push	r27
    11ec:	ef 93       	push	r30
    11ee:	ff 93       	push	r31
    11f0:	e0 91 1f 20 	lds	r30, 0x201F
    11f4:	f0 91 20 20 	lds	r31, 0x2020
    11f8:	30 97       	sbiw	r30, 0x00	; 0
    11fa:	09 f0       	breq	.+2      	; 0x11fe <__vector_22+0x30>
    11fc:	09 95       	icall
    11fe:	ff 91       	pop	r31
    1200:	ef 91       	pop	r30
    1202:	bf 91       	pop	r27
    1204:	af 91       	pop	r26
    1206:	9f 91       	pop	r25
    1208:	8f 91       	pop	r24
    120a:	7f 91       	pop	r23
    120c:	6f 91       	pop	r22
    120e:	5f 91       	pop	r21
    1210:	4f 91       	pop	r20
    1212:	3f 91       	pop	r19
    1214:	2f 91       	pop	r18
    1216:	0f 90       	pop	r0
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	0f 90       	pop	r0
    121c:	1f 90       	pop	r1
    121e:	18 95       	reti

00001220 <__vector_23>:
    1220:	1f 92       	push	r1
    1222:	0f 92       	push	r0
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	2f 93       	push	r18
    122c:	3f 93       	push	r19
    122e:	4f 93       	push	r20
    1230:	5f 93       	push	r21
    1232:	6f 93       	push	r22
    1234:	7f 93       	push	r23
    1236:	8f 93       	push	r24
    1238:	9f 93       	push	r25
    123a:	af 93       	push	r26
    123c:	bf 93       	push	r27
    123e:	ef 93       	push	r30
    1240:	ff 93       	push	r31
    1242:	e0 91 21 20 	lds	r30, 0x2021
    1246:	f0 91 22 20 	lds	r31, 0x2022
    124a:	30 97       	sbiw	r30, 0x00	; 0
    124c:	09 f0       	breq	.+2      	; 0x1250 <__vector_23+0x30>
    124e:	09 95       	icall
    1250:	ff 91       	pop	r31
    1252:	ef 91       	pop	r30
    1254:	bf 91       	pop	r27
    1256:	af 91       	pop	r26
    1258:	9f 91       	pop	r25
    125a:	8f 91       	pop	r24
    125c:	7f 91       	pop	r23
    125e:	6f 91       	pop	r22
    1260:	5f 91       	pop	r21
    1262:	4f 91       	pop	r20
    1264:	3f 91       	pop	r19
    1266:	2f 91       	pop	r18
    1268:	0f 90       	pop	r0
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	0f 90       	pop	r0
    126e:	1f 90       	pop	r1
    1270:	18 95       	reti

00001272 <__vector_77>:
    1272:	1f 92       	push	r1
    1274:	0f 92       	push	r0
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	0f 92       	push	r0
    127a:	11 24       	eor	r1, r1
    127c:	2f 93       	push	r18
    127e:	3f 93       	push	r19
    1280:	4f 93       	push	r20
    1282:	5f 93       	push	r21
    1284:	6f 93       	push	r22
    1286:	7f 93       	push	r23
    1288:	8f 93       	push	r24
    128a:	9f 93       	push	r25
    128c:	af 93       	push	r26
    128e:	bf 93       	push	r27
    1290:	ef 93       	push	r30
    1292:	ff 93       	push	r31
    1294:	e0 91 23 20 	lds	r30, 0x2023
    1298:	f0 91 24 20 	lds	r31, 0x2024
    129c:	30 97       	sbiw	r30, 0x00	; 0
    129e:	09 f0       	breq	.+2      	; 0x12a2 <__vector_77+0x30>
    12a0:	09 95       	icall
    12a2:	ff 91       	pop	r31
    12a4:	ef 91       	pop	r30
    12a6:	bf 91       	pop	r27
    12a8:	af 91       	pop	r26
    12aa:	9f 91       	pop	r25
    12ac:	8f 91       	pop	r24
    12ae:	7f 91       	pop	r23
    12b0:	6f 91       	pop	r22
    12b2:	5f 91       	pop	r21
    12b4:	4f 91       	pop	r20
    12b6:	3f 91       	pop	r19
    12b8:	2f 91       	pop	r18
    12ba:	0f 90       	pop	r0
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	0f 90       	pop	r0
    12c0:	1f 90       	pop	r1
    12c2:	18 95       	reti

000012c4 <__vector_78>:
    12c4:	1f 92       	push	r1
    12c6:	0f 92       	push	r0
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	0f 92       	push	r0
    12cc:	11 24       	eor	r1, r1
    12ce:	2f 93       	push	r18
    12d0:	3f 93       	push	r19
    12d2:	4f 93       	push	r20
    12d4:	5f 93       	push	r21
    12d6:	6f 93       	push	r22
    12d8:	7f 93       	push	r23
    12da:	8f 93       	push	r24
    12dc:	9f 93       	push	r25
    12de:	af 93       	push	r26
    12e0:	bf 93       	push	r27
    12e2:	ef 93       	push	r30
    12e4:	ff 93       	push	r31
    12e6:	e0 91 25 20 	lds	r30, 0x2025
    12ea:	f0 91 26 20 	lds	r31, 0x2026
    12ee:	30 97       	sbiw	r30, 0x00	; 0
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <__vector_78+0x30>
    12f2:	09 95       	icall
    12f4:	ff 91       	pop	r31
    12f6:	ef 91       	pop	r30
    12f8:	bf 91       	pop	r27
    12fa:	af 91       	pop	r26
    12fc:	9f 91       	pop	r25
    12fe:	8f 91       	pop	r24
    1300:	7f 91       	pop	r23
    1302:	6f 91       	pop	r22
    1304:	5f 91       	pop	r21
    1306:	4f 91       	pop	r20
    1308:	3f 91       	pop	r19
    130a:	2f 91       	pop	r18
    130c:	0f 90       	pop	r0
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	0f 90       	pop	r0
    1312:	1f 90       	pop	r1
    1314:	18 95       	reti

00001316 <__vector_79>:
    1316:	1f 92       	push	r1
    1318:	0f 92       	push	r0
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	0f 92       	push	r0
    131e:	11 24       	eor	r1, r1
    1320:	2f 93       	push	r18
    1322:	3f 93       	push	r19
    1324:	4f 93       	push	r20
    1326:	5f 93       	push	r21
    1328:	6f 93       	push	r22
    132a:	7f 93       	push	r23
    132c:	8f 93       	push	r24
    132e:	9f 93       	push	r25
    1330:	af 93       	push	r26
    1332:	bf 93       	push	r27
    1334:	ef 93       	push	r30
    1336:	ff 93       	push	r31
    1338:	e0 91 27 20 	lds	r30, 0x2027
    133c:	f0 91 28 20 	lds	r31, 0x2028
    1340:	30 97       	sbiw	r30, 0x00	; 0
    1342:	09 f0       	breq	.+2      	; 0x1346 <__vector_79+0x30>
    1344:	09 95       	icall
    1346:	ff 91       	pop	r31
    1348:	ef 91       	pop	r30
    134a:	bf 91       	pop	r27
    134c:	af 91       	pop	r26
    134e:	9f 91       	pop	r25
    1350:	8f 91       	pop	r24
    1352:	7f 91       	pop	r23
    1354:	6f 91       	pop	r22
    1356:	5f 91       	pop	r21
    1358:	4f 91       	pop	r20
    135a:	3f 91       	pop	r19
    135c:	2f 91       	pop	r18
    135e:	0f 90       	pop	r0
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	0f 90       	pop	r0
    1364:	1f 90       	pop	r1
    1366:	18 95       	reti

00001368 <__vector_80>:
    1368:	1f 92       	push	r1
    136a:	0f 92       	push	r0
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	0f 92       	push	r0
    1370:	11 24       	eor	r1, r1
    1372:	2f 93       	push	r18
    1374:	3f 93       	push	r19
    1376:	4f 93       	push	r20
    1378:	5f 93       	push	r21
    137a:	6f 93       	push	r22
    137c:	7f 93       	push	r23
    137e:	8f 93       	push	r24
    1380:	9f 93       	push	r25
    1382:	af 93       	push	r26
    1384:	bf 93       	push	r27
    1386:	ef 93       	push	r30
    1388:	ff 93       	push	r31
    138a:	e0 91 29 20 	lds	r30, 0x2029
    138e:	f0 91 2a 20 	lds	r31, 0x202A
    1392:	30 97       	sbiw	r30, 0x00	; 0
    1394:	09 f0       	breq	.+2      	; 0x1398 <__vector_80+0x30>
    1396:	09 95       	icall
    1398:	ff 91       	pop	r31
    139a:	ef 91       	pop	r30
    139c:	bf 91       	pop	r27
    139e:	af 91       	pop	r26
    13a0:	9f 91       	pop	r25
    13a2:	8f 91       	pop	r24
    13a4:	7f 91       	pop	r23
    13a6:	6f 91       	pop	r22
    13a8:	5f 91       	pop	r21
    13aa:	4f 91       	pop	r20
    13ac:	3f 91       	pop	r19
    13ae:	2f 91       	pop	r18
    13b0:	0f 90       	pop	r0
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	0f 90       	pop	r0
    13b6:	1f 90       	pop	r1
    13b8:	18 95       	reti

000013ba <__vector_81>:
    13ba:	1f 92       	push	r1
    13bc:	0f 92       	push	r0
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	0f 92       	push	r0
    13c2:	11 24       	eor	r1, r1
    13c4:	2f 93       	push	r18
    13c6:	3f 93       	push	r19
    13c8:	4f 93       	push	r20
    13ca:	5f 93       	push	r21
    13cc:	6f 93       	push	r22
    13ce:	7f 93       	push	r23
    13d0:	8f 93       	push	r24
    13d2:	9f 93       	push	r25
    13d4:	af 93       	push	r26
    13d6:	bf 93       	push	r27
    13d8:	ef 93       	push	r30
    13da:	ff 93       	push	r31
    13dc:	e0 91 2b 20 	lds	r30, 0x202B
    13e0:	f0 91 2c 20 	lds	r31, 0x202C
    13e4:	30 97       	sbiw	r30, 0x00	; 0
    13e6:	09 f0       	breq	.+2      	; 0x13ea <__vector_81+0x30>
    13e8:	09 95       	icall
    13ea:	ff 91       	pop	r31
    13ec:	ef 91       	pop	r30
    13ee:	bf 91       	pop	r27
    13f0:	af 91       	pop	r26
    13f2:	9f 91       	pop	r25
    13f4:	8f 91       	pop	r24
    13f6:	7f 91       	pop	r23
    13f8:	6f 91       	pop	r22
    13fa:	5f 91       	pop	r21
    13fc:	4f 91       	pop	r20
    13fe:	3f 91       	pop	r19
    1400:	2f 91       	pop	r18
    1402:	0f 90       	pop	r0
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	0f 90       	pop	r0
    1408:	1f 90       	pop	r1
    140a:	18 95       	reti

0000140c <__vector_82>:
    140c:	1f 92       	push	r1
    140e:	0f 92       	push	r0
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	0f 92       	push	r0
    1414:	11 24       	eor	r1, r1
    1416:	2f 93       	push	r18
    1418:	3f 93       	push	r19
    141a:	4f 93       	push	r20
    141c:	5f 93       	push	r21
    141e:	6f 93       	push	r22
    1420:	7f 93       	push	r23
    1422:	8f 93       	push	r24
    1424:	9f 93       	push	r25
    1426:	af 93       	push	r26
    1428:	bf 93       	push	r27
    142a:	ef 93       	push	r30
    142c:	ff 93       	push	r31
    142e:	e0 91 2d 20 	lds	r30, 0x202D
    1432:	f0 91 2e 20 	lds	r31, 0x202E
    1436:	30 97       	sbiw	r30, 0x00	; 0
    1438:	09 f0       	breq	.+2      	; 0x143c <__vector_82+0x30>
    143a:	09 95       	icall
    143c:	ff 91       	pop	r31
    143e:	ef 91       	pop	r30
    1440:	bf 91       	pop	r27
    1442:	af 91       	pop	r26
    1444:	9f 91       	pop	r25
    1446:	8f 91       	pop	r24
    1448:	7f 91       	pop	r23
    144a:	6f 91       	pop	r22
    144c:	5f 91       	pop	r21
    144e:	4f 91       	pop	r20
    1450:	3f 91       	pop	r19
    1452:	2f 91       	pop	r18
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	0f 90       	pop	r0
    145a:	1f 90       	pop	r1
    145c:	18 95       	reti

0000145e <__vector_83>:
    145e:	1f 92       	push	r1
    1460:	0f 92       	push	r0
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	0f 92       	push	r0
    1466:	11 24       	eor	r1, r1
    1468:	2f 93       	push	r18
    146a:	3f 93       	push	r19
    146c:	4f 93       	push	r20
    146e:	5f 93       	push	r21
    1470:	6f 93       	push	r22
    1472:	7f 93       	push	r23
    1474:	8f 93       	push	r24
    1476:	9f 93       	push	r25
    1478:	af 93       	push	r26
    147a:	bf 93       	push	r27
    147c:	ef 93       	push	r30
    147e:	ff 93       	push	r31
    1480:	e0 91 2f 20 	lds	r30, 0x202F
    1484:	f0 91 30 20 	lds	r31, 0x2030
    1488:	30 97       	sbiw	r30, 0x00	; 0
    148a:	09 f0       	breq	.+2      	; 0x148e <__vector_83+0x30>
    148c:	09 95       	icall
    148e:	ff 91       	pop	r31
    1490:	ef 91       	pop	r30
    1492:	bf 91       	pop	r27
    1494:	af 91       	pop	r26
    1496:	9f 91       	pop	r25
    1498:	8f 91       	pop	r24
    149a:	7f 91       	pop	r23
    149c:	6f 91       	pop	r22
    149e:	5f 91       	pop	r21
    14a0:	4f 91       	pop	r20
    14a2:	3f 91       	pop	r19
    14a4:	2f 91       	pop	r18
    14a6:	0f 90       	pop	r0
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	0f 90       	pop	r0
    14ac:	1f 90       	pop	r1
    14ae:	18 95       	reti

000014b0 <__vector_84>:
    14b0:	1f 92       	push	r1
    14b2:	0f 92       	push	r0
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	0f 92       	push	r0
    14b8:	11 24       	eor	r1, r1
    14ba:	2f 93       	push	r18
    14bc:	3f 93       	push	r19
    14be:	4f 93       	push	r20
    14c0:	5f 93       	push	r21
    14c2:	6f 93       	push	r22
    14c4:	7f 93       	push	r23
    14c6:	8f 93       	push	r24
    14c8:	9f 93       	push	r25
    14ca:	af 93       	push	r26
    14cc:	bf 93       	push	r27
    14ce:	ef 93       	push	r30
    14d0:	ff 93       	push	r31
    14d2:	e0 91 31 20 	lds	r30, 0x2031
    14d6:	f0 91 32 20 	lds	r31, 0x2032
    14da:	30 97       	sbiw	r30, 0x00	; 0
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <__vector_84+0x30>
    14de:	09 95       	icall
    14e0:	ff 91       	pop	r31
    14e2:	ef 91       	pop	r30
    14e4:	bf 91       	pop	r27
    14e6:	af 91       	pop	r26
    14e8:	9f 91       	pop	r25
    14ea:	8f 91       	pop	r24
    14ec:	7f 91       	pop	r23
    14ee:	6f 91       	pop	r22
    14f0:	5f 91       	pop	r21
    14f2:	4f 91       	pop	r20
    14f4:	3f 91       	pop	r19
    14f6:	2f 91       	pop	r18
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	0f 90       	pop	r0
    14fe:	1f 90       	pop	r1
    1500:	18 95       	reti

00001502 <__vector_85>:
    1502:	1f 92       	push	r1
    1504:	0f 92       	push	r0
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	0f 92       	push	r0
    150a:	11 24       	eor	r1, r1
    150c:	2f 93       	push	r18
    150e:	3f 93       	push	r19
    1510:	4f 93       	push	r20
    1512:	5f 93       	push	r21
    1514:	6f 93       	push	r22
    1516:	7f 93       	push	r23
    1518:	8f 93       	push	r24
    151a:	9f 93       	push	r25
    151c:	af 93       	push	r26
    151e:	bf 93       	push	r27
    1520:	ef 93       	push	r30
    1522:	ff 93       	push	r31
    1524:	e0 91 33 20 	lds	r30, 0x2033
    1528:	f0 91 34 20 	lds	r31, 0x2034
    152c:	30 97       	sbiw	r30, 0x00	; 0
    152e:	09 f0       	breq	.+2      	; 0x1532 <__vector_85+0x30>
    1530:	09 95       	icall
    1532:	ff 91       	pop	r31
    1534:	ef 91       	pop	r30
    1536:	bf 91       	pop	r27
    1538:	af 91       	pop	r26
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	7f 91       	pop	r23
    1540:	6f 91       	pop	r22
    1542:	5f 91       	pop	r21
    1544:	4f 91       	pop	r20
    1546:	3f 91       	pop	r19
    1548:	2f 91       	pop	r18
    154a:	0f 90       	pop	r0
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	0f 90       	pop	r0
    1550:	1f 90       	pop	r1
    1552:	18 95       	reti

00001554 <__vector_86>:
    1554:	1f 92       	push	r1
    1556:	0f 92       	push	r0
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	0f 92       	push	r0
    155c:	11 24       	eor	r1, r1
    155e:	2f 93       	push	r18
    1560:	3f 93       	push	r19
    1562:	4f 93       	push	r20
    1564:	5f 93       	push	r21
    1566:	6f 93       	push	r22
    1568:	7f 93       	push	r23
    156a:	8f 93       	push	r24
    156c:	9f 93       	push	r25
    156e:	af 93       	push	r26
    1570:	bf 93       	push	r27
    1572:	ef 93       	push	r30
    1574:	ff 93       	push	r31
    1576:	e0 91 35 20 	lds	r30, 0x2035
    157a:	f0 91 36 20 	lds	r31, 0x2036
    157e:	30 97       	sbiw	r30, 0x00	; 0
    1580:	09 f0       	breq	.+2      	; 0x1584 <__vector_86+0x30>
    1582:	09 95       	icall
    1584:	ff 91       	pop	r31
    1586:	ef 91       	pop	r30
    1588:	bf 91       	pop	r27
    158a:	af 91       	pop	r26
    158c:	9f 91       	pop	r25
    158e:	8f 91       	pop	r24
    1590:	7f 91       	pop	r23
    1592:	6f 91       	pop	r22
    1594:	5f 91       	pop	r21
    1596:	4f 91       	pop	r20
    1598:	3f 91       	pop	r19
    159a:	2f 91       	pop	r18
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	0f 90       	pop	r0
    15a2:	1f 90       	pop	r1
    15a4:	18 95       	reti

000015a6 <__vector_47>:
    15a6:	1f 92       	push	r1
    15a8:	0f 92       	push	r0
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	0f 92       	push	r0
    15ae:	11 24       	eor	r1, r1
    15b0:	2f 93       	push	r18
    15b2:	3f 93       	push	r19
    15b4:	4f 93       	push	r20
    15b6:	5f 93       	push	r21
    15b8:	6f 93       	push	r22
    15ba:	7f 93       	push	r23
    15bc:	8f 93       	push	r24
    15be:	9f 93       	push	r25
    15c0:	af 93       	push	r26
    15c2:	bf 93       	push	r27
    15c4:	ef 93       	push	r30
    15c6:	ff 93       	push	r31
    15c8:	e0 91 37 20 	lds	r30, 0x2037
    15cc:	f0 91 38 20 	lds	r31, 0x2038
    15d0:	30 97       	sbiw	r30, 0x00	; 0
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <__vector_47+0x30>
    15d4:	09 95       	icall
    15d6:	ff 91       	pop	r31
    15d8:	ef 91       	pop	r30
    15da:	bf 91       	pop	r27
    15dc:	af 91       	pop	r26
    15de:	9f 91       	pop	r25
    15e0:	8f 91       	pop	r24
    15e2:	7f 91       	pop	r23
    15e4:	6f 91       	pop	r22
    15e6:	5f 91       	pop	r21
    15e8:	4f 91       	pop	r20
    15ea:	3f 91       	pop	r19
    15ec:	2f 91       	pop	r18
    15ee:	0f 90       	pop	r0
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	0f 90       	pop	r0
    15f4:	1f 90       	pop	r1
    15f6:	18 95       	reti

000015f8 <__vector_48>:
    15f8:	1f 92       	push	r1
    15fa:	0f 92       	push	r0
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	0f 92       	push	r0
    1600:	11 24       	eor	r1, r1
    1602:	2f 93       	push	r18
    1604:	3f 93       	push	r19
    1606:	4f 93       	push	r20
    1608:	5f 93       	push	r21
    160a:	6f 93       	push	r22
    160c:	7f 93       	push	r23
    160e:	8f 93       	push	r24
    1610:	9f 93       	push	r25
    1612:	af 93       	push	r26
    1614:	bf 93       	push	r27
    1616:	ef 93       	push	r30
    1618:	ff 93       	push	r31
    161a:	e0 91 39 20 	lds	r30, 0x2039
    161e:	f0 91 3a 20 	lds	r31, 0x203A
    1622:	30 97       	sbiw	r30, 0x00	; 0
    1624:	09 f0       	breq	.+2      	; 0x1628 <__vector_48+0x30>
    1626:	09 95       	icall
    1628:	ff 91       	pop	r31
    162a:	ef 91       	pop	r30
    162c:	bf 91       	pop	r27
    162e:	af 91       	pop	r26
    1630:	9f 91       	pop	r25
    1632:	8f 91       	pop	r24
    1634:	7f 91       	pop	r23
    1636:	6f 91       	pop	r22
    1638:	5f 91       	pop	r21
    163a:	4f 91       	pop	r20
    163c:	3f 91       	pop	r19
    163e:	2f 91       	pop	r18
    1640:	0f 90       	pop	r0
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	0f 90       	pop	r0
    1646:	1f 90       	pop	r1
    1648:	18 95       	reti

0000164a <__vector_49>:
    164a:	1f 92       	push	r1
    164c:	0f 92       	push	r0
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	0f 92       	push	r0
    1652:	11 24       	eor	r1, r1
    1654:	2f 93       	push	r18
    1656:	3f 93       	push	r19
    1658:	4f 93       	push	r20
    165a:	5f 93       	push	r21
    165c:	6f 93       	push	r22
    165e:	7f 93       	push	r23
    1660:	8f 93       	push	r24
    1662:	9f 93       	push	r25
    1664:	af 93       	push	r26
    1666:	bf 93       	push	r27
    1668:	ef 93       	push	r30
    166a:	ff 93       	push	r31
    166c:	e0 91 3b 20 	lds	r30, 0x203B
    1670:	f0 91 3c 20 	lds	r31, 0x203C
    1674:	30 97       	sbiw	r30, 0x00	; 0
    1676:	09 f0       	breq	.+2      	; 0x167a <__vector_49+0x30>
    1678:	09 95       	icall
    167a:	ff 91       	pop	r31
    167c:	ef 91       	pop	r30
    167e:	bf 91       	pop	r27
    1680:	af 91       	pop	r26
    1682:	9f 91       	pop	r25
    1684:	8f 91       	pop	r24
    1686:	7f 91       	pop	r23
    1688:	6f 91       	pop	r22
    168a:	5f 91       	pop	r21
    168c:	4f 91       	pop	r20
    168e:	3f 91       	pop	r19
    1690:	2f 91       	pop	r18
    1692:	0f 90       	pop	r0
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	0f 90       	pop	r0
    1698:	1f 90       	pop	r1
    169a:	18 95       	reti

0000169c <__vector_50>:
    169c:	1f 92       	push	r1
    169e:	0f 92       	push	r0
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	0f 92       	push	r0
    16a4:	11 24       	eor	r1, r1
    16a6:	2f 93       	push	r18
    16a8:	3f 93       	push	r19
    16aa:	4f 93       	push	r20
    16ac:	5f 93       	push	r21
    16ae:	6f 93       	push	r22
    16b0:	7f 93       	push	r23
    16b2:	8f 93       	push	r24
    16b4:	9f 93       	push	r25
    16b6:	af 93       	push	r26
    16b8:	bf 93       	push	r27
    16ba:	ef 93       	push	r30
    16bc:	ff 93       	push	r31
    16be:	e0 91 3d 20 	lds	r30, 0x203D
    16c2:	f0 91 3e 20 	lds	r31, 0x203E
    16c6:	30 97       	sbiw	r30, 0x00	; 0
    16c8:	09 f0       	breq	.+2      	; 0x16cc <__vector_50+0x30>
    16ca:	09 95       	icall
    16cc:	ff 91       	pop	r31
    16ce:	ef 91       	pop	r30
    16d0:	bf 91       	pop	r27
    16d2:	af 91       	pop	r26
    16d4:	9f 91       	pop	r25
    16d6:	8f 91       	pop	r24
    16d8:	7f 91       	pop	r23
    16da:	6f 91       	pop	r22
    16dc:	5f 91       	pop	r21
    16de:	4f 91       	pop	r20
    16e0:	3f 91       	pop	r19
    16e2:	2f 91       	pop	r18
    16e4:	0f 90       	pop	r0
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	0f 90       	pop	r0
    16ea:	1f 90       	pop	r1
    16ec:	18 95       	reti

000016ee <__vector_51>:
    16ee:	1f 92       	push	r1
    16f0:	0f 92       	push	r0
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	0f 92       	push	r0
    16f6:	11 24       	eor	r1, r1
    16f8:	2f 93       	push	r18
    16fa:	3f 93       	push	r19
    16fc:	4f 93       	push	r20
    16fe:	5f 93       	push	r21
    1700:	6f 93       	push	r22
    1702:	7f 93       	push	r23
    1704:	8f 93       	push	r24
    1706:	9f 93       	push	r25
    1708:	af 93       	push	r26
    170a:	bf 93       	push	r27
    170c:	ef 93       	push	r30
    170e:	ff 93       	push	r31
    1710:	e0 91 3f 20 	lds	r30, 0x203F
    1714:	f0 91 40 20 	lds	r31, 0x2040
    1718:	30 97       	sbiw	r30, 0x00	; 0
    171a:	09 f0       	breq	.+2      	; 0x171e <__vector_51+0x30>
    171c:	09 95       	icall
    171e:	ff 91       	pop	r31
    1720:	ef 91       	pop	r30
    1722:	bf 91       	pop	r27
    1724:	af 91       	pop	r26
    1726:	9f 91       	pop	r25
    1728:	8f 91       	pop	r24
    172a:	7f 91       	pop	r23
    172c:	6f 91       	pop	r22
    172e:	5f 91       	pop	r21
    1730:	4f 91       	pop	r20
    1732:	3f 91       	pop	r19
    1734:	2f 91       	pop	r18
    1736:	0f 90       	pop	r0
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	0f 90       	pop	r0
    173c:	1f 90       	pop	r1
    173e:	18 95       	reti

00001740 <__vector_52>:
    1740:	1f 92       	push	r1
    1742:	0f 92       	push	r0
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	0f 92       	push	r0
    1748:	11 24       	eor	r1, r1
    174a:	2f 93       	push	r18
    174c:	3f 93       	push	r19
    174e:	4f 93       	push	r20
    1750:	5f 93       	push	r21
    1752:	6f 93       	push	r22
    1754:	7f 93       	push	r23
    1756:	8f 93       	push	r24
    1758:	9f 93       	push	r25
    175a:	af 93       	push	r26
    175c:	bf 93       	push	r27
    175e:	ef 93       	push	r30
    1760:	ff 93       	push	r31
    1762:	e0 91 41 20 	lds	r30, 0x2041
    1766:	f0 91 42 20 	lds	r31, 0x2042
    176a:	30 97       	sbiw	r30, 0x00	; 0
    176c:	09 f0       	breq	.+2      	; 0x1770 <__vector_52+0x30>
    176e:	09 95       	icall
    1770:	ff 91       	pop	r31
    1772:	ef 91       	pop	r30
    1774:	bf 91       	pop	r27
    1776:	af 91       	pop	r26
    1778:	9f 91       	pop	r25
    177a:	8f 91       	pop	r24
    177c:	7f 91       	pop	r23
    177e:	6f 91       	pop	r22
    1780:	5f 91       	pop	r21
    1782:	4f 91       	pop	r20
    1784:	3f 91       	pop	r19
    1786:	2f 91       	pop	r18
    1788:	0f 90       	pop	r0
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	0f 90       	pop	r0
    178e:	1f 90       	pop	r1
    1790:	18 95       	reti

00001792 <tc_enable>:
    1792:	cf 93       	push	r28
    1794:	cf b7       	in	r28, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	81 15       	cp	r24, r1
    179a:	28 e0       	ldi	r18, 0x08	; 8
    179c:	92 07       	cpc	r25, r18
    179e:	49 f4       	brne	.+18     	; 0x17b2 <tc_enable+0x20>
    17a0:	61 e0       	ldi	r22, 0x01	; 1
    17a2:	83 e0       	ldi	r24, 0x03	; 3
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	9d da       	rcall	.-2758   	; 0xce2 <sysclk_enable_module>
    17a8:	64 e0       	ldi	r22, 0x04	; 4
    17aa:	83 e0       	ldi	r24, 0x03	; 3
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	99 da       	rcall	.-2766   	; 0xce2 <sysclk_enable_module>
    17b0:	35 c0       	rjmp	.+106    	; 0x181c <tc_enable+0x8a>
    17b2:	80 34       	cpi	r24, 0x40	; 64
    17b4:	28 e0       	ldi	r18, 0x08	; 8
    17b6:	92 07       	cpc	r25, r18
    17b8:	49 f4       	brne	.+18     	; 0x17cc <tc_enable+0x3a>
    17ba:	62 e0       	ldi	r22, 0x02	; 2
    17bc:	83 e0       	ldi	r24, 0x03	; 3
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	90 da       	rcall	.-2784   	; 0xce2 <sysclk_enable_module>
    17c2:	64 e0       	ldi	r22, 0x04	; 4
    17c4:	83 e0       	ldi	r24, 0x03	; 3
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	8c da       	rcall	.-2792   	; 0xce2 <sysclk_enable_module>
    17ca:	28 c0       	rjmp	.+80     	; 0x181c <tc_enable+0x8a>
    17cc:	81 15       	cp	r24, r1
    17ce:	29 e0       	ldi	r18, 0x09	; 9
    17d0:	92 07       	cpc	r25, r18
    17d2:	49 f4       	brne	.+18     	; 0x17e6 <tc_enable+0x54>
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	84 e0       	ldi	r24, 0x04	; 4
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	83 da       	rcall	.-2810   	; 0xce2 <sysclk_enable_module>
    17dc:	64 e0       	ldi	r22, 0x04	; 4
    17de:	84 e0       	ldi	r24, 0x04	; 4
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	7f da       	rcall	.-2818   	; 0xce2 <sysclk_enable_module>
    17e4:	1b c0       	rjmp	.+54     	; 0x181c <tc_enable+0x8a>
    17e6:	80 34       	cpi	r24, 0x40	; 64
    17e8:	29 e0       	ldi	r18, 0x09	; 9
    17ea:	92 07       	cpc	r25, r18
    17ec:	49 f4       	brne	.+18     	; 0x1800 <tc_enable+0x6e>
    17ee:	62 e0       	ldi	r22, 0x02	; 2
    17f0:	84 e0       	ldi	r24, 0x04	; 4
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	76 da       	rcall	.-2836   	; 0xce2 <sysclk_enable_module>
    17f6:	64 e0       	ldi	r22, 0x04	; 4
    17f8:	84 e0       	ldi	r24, 0x04	; 4
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	72 da       	rcall	.-2844   	; 0xce2 <sysclk_enable_module>
    17fe:	0e c0       	rjmp	.+28     	; 0x181c <tc_enable+0x8a>
    1800:	81 15       	cp	r24, r1
    1802:	9a 40       	sbci	r25, 0x0A	; 10
    1804:	49 f4       	brne	.+18     	; 0x1818 <tc_enable+0x86>
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	85 e0       	ldi	r24, 0x05	; 5
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	6a da       	rcall	.-2860   	; 0xce2 <sysclk_enable_module>
    180e:	64 e0       	ldi	r22, 0x04	; 4
    1810:	85 e0       	ldi	r24, 0x05	; 5
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	66 da       	rcall	.-2868   	; 0xce2 <sysclk_enable_module>
    1816:	02 c0       	rjmp	.+4      	; 0x181c <tc_enable+0x8a>
    1818:	cf bf       	out	0x3f, r28	; 63
    181a:	09 c0       	rjmp	.+18     	; 0x182e <tc_enable+0x9c>
    181c:	8f b7       	in	r24, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	ec e4       	ldi	r30, 0x4C	; 76
    1822:	f0 e2       	ldi	r31, 0x20	; 32
    1824:	90 81       	ld	r25, Z
    1826:	9f 5f       	subi	r25, 0xFF	; 255
    1828:	90 83       	st	Z, r25
    182a:	8f bf       	out	0x3f, r24	; 63
    182c:	cf bf       	out	0x3f, r28	; 63
    182e:	cf 91       	pop	r28
    1830:	08 95       	ret

00001832 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1832:	81 15       	cp	r24, r1
    1834:	28 e0       	ldi	r18, 0x08	; 8
    1836:	92 07       	cpc	r25, r18
    1838:	29 f4       	brne	.+10     	; 0x1844 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    183a:	60 93 0f 20 	sts	0x200F, r22
    183e:	70 93 10 20 	sts	0x2010, r23
    1842:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1844:	80 34       	cpi	r24, 0x40	; 64
    1846:	28 e0       	ldi	r18, 0x08	; 8
    1848:	92 07       	cpc	r25, r18
    184a:	29 f4       	brne	.+10     	; 0x1856 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    184c:	60 93 1b 20 	sts	0x201B, r22
    1850:	70 93 1c 20 	sts	0x201C, r23
    1854:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1856:	81 15       	cp	r24, r1
    1858:	29 e0       	ldi	r18, 0x09	; 9
    185a:	92 07       	cpc	r25, r18
    185c:	29 f4       	brne	.+10     	; 0x1868 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    185e:	60 93 23 20 	sts	0x2023, r22
    1862:	70 93 24 20 	sts	0x2024, r23
    1866:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1868:	80 34       	cpi	r24, 0x40	; 64
    186a:	29 e0       	ldi	r18, 0x09	; 9
    186c:	92 07       	cpc	r25, r18
    186e:	29 f4       	brne	.+10     	; 0x187a <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    1870:	60 93 2f 20 	sts	0x202F, r22
    1874:	70 93 30 20 	sts	0x2030, r23
    1878:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    187a:	81 15       	cp	r24, r1
    187c:	9a 40       	sbci	r25, 0x0A	; 10
    187e:	21 f4       	brne	.+8      	; 0x1888 <tc_set_overflow_interrupt_callback+0x56>
		tc_tce0_ovf_callback = callback;
    1880:	60 93 37 20 	sts	0x2037, r22
    1884:	70 93 38 20 	sts	0x2038, r23
    1888:	08 95       	ret

0000188a <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    188a:	cf 92       	push	r12
    188c:	df 92       	push	r13
    188e:	ef 92       	push	r14
    1890:	ff 92       	push	r15
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    1898:	6b 01       	movw	r12, r22
    189a:	e1 2c       	mov	r14, r1
    189c:	f1 2c       	mov	r15, r1
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	78 e4       	ldi	r23, 0x48	; 72
    18a2:	88 ee       	ldi	r24, 0xE8	; 232
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	a7 01       	movw	r20, r14
    18a8:	96 01       	movw	r18, r12
    18aa:	1d d7       	rcall	.+3642   	; 0x26e6 <__udivmodsi4>
    18ac:	ca 01       	movw	r24, r20
    18ae:	b9 01       	movw	r22, r18
    18b0:	2f ef       	ldi	r18, 0xFF	; 255
    18b2:	3f ef       	ldi	r19, 0xFF	; 255
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	16 d7       	rcall	.+3628   	; 0x26e6 <__udivmodsi4>
	if (smallest_div < 1) {
    18ba:	21 15       	cp	r18, r1
    18bc:	31 05       	cpc	r19, r1
    18be:	39 f4       	brne	.+14     	; 0x18ce <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	8e 83       	std	Y+6, r24	; 0x06
    18c6:	9f 83       	std	Y+7, r25	; 0x07

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    18c8:	21 e0       	ldi	r18, 0x01	; 1
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	39 c0       	rjmp	.+114    	; 0x1940 <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    18ce:	22 30       	cpi	r18, 0x02	; 2
    18d0:	31 05       	cpc	r19, r1
    18d2:	38 f4       	brcc	.+14     	; 0x18e2 <pwm_set_frequency+0x58>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    18d4:	82 e0       	ldi	r24, 0x02	; 2
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	8e 83       	std	Y+6, r24	; 0x06
    18da:	9f 83       	std	Y+7, r25	; 0x07
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    18dc:	22 e0       	ldi	r18, 0x02	; 2
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	2f c0       	rjmp	.+94     	; 0x1940 <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    18e2:	24 30       	cpi	r18, 0x04	; 4
    18e4:	31 05       	cpc	r19, r1
    18e6:	38 f4       	brcc	.+14     	; 0x18f6 <pwm_set_frequency+0x6c>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    18e8:	83 e0       	ldi	r24, 0x03	; 3
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	8e 83       	std	Y+6, r24	; 0x06
    18ee:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    18f0:	24 e0       	ldi	r18, 0x04	; 4
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	25 c0       	rjmp	.+74     	; 0x1940 <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    18f6:	28 30       	cpi	r18, 0x08	; 8
    18f8:	31 05       	cpc	r19, r1
    18fa:	38 f4       	brcc	.+14     	; 0x190a <pwm_set_frequency+0x80>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    18fc:	84 e0       	ldi	r24, 0x04	; 4
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	8e 83       	std	Y+6, r24	; 0x06
    1902:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    1904:	28 e0       	ldi	r18, 0x08	; 8
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	1b c0       	rjmp	.+54     	; 0x1940 <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    190a:	20 34       	cpi	r18, 0x40	; 64
    190c:	31 05       	cpc	r19, r1
    190e:	38 f4       	brcc	.+14     	; 0x191e <pwm_set_frequency+0x94>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    1910:	85 e0       	ldi	r24, 0x05	; 5
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	8e 83       	std	Y+6, r24	; 0x06
    1916:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    1918:	20 e4       	ldi	r18, 0x40	; 64
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	11 c0       	rjmp	.+34     	; 0x1940 <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    191e:	2f 3f       	cpi	r18, 0xFF	; 255
    1920:	31 05       	cpc	r19, r1
    1922:	09 f0       	breq	.+2      	; 0x1926 <pwm_set_frequency+0x9c>
    1924:	38 f4       	brcc	.+14     	; 0x1934 <pwm_set_frequency+0xaa>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    1926:	86 e0       	ldi	r24, 0x06	; 6
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	8e 83       	std	Y+6, r24	; 0x06
    192c:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	31 e0       	ldi	r19, 0x01	; 1
    1932:	06 c0       	rjmp	.+12     	; 0x1940 <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    1934:	87 e0       	ldi	r24, 0x07	; 7
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	8e 83       	std	Y+6, r24	; 0x06
    193a:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	78 e4       	ldi	r23, 0x48	; 72
    1948:	88 ee       	ldi	r24, 0xE8	; 232
    194a:	91 e0       	ldi	r25, 0x01	; 1
    194c:	cc d6       	rcall	.+3480   	; 0x26e6 <__udivmodsi4>
    194e:	ca 01       	movw	r24, r20
    1950:	b9 01       	movw	r22, r18
    1952:	a7 01       	movw	r20, r14
    1954:	96 01       	movw	r18, r12
    1956:	c7 d6       	rcall	.+3470   	; 0x26e6 <__udivmodsi4>
    1958:	28 87       	std	Y+8, r18	; 0x08
    195a:	39 87       	std	Y+9, r19	; 0x09

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    195c:	24 36       	cpi	r18, 0x64	; 100
    195e:	31 05       	cpc	r19, r1
    1960:	20 f4       	brcc	.+8      	; 0x196a <pwm_set_frequency+0xe0>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    1962:	1e 82       	std	Y+6, r1	; 0x06
    1964:	1f 82       	std	Y+7, r1	; 0x07
		config->period = 0;
    1966:	18 86       	std	Y+8, r1	; 0x08
    1968:	19 86       	std	Y+9, r1	; 0x09
		Assert(false);
	}
}
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	08 95       	ret

00001978 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	ec 01       	movw	r28, r24
    1982:	89 01       	movw	r16, r18
	/* Number of channels for this TC */
	uint8_t num_chan = 0;
	UNUSED(num_chan);

	/* Set TC and correct I/O pin to output */
	switch (tc) {
    1984:	62 30       	cpi	r22, 0x02	; 2
    1986:	71 05       	cpc	r23, r1
    1988:	e1 f1       	breq	.+120    	; 0x1a02 <pwm_init+0x8a>
    198a:	40 f4       	brcc	.+16     	; 0x199c <pwm_init+0x24>
    198c:	61 15       	cp	r22, r1
    198e:	71 05       	cpc	r23, r1
    1990:	71 f0       	breq	.+28     	; 0x19ae <pwm_init+0x36>
    1992:	61 30       	cpi	r22, 0x01	; 1
    1994:	71 05       	cpc	r23, r1
    1996:	09 f0       	breq	.+2      	; 0x199a <pwm_init+0x22>
    1998:	72 c0       	rjmp	.+228    	; 0x1a7e <pwm_init+0x106>
    199a:	1e c0       	rjmp	.+60     	; 0x19d8 <pwm_init+0x60>
    199c:	63 30       	cpi	r22, 0x03	; 3
    199e:	71 05       	cpc	r23, r1
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <pwm_init+0x2c>
    19a2:	44 c0       	rjmp	.+136    	; 0x1a2c <pwm_init+0xb4>
    19a4:	64 30       	cpi	r22, 0x04	; 4
    19a6:	71 05       	cpc	r23, r1
    19a8:	09 f0       	breq	.+2      	; 0x19ac <pwm_init+0x34>
    19aa:	69 c0       	rjmp	.+210    	; 0x1a7e <pwm_init+0x106>
    19ac:	54 c0       	rjmp	.+168    	; 0x1a56 <pwm_init+0xde>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	98 e0       	ldi	r25, 0x08	; 8
    19b2:	88 83       	st	Y, r24
    19b4:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    19b6:	e0 e4       	ldi	r30, 0x40	; 64
    19b8:	f6 e0       	ldi	r31, 0x06	; 6
    19ba:	a0 81       	ld	r26, Z
    19bc:	9a 01       	movw	r18, r20
    19be:	21 50       	subi	r18, 0x01	; 1
    19c0:	31 09       	sbc	r19, r1
    19c2:	61 e0       	ldi	r22, 0x01	; 1
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	cb 01       	movw	r24, r22
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <pwm_init+0x56>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	2a 95       	dec	r18
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <pwm_init+0x52>
    19d2:	8a 2b       	or	r24, r26
    19d4:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    19d6:	53 c0       	rjmp	.+166    	; 0x1a7e <pwm_init+0x106>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    19d8:	80 e4       	ldi	r24, 0x40	; 64
    19da:	98 e0       	ldi	r25, 0x08	; 8
    19dc:	88 83       	st	Y, r24
    19de:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    19e0:	e0 e4       	ldi	r30, 0x40	; 64
    19e2:	f6 e0       	ldi	r31, 0x06	; 6
    19e4:	a0 81       	ld	r26, Z
    19e6:	9a 01       	movw	r18, r20
    19e8:	2d 5f       	subi	r18, 0xFD	; 253
    19ea:	3f 4f       	sbci	r19, 0xFF	; 255
    19ec:	61 e0       	ldi	r22, 0x01	; 1
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	cb 01       	movw	r24, r22
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <pwm_init+0x80>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	2a 95       	dec	r18
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <pwm_init+0x7c>
    19fc:	8a 2b       	or	r24, r26
    19fe:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    1a00:	3e c0       	rjmp	.+124    	; 0x1a7e <pwm_init+0x106>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	99 e0       	ldi	r25, 0x09	; 9
    1a06:	88 83       	st	Y, r24
    1a08:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    1a0a:	e0 e6       	ldi	r30, 0x60	; 96
    1a0c:	f6 e0       	ldi	r31, 0x06	; 6
    1a0e:	a0 81       	ld	r26, Z
    1a10:	9a 01       	movw	r18, r20
    1a12:	21 50       	subi	r18, 0x01	; 1
    1a14:	31 09       	sbc	r19, r1
    1a16:	61 e0       	ldi	r22, 0x01	; 1
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <pwm_init+0xaa>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	2a 95       	dec	r18
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <pwm_init+0xa6>
    1a26:	8a 2b       	or	r24, r26
    1a28:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    1a2a:	29 c0       	rjmp	.+82     	; 0x1a7e <pwm_init+0x106>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    1a2c:	80 e4       	ldi	r24, 0x40	; 64
    1a2e:	99 e0       	ldi	r25, 0x09	; 9
    1a30:	88 83       	st	Y, r24
    1a32:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    1a34:	e0 e6       	ldi	r30, 0x60	; 96
    1a36:	f6 e0       	ldi	r31, 0x06	; 6
    1a38:	a0 81       	ld	r26, Z
    1a3a:	9a 01       	movw	r18, r20
    1a3c:	2d 5f       	subi	r18, 0xFD	; 253
    1a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a40:	61 e0       	ldi	r22, 0x01	; 1
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	cb 01       	movw	r24, r22
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <pwm_init+0xd4>
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	2a 95       	dec	r18
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <pwm_init+0xd0>
    1a50:	8a 2b       	or	r24, r26
    1a52:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    1a54:	14 c0       	rjmp	.+40     	; 0x1a7e <pwm_init+0x106>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	9a e0       	ldi	r25, 0x0A	; 10
    1a5a:	88 83       	st	Y, r24
    1a5c:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    1a5e:	e0 e8       	ldi	r30, 0x80	; 128
    1a60:	f6 e0       	ldi	r31, 0x06	; 6
    1a62:	a0 81       	ld	r26, Z
    1a64:	9a 01       	movw	r18, r20
    1a66:	21 50       	subi	r18, 0x01	; 1
    1a68:	31 09       	sbc	r19, r1
    1a6a:	61 e0       	ldi	r22, 0x01	; 1
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	cb 01       	movw	r24, r22
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <pwm_init+0xfe>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	2a 95       	dec	r18
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <pwm_init+0xfa>
    1a7a:	8a 2b       	or	r24, r26
    1a7c:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    1a7e:	4a 83       	std	Y+2, r20	; 0x02
    1a80:	5b 83       	std	Y+3, r21	; 0x03

	/* Set the correct cc_mask */
	switch (channel) {
    1a82:	42 30       	cpi	r20, 0x02	; 2
    1a84:	51 05       	cpc	r21, r1
    1a86:	89 f0       	breq	.+34     	; 0x1aaa <pwm_init+0x132>
    1a88:	20 f4       	brcc	.+8      	; 0x1a92 <pwm_init+0x11a>
    1a8a:	41 30       	cpi	r20, 0x01	; 1
    1a8c:	51 05       	cpc	r21, r1
    1a8e:	d9 f4       	brne	.+54     	; 0x1ac6 <pwm_init+0x14e>
    1a90:	07 c0       	rjmp	.+14     	; 0x1aa0 <pwm_init+0x128>
    1a92:	43 30       	cpi	r20, 0x03	; 3
    1a94:	51 05       	cpc	r21, r1
    1a96:	71 f0       	breq	.+28     	; 0x1ab4 <pwm_init+0x13c>
    1a98:	44 30       	cpi	r20, 0x04	; 4
    1a9a:	51 05       	cpc	r21, r1
    1a9c:	a1 f4       	brne	.+40     	; 0x1ac6 <pwm_init+0x14e>
    1a9e:	0f c0       	rjmp	.+30     	; 0x1abe <pwm_init+0x146>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    1aa0:	80 e1       	ldi	r24, 0x10	; 16
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	8c 83       	std	Y+4, r24	; 0x04
    1aa6:	9d 83       	std	Y+5, r25	; 0x05
		break;
    1aa8:	0e c0       	rjmp	.+28     	; 0x1ac6 <pwm_init+0x14e>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    1aaa:	80 e2       	ldi	r24, 0x20	; 32
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	8c 83       	std	Y+4, r24	; 0x04
    1ab0:	9d 83       	std	Y+5, r25	; 0x05
		break;
    1ab2:	09 c0       	rjmp	.+18     	; 0x1ac6 <pwm_init+0x14e>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    1ab4:	80 e4       	ldi	r24, 0x40	; 64
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	8c 83       	std	Y+4, r24	; 0x04
    1aba:	9d 83       	std	Y+5, r25	; 0x05
		break;
    1abc:	04 c0       	rjmp	.+8      	; 0x1ac6 <pwm_init+0x14e>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    1abe:	80 e8       	ldi	r24, 0x80	; 128
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	8c 83       	std	Y+4, r24	; 0x04
    1ac4:	9d 83       	std	Y+5, r25	; 0x05
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    1ac6:	88 81       	ld	r24, Y
    1ac8:	99 81       	ldd	r25, Y+1	; 0x01
    1aca:	63 de       	rcall	.-826    	; 0x1792 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    1acc:	e8 81       	ld	r30, Y
    1ace:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1ad0:	81 81       	ldd	r24, Z+1	; 0x01
    1ad2:	88 7f       	andi	r24, 0xF8	; 248
    1ad4:	83 60       	ori	r24, 0x03	; 3
    1ad6:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    1ad8:	18 86       	std	Y+8, r1	; 0x08
    1ada:	19 86       	std	Y+9, r1	; 0x09
	config->clk_sel = PWM_CLK_OFF;
    1adc:	1e 82       	std	Y+6, r1	; 0x06
    1ade:	1f 82       	std	Y+7, r1	; 0x07
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    1ae0:	e8 81       	ld	r30, Y
    1ae2:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1ae4:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1ae6:	80 7f       	andi	r24, 0xF0	; 240
    1ae8:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    1aea:	b8 01       	movw	r22, r16
    1aec:	ce 01       	movw	r24, r28
    1aee:	cd de       	rcall	.-614    	; 0x188a <pwm_set_frequency>
}
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	1f 91       	pop	r17
    1af6:	0f 91       	pop	r16
    1af8:	08 95       	ret

00001afa <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	ec 01       	movw	r28, r24
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
			(uint16_t)(((uint32_t)config->period *
    1b00:	a8 85       	ldd	r26, Y+8	; 0x08
    1b02:	b9 85       	ldd	r27, Y+9	; 0x09
    1b04:	26 2f       	mov	r18, r22
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	10 d6       	rcall	.+3104   	; 0x272a <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    1b0a:	24 e6       	ldi	r18, 0x64	; 100
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e0       	ldi	r20, 0x00	; 0
    1b10:	50 e0       	ldi	r21, 0x00	; 0
    1b12:	e9 d5       	rcall	.+3026   	; 0x26e6 <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	9b 81       	ldd	r25, Y+3	; 0x03
    1b18:	e8 81       	ld	r30, Y
    1b1a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    1b1c:	e6 fd       	sbrc	r30, 6
    1b1e:	19 c0       	rjmp	.+50     	; 0x1b52 <pwm_start+0x58>
		switch (channel_index) {
    1b20:	82 30       	cpi	r24, 0x02	; 2
    1b22:	91 05       	cpc	r25, r1
    1b24:	69 f0       	breq	.+26     	; 0x1b40 <pwm_start+0x46>
    1b26:	18 f4       	brcc	.+6      	; 0x1b2e <pwm_start+0x34>
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f4       	brne	.+60     	; 0x1b68 <pwm_start+0x6e>
    1b2c:	06 c0       	rjmp	.+12     	; 0x1b3a <pwm_start+0x40>
    1b2e:	83 30       	cpi	r24, 0x03	; 3
    1b30:	91 05       	cpc	r25, r1
    1b32:	49 f0       	breq	.+18     	; 0x1b46 <pwm_start+0x4c>
    1b34:	04 97       	sbiw	r24, 0x04	; 4
    1b36:	c1 f4       	brne	.+48     	; 0x1b68 <pwm_start+0x6e>
    1b38:	09 c0       	rjmp	.+18     	; 0x1b4c <pwm_start+0x52>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    1b3a:	20 af       	std	Z+56, r18	; 0x38
    1b3c:	31 af       	std	Z+57, r19	; 0x39
    1b3e:	14 c0       	rjmp	.+40     	; 0x1b68 <pwm_start+0x6e>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    1b40:	22 af       	std	Z+58, r18	; 0x3a
    1b42:	33 af       	std	Z+59, r19	; 0x3b
    1b44:	11 c0       	rjmp	.+34     	; 0x1b68 <pwm_start+0x6e>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    1b46:	24 af       	std	Z+60, r18	; 0x3c
    1b48:	35 af       	std	Z+61, r19	; 0x3d
    1b4a:	0e c0       	rjmp	.+28     	; 0x1b68 <pwm_start+0x6e>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    1b4c:	26 af       	std	Z+62, r18	; 0x3e
    1b4e:	37 af       	std	Z+63, r19	; 0x3f
    1b50:	0b c0       	rjmp	.+22     	; 0x1b68 <pwm_start+0x6e>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	91 05       	cpc	r25, r1
    1b56:	19 f0       	breq	.+6      	; 0x1b5e <pwm_start+0x64>
    1b58:	02 97       	sbiw	r24, 0x02	; 2
    1b5a:	31 f4       	brne	.+12     	; 0x1b68 <pwm_start+0x6e>
    1b5c:	03 c0       	rjmp	.+6      	; 0x1b64 <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    1b5e:	20 af       	std	Z+56, r18	; 0x38
    1b60:	31 af       	std	Z+57, r19	; 0x39
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <pwm_start+0x6e>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    1b64:	22 af       	std	Z+58, r18	; 0x3a
    1b66:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    1b68:	88 85       	ldd	r24, Y+8	; 0x08
    1b6a:	99 85       	ldd	r25, Y+9	; 0x09
    1b6c:	e8 81       	ld	r30, Y
    1b6e:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    1b70:	86 a3       	std	Z+38, r24	; 0x26
    1b72:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    1b74:	8c 81       	ldd	r24, Y+4	; 0x04
    1b76:	9d 81       	ldd	r25, Y+5	; 0x05
    1b78:	e8 81       	ld	r30, Y
    1b7a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    1b7c:	e6 fd       	sbrc	r30, 6
    1b7e:	04 c0       	rjmp	.+8      	; 0x1b88 <pwm_start+0x8e>
		((TC0_t *)tc)->CTRLB |= enablemask;
    1b80:	91 81       	ldd	r25, Z+1	; 0x01
    1b82:	89 2b       	or	r24, r25
    1b84:	81 83       	std	Z+1, r24	; 0x01
    1b86:	05 c0       	rjmp	.+10     	; 0x1b92 <pwm_start+0x98>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    1b88:	21 81       	ldd	r18, Z+1	; 0x01
    1b8a:	80 73       	andi	r24, 0x30	; 48
    1b8c:	99 27       	eor	r25, r25
    1b8e:	82 2b       	or	r24, r18
    1b90:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    1b92:	e8 81       	ld	r30, Y
    1b94:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1b96:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1b98:	80 7f       	andi	r24, 0xF0	; 240
    1b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9c:	89 2b       	or	r24, r25
    1b9e:	80 83       	st	Z, r24
}
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	08 95       	ret

00001ba6 <computePID>:
	}
}

int lasterror = 0;
int computePID(int setPoint, int realValue)
{
    1ba6:	af 92       	push	r10
    1ba8:	bf 92       	push	r11
    1baa:	cf 92       	push	r12
    1bac:	df 92       	push	r13
    1bae:	ef 92       	push	r14
    1bb0:	ff 92       	push	r15
    1bb2:	0f 93       	push	r16
    1bb4:	1f 93       	push	r17
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
	int error = setPoint - realValue;
    1bba:	ec 01       	movw	r28, r24
    1bbc:	c6 1b       	sub	r28, r22
    1bbe:	d7 0b       	sbc	r29, r23
	float PValue = error * Kp;
    1bc0:	be 01       	movw	r22, r28
    1bc2:	88 27       	eor	r24, r24
    1bc4:	77 fd       	sbrc	r23, 7
    1bc6:	80 95       	com	r24
    1bc8:	98 2f       	mov	r25, r24
    1bca:	0e 94 06 04 	call	0x80c	; 0x80c <__floatsisf>
    1bce:	6b 01       	movw	r12, r22
    1bd0:	7c 01       	movw	r14, r24
    1bd2:	20 91 8f 20 	lds	r18, 0x208F
    1bd6:	30 91 90 20 	lds	r19, 0x2090
    1bda:	40 91 91 20 	lds	r20, 0x2091
    1bde:	50 91 92 20 	lds	r21, 0x2092
    1be2:	0e 94 cc 02 	call	0x598	; 0x598 <__mulsf3>
    1be6:	a6 2e       	mov	r10, r22
    1be8:	b7 2e       	mov	r11, r23
    1bea:	08 2f       	mov	r16, r24
    1bec:	19 2f       	mov	r17, r25
	ISum += error * Ki;
    1bee:	20 91 53 20 	lds	r18, 0x2053
    1bf2:	30 91 54 20 	lds	r19, 0x2054
    1bf6:	40 91 55 20 	lds	r20, 0x2055
    1bfa:	50 91 56 20 	lds	r21, 0x2056
    1bfe:	c7 01       	movw	r24, r14
    1c00:	b6 01       	movw	r22, r12
    1c02:	0e 94 cc 02 	call	0x598	; 0x598 <__mulsf3>
    1c06:	20 91 47 20 	lds	r18, 0x2047
    1c0a:	30 91 48 20 	lds	r19, 0x2048
    1c0e:	40 91 49 20 	lds	r20, 0x2049
    1c12:	50 91 4a 20 	lds	r21, 0x204A
    1c16:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__addsf3>
    1c1a:	26 2f       	mov	r18, r22
    1c1c:	37 2f       	mov	r19, r23
    1c1e:	46 2f       	mov	r20, r22
    1c20:	57 2f       	mov	r21, r23
    1c22:	68 2f       	mov	r22, r24
    1c24:	79 2f       	mov	r23, r25
    1c26:	40 93 47 20 	sts	0x2047, r20
    1c2a:	50 93 48 20 	sts	0x2048, r21
    1c2e:	60 93 49 20 	sts	0x2049, r22
    1c32:	70 93 4a 20 	sts	0x204A, r23
	float DValue = (error - lasterror) * Kd;
	float result = (PValue + ISum - DValue) * 25;
    1c36:	48 2f       	mov	r20, r24
    1c38:	59 2f       	mov	r21, r25
    1c3a:	6a 2d       	mov	r22, r10
    1c3c:	7b 2d       	mov	r23, r11
    1c3e:	80 2f       	mov	r24, r16
    1c40:	91 2f       	mov	r25, r17
    1c42:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__addsf3>
    1c46:	6b 01       	movw	r12, r22
    1c48:	7c 01       	movw	r14, r24
int computePID(int setPoint, int realValue)
{
	int error = setPoint - realValue;
	float PValue = error * Kp;
	ISum += error * Ki;
	float DValue = (error - lasterror) * Kd;
    1c4a:	80 91 43 20 	lds	r24, 0x2043
    1c4e:	90 91 44 20 	lds	r25, 0x2044
    1c52:	be 01       	movw	r22, r28
    1c54:	68 1b       	sub	r22, r24
    1c56:	79 0b       	sbc	r23, r25
    1c58:	88 27       	eor	r24, r24
    1c5a:	77 fd       	sbrc	r23, 7
    1c5c:	80 95       	com	r24
    1c5e:	98 2f       	mov	r25, r24
    1c60:	0e 94 06 04 	call	0x80c	; 0x80c <__floatsisf>
    1c64:	20 91 73 20 	lds	r18, 0x2073
    1c68:	30 91 74 20 	lds	r19, 0x2074
    1c6c:	40 91 75 20 	lds	r20, 0x2075
    1c70:	50 91 76 20 	lds	r21, 0x2076
    1c74:	0e 94 cc 02 	call	0x598	; 0x598 <__mulsf3>
    1c78:	9b 01       	movw	r18, r22
    1c7a:	ac 01       	movw	r20, r24
	float result = (PValue + ISum - DValue) * 25;
    1c7c:	c7 01       	movw	r24, r14
    1c7e:	b6 01       	movw	r22, r12
    1c80:	0e 94 a0 02 	call	0x540	; 0x540 <__subsf3>
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	48 ec       	ldi	r20, 0xC8	; 200
    1c8a:	51 e4       	ldi	r21, 0x41	; 65
    1c8c:	0e 94 cc 02 	call	0x598	; 0x598 <__mulsf3>
    1c90:	e6 2e       	mov	r14, r22
    1c92:	f7 2e       	mov	r15, r23
    1c94:	08 2f       	mov	r16, r24
    1c96:	19 2f       	mov	r17, r25
    1c98:	a6 2e       	mov	r10, r22
    1c9a:	b7 2e       	mov	r11, r23
    1c9c:	c8 2e       	mov	r12, r24
    1c9e:	d9 2e       	mov	r13, r25
	lasterror = error;
    1ca0:	c0 93 43 20 	sts	0x2043, r28
    1ca4:	d0 93 44 20 	sts	0x2044, r29
	if (result > 300)
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	46 e9       	ldi	r20, 0x96	; 150
    1cae:	53 e4       	ldi	r21, 0x43	; 67
    1cb0:	0e 94 ae 03 	call	0x75c	; 0x75c <__gtsf2>
    1cb4:	18 16       	cp	r1, r24
    1cb6:	6c f0       	brlt	.+26     	; 0x1cd2 <computePID+0x12c>
	{
		result = 300;
	}
	if (result < -300)
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	46 e9       	ldi	r20, 0x96	; 150
    1cbe:	53 ec       	ldi	r21, 0xC3	; 195
    1cc0:	6e 2d       	mov	r22, r14
    1cc2:	7f 2d       	mov	r23, r15
    1cc4:	80 2f       	mov	r24, r16
    1cc6:	91 2f       	mov	r25, r17
    1cc8:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__ltsf2>
    1ccc:	88 23       	and	r24, r24
    1cce:	64 f0       	brlt	.+24     	; 0x1ce8 <computePID+0x142>
    1cd0:	15 c0       	rjmp	.+42     	; 0x1cfc <computePID+0x156>
	float DValue = (error - lasterror) * Kd;
	float result = (PValue + ISum - DValue) * 25;
	lasterror = error;
	if (result > 300)
	{
		result = 300;
    1cd2:	a1 2c       	mov	r10, r1
    1cd4:	b1 2c       	mov	r11, r1
    1cd6:	0f 2e       	mov	r0, r31
    1cd8:	f6 e9       	ldi	r31, 0x96	; 150
    1cda:	cf 2e       	mov	r12, r31
    1cdc:	f0 2d       	mov	r31, r0
    1cde:	0f 2e       	mov	r0, r31
    1ce0:	f3 e4       	ldi	r31, 0x43	; 67
    1ce2:	df 2e       	mov	r13, r31
    1ce4:	f0 2d       	mov	r31, r0
    1ce6:	0a c0       	rjmp	.+20     	; 0x1cfc <computePID+0x156>
	}
	if (result < -300)
	{
		result = -300;
    1ce8:	a1 2c       	mov	r10, r1
    1cea:	b1 2c       	mov	r11, r1
    1cec:	0f 2e       	mov	r0, r31
    1cee:	f6 e9       	ldi	r31, 0x96	; 150
    1cf0:	cf 2e       	mov	r12, r31
    1cf2:	f0 2d       	mov	r31, r0
    1cf4:	0f 2e       	mov	r0, r31
    1cf6:	f3 ec       	ldi	r31, 0xC3	; 195
    1cf8:	df 2e       	mov	r13, r31
    1cfa:	f0 2d       	mov	r31, r0
	}
	return result;
    1cfc:	6a 2d       	mov	r22, r10
    1cfe:	7b 2d       	mov	r23, r11
    1d00:	8c 2d       	mov	r24, r12
    1d02:	9d 2d       	mov	r25, r13
    1d04:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fixsfsi>
}
    1d08:	86 2f       	mov	r24, r22
    1d0a:	97 2f       	mov	r25, r23
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	1f 91       	pop	r17
    1d12:	0f 91       	pop	r16
    1d14:	ff 90       	pop	r15
    1d16:	ef 90       	pop	r14
    1d18:	df 90       	pop	r13
    1d1a:	cf 90       	pop	r12
    1d1c:	bf 90       	pop	r11
    1d1e:	af 90       	pop	r10
    1d20:	08 95       	ret

00001d22 <tc_init>:

void tc_init()
{
	tc_enable(&TCC0);
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	98 e0       	ldi	r25, 0x08	; 8
    1d26:	35 dd       	rcall	.-1430   	; 0x1792 <tc_enable>
	tc_set_overflow_interrupt_callback(&TCC0, mainLoop);
    1d28:	68 ea       	ldi	r22, 0xA8	; 168
    1d2a:	72 e1       	ldi	r23, 0x12	; 18
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	98 e0       	ldi	r25, 0x08	; 8
    1d30:	80 dd       	rcall	.-1280   	; 0x1832 <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1d32:	e0 e0       	ldi	r30, 0x00	; 0
    1d34:	f8 e0       	ldi	r31, 0x08	; 8
    1d36:	81 81       	ldd	r24, Z+1	; 0x01
    1d38:	88 7f       	andi	r24, 0xF8	; 248
    1d3a:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	9d e7       	ldi	r25, 0x7D	; 125
    1d40:	86 a3       	std	Z+38, r24	; 0x26
    1d42:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    1d44:	86 81       	ldd	r24, Z+6	; 0x06
    1d46:	8c 7f       	andi	r24, 0xFC	; 252
    1d48:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    1d4a:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    1d4c:	81 60       	ori	r24, 0x01	; 1
    1d4e:	86 83       	std	Z+6, r24	; 0x06
	tc_set_wgm(&TCC0, TC_WG_NORMAL);
	tc_write_period(&TCC0,32000); // 1KHz main loop
	tc_set_overflow_interrupt_level(&TCC0, TC_INT_LVL_LO);
	cpu_irq_enable();
    1d50:	78 94       	sei
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1d52:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1d54:	80 7f       	andi	r24, 0xF0	; 240
    1d56:	81 60       	ori	r24, 0x01	; 1
    1d58:	80 83       	st	Z, r24
    1d5a:	08 95       	ret

00001d5c <init_motors>:

}

void init_motors()
{
	pwm_init(&pwm_cfg[0], PWM_TCE0, PWM_CH_A, 200); /* PE0 */
    1d5c:	28 ec       	ldi	r18, 0xC8	; 200
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	41 e0       	ldi	r20, 0x01	; 1
    1d62:	50 e0       	ldi	r21, 0x00	; 0
    1d64:	64 e0       	ldi	r22, 0x04	; 4
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	83 e9       	ldi	r24, 0x93	; 147
    1d6a:	90 e2       	ldi	r25, 0x20	; 32
    1d6c:	05 de       	rcall	.-1014   	; 0x1978 <pwm_init>
	pwm_init(&pwm_cfg[1], PWM_TCE0, PWM_CH_B, 200); /* PE1 */
    1d6e:	28 ec       	ldi	r18, 0xC8	; 200
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	42 e0       	ldi	r20, 0x02	; 2
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	64 e0       	ldi	r22, 0x04	; 4
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	8d e9       	ldi	r24, 0x9D	; 157
    1d7c:	90 e2       	ldi	r25, 0x20	; 32
    1d7e:	fc cd       	rjmp	.-1032   	; 0x1978 <pwm_init>

00001d80 <set_motorB>:
	set_motorB(dir_B,speed_B);
}

void set_motorB(int dir, int speed)
{
	if (dir == -1)
    1d80:	8f 3f       	cpi	r24, 0xFF	; 255
    1d82:	2f ef       	ldi	r18, 0xFF	; 255
    1d84:	92 07       	cpc	r25, r18
    1d86:	49 f4       	brne	.+18     	; 0x1d9a <set_motorB+0x1a>
	{
		PORTE.OUT |= PIN2_bm;
    1d88:	e0 e8       	ldi	r30, 0x80	; 128
    1d8a:	f6 e0       	ldi	r31, 0x06	; 6
    1d8c:	84 81       	ldd	r24, Z+4	; 0x04
    1d8e:	84 60       	ori	r24, 0x04	; 4
    1d90:	84 83       	std	Z+4, r24	; 0x04
		PORTE.OUT &= ~PIN3_bm;
    1d92:	84 81       	ldd	r24, Z+4	; 0x04
    1d94:	87 7f       	andi	r24, 0xF7	; 247
    1d96:	84 83       	std	Z+4, r24	; 0x04
    1d98:	13 c0       	rjmp	.+38     	; 0x1dc0 <set_motorB+0x40>
	}
	else if(dir == 1)
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	49 f4       	brne	.+18     	; 0x1db0 <set_motorB+0x30>
	{
		PORTE.OUT &= ~PIN2_bm;
    1d9e:	e0 e8       	ldi	r30, 0x80	; 128
    1da0:	f6 e0       	ldi	r31, 0x06	; 6
    1da2:	84 81       	ldd	r24, Z+4	; 0x04
    1da4:	8b 7f       	andi	r24, 0xFB	; 251
    1da6:	84 83       	std	Z+4, r24	; 0x04
		PORTE.OUT |= PIN3_bm;
    1da8:	84 81       	ldd	r24, Z+4	; 0x04
    1daa:	88 60       	ori	r24, 0x08	; 8
    1dac:	84 83       	std	Z+4, r24	; 0x04
    1dae:	08 c0       	rjmp	.+16     	; 0x1dc0 <set_motorB+0x40>
	}
	else
	{
		PORTE.OUT &= ~PIN2_bm;
    1db0:	e0 e8       	ldi	r30, 0x80	; 128
    1db2:	f6 e0       	ldi	r31, 0x06	; 6
    1db4:	84 81       	ldd	r24, Z+4	; 0x04
    1db6:	8b 7f       	andi	r24, 0xFB	; 251
    1db8:	84 83       	std	Z+4, r24	; 0x04
		PORTE.OUT &= ~PIN3_bm;
    1dba:	84 81       	ldd	r24, Z+4	; 0x04
    1dbc:	87 7f       	andi	r24, 0xF7	; 247
    1dbe:	84 83       	std	Z+4, r24	; 0x04
	}
	pwm_start(&pwm_cfg[0], speed);
    1dc0:	83 e9       	ldi	r24, 0x93	; 147
    1dc2:	90 e2       	ldi	r25, 0x20	; 32
    1dc4:	9a ce       	rjmp	.-716    	; 0x1afa <pwm_start>

00001dc6 <set_motorA>:
}

void set_motorA(int dir, int speed)
{
	if (dir == 1)
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	91 05       	cpc	r25, r1
    1dca:	49 f4       	brne	.+18     	; 0x1dde <set_motorA+0x18>
	{
		PORTR.OUT |= PIN0_bm;
    1dcc:	e0 ee       	ldi	r30, 0xE0	; 224
    1dce:	f7 e0       	ldi	r31, 0x07	; 7
    1dd0:	84 81       	ldd	r24, Z+4	; 0x04
    1dd2:	81 60       	ori	r24, 0x01	; 1
    1dd4:	84 83       	std	Z+4, r24	; 0x04
		PORTR.OUT &= ~PIN1_bm;
    1dd6:	84 81       	ldd	r24, Z+4	; 0x04
    1dd8:	8d 7f       	andi	r24, 0xFD	; 253
    1dda:	84 83       	std	Z+4, r24	; 0x04
    1ddc:	13 c0       	rjmp	.+38     	; 0x1e04 <set_motorA+0x3e>
	}
	else if(dir == -1)
    1dde:	01 96       	adiw	r24, 0x01	; 1
    1de0:	49 f4       	brne	.+18     	; 0x1df4 <set_motorA+0x2e>
	{
		PORTR.OUT &= ~PIN0_bm;
    1de2:	e0 ee       	ldi	r30, 0xE0	; 224
    1de4:	f7 e0       	ldi	r31, 0x07	; 7
    1de6:	84 81       	ldd	r24, Z+4	; 0x04
    1de8:	8e 7f       	andi	r24, 0xFE	; 254
    1dea:	84 83       	std	Z+4, r24	; 0x04
		PORTR.OUT |= PIN1_bm;
    1dec:	84 81       	ldd	r24, Z+4	; 0x04
    1dee:	82 60       	ori	r24, 0x02	; 2
    1df0:	84 83       	std	Z+4, r24	; 0x04
    1df2:	08 c0       	rjmp	.+16     	; 0x1e04 <set_motorA+0x3e>
	}
	else
	{
		PORTR.OUT &= ~PIN0_bm;
    1df4:	e0 ee       	ldi	r30, 0xE0	; 224
    1df6:	f7 e0       	ldi	r31, 0x07	; 7
    1df8:	84 81       	ldd	r24, Z+4	; 0x04
    1dfa:	8e 7f       	andi	r24, 0xFE	; 254
    1dfc:	84 83       	std	Z+4, r24	; 0x04
		PORTR.OUT &= ~PIN1_bm;
    1dfe:	84 81       	ldd	r24, Z+4	; 0x04
    1e00:	8d 7f       	andi	r24, 0xFD	; 253
    1e02:	84 83       	std	Z+4, r24	; 0x04
	}
	pwm_start(&pwm_cfg[1], speed);
    1e04:	8d e9       	ldi	r24, 0x9D	; 157
    1e06:	90 e2       	ldi	r25, 0x20	; 32
    1e08:	78 ce       	rjmp	.-784    	; 0x1afa <pwm_start>

00001e0a <set_motors>:
	pwm_init(&pwm_cfg[0], PWM_TCE0, PWM_CH_A, 200); /* PE0 */
	pwm_init(&pwm_cfg[1], PWM_TCE0, PWM_CH_B, 200); /* PE1 */
}

void set_motors(int speed,int turn)
{
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	9c 01       	movw	r18, r24
	int speed_A=speed,speed_B=speed,dir_A=1,dir_B=1;
	if (turn >= 0)
    1e14:	77 23       	and	r23, r23
    1e16:	0c f4       	brge	.+2      	; 0x1e1a <set_motors+0x10>
    1e18:	3e c0       	rjmp	.+124    	; 0x1e96 <set_motors+0x8c>
			dir_A = 1;
			dir_B = 1;
		} 
		else
		*/
		 if (turn <= 100)
    1e1a:	65 36       	cpi	r22, 0x65	; 101
    1e1c:	71 05       	cpc	r23, r1
    1e1e:	a4 f4       	brge	.+40     	; 0x1e48 <set_motors+0x3e>
		{
			//turn -= 100;
			speed_A = speed - speed * turn / 100;
    1e20:	26 9f       	mul	r18, r22
    1e22:	c0 01       	movw	r24, r0
    1e24:	27 9f       	mul	r18, r23
    1e26:	90 0d       	add	r25, r0
    1e28:	36 9f       	mul	r19, r22
    1e2a:	90 0d       	add	r25, r0
    1e2c:	11 24       	eor	r1, r1
    1e2e:	64 e6       	ldi	r22, 0x64	; 100
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	46 d4       	rcall	.+2188   	; 0x26c0 <__divmodhi4>
    1e34:	c9 01       	movw	r24, r18
    1e36:	86 1b       	sub	r24, r22
    1e38:	97 0b       	sbc	r25, r23
    1e3a:	bc 01       	movw	r22, r24
			speed_B = speed;
    1e3c:	89 01       	movw	r16, r18
			dir_A = 1;
			dir_B = 1;
    1e3e:	c1 e0       	ldi	r28, 0x01	; 1
    1e40:	d0 e0       	ldi	r29, 0x00	; 0
		 if (turn <= 100)
		{
			//turn -= 100;
			speed_A = speed - speed * turn / 100;
			speed_B = speed;
			dir_A = 1;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	6f c0       	rjmp	.+222    	; 0x1f26 <set_motors+0x11c>
			dir_B = 1;
		}
		else if(turn <= 200)
    1e48:	69 3c       	cpi	r22, 0xC9	; 201
    1e4a:	71 05       	cpc	r23, r1
    1e4c:	94 f4       	brge	.+36     	; 0x1e72 <set_motors+0x68>
		{
			turn -= 100;
    1e4e:	64 56       	subi	r22, 0x64	; 100
    1e50:	71 09       	sbc	r23, r1
			speed_A = speed * turn / 100;
    1e52:	26 9f       	mul	r18, r22
    1e54:	c0 01       	movw	r24, r0
    1e56:	27 9f       	mul	r18, r23
    1e58:	90 0d       	add	r25, r0
    1e5a:	36 9f       	mul	r19, r22
    1e5c:	90 0d       	add	r25, r0
    1e5e:	11 24       	eor	r1, r1
    1e60:	64 e6       	ldi	r22, 0x64	; 100
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	2d d4       	rcall	.+2138   	; 0x26c0 <__divmodhi4>
			speed_B = speed;
    1e66:	89 01       	movw	r16, r18
			dir_A = 0;
			dir_B = 1;
    1e68:	c1 e0       	ldi	r28, 0x01	; 1
    1e6a:	d0 e0       	ldi	r29, 0x00	; 0
		else if(turn <= 200)
		{
			turn -= 100;
			speed_A = speed * turn / 100;
			speed_B = speed;
			dir_A = 0;
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	5a c0       	rjmp	.+180    	; 0x1f26 <set_motors+0x11c>
			dir_B = 1;
		}
		else
		{
			turn -= 200;
    1e72:	68 5c       	subi	r22, 0xC8	; 200
    1e74:	71 09       	sbc	r23, r1
			speed_A = speed * turn / 100;
    1e76:	26 9f       	mul	r18, r22
    1e78:	c0 01       	movw	r24, r0
    1e7a:	27 9f       	mul	r18, r23
    1e7c:	90 0d       	add	r25, r0
    1e7e:	36 9f       	mul	r19, r22
    1e80:	90 0d       	add	r25, r0
    1e82:	11 24       	eor	r1, r1
    1e84:	64 e6       	ldi	r22, 0x64	; 100
    1e86:	70 e0       	ldi	r23, 0x00	; 0
    1e88:	1b d4       	rcall	.+2102   	; 0x26c0 <__divmodhi4>
			speed_B = speed;
    1e8a:	89 01       	movw	r16, r18
			dir_A = -1;
			dir_B = 1;
    1e8c:	c1 e0       	ldi	r28, 0x01	; 1
    1e8e:	d0 e0       	ldi	r29, 0x00	; 0
		else
		{
			turn -= 200;
			speed_A = speed * turn / 100;
			speed_B = speed;
			dir_A = -1;
    1e90:	8f ef       	ldi	r24, 0xFF	; 255
    1e92:	9f ef       	ldi	r25, 0xFF	; 255
    1e94:	48 c0       	rjmp	.+144    	; 0x1f26 <set_motors+0x11c>
			dir_A = 1;
			dir_B = 1;
		} 
		else
		*/ 
		if (-100 <= turn)
    1e96:	6c 39       	cpi	r22, 0x9C	; 156
    1e98:	9f ef       	ldi	r25, 0xFF	; 255
    1e9a:	79 07       	cpc	r23, r25
    1e9c:	9c f0       	brlt	.+38     	; 0x1ec4 <set_motors+0xba>
		{
			//turn += 100;
			speed_A = speed;
			speed_B = speed + speed * turn / 100;
    1e9e:	26 9f       	mul	r18, r22
    1ea0:	c0 01       	movw	r24, r0
    1ea2:	27 9f       	mul	r18, r23
    1ea4:	90 0d       	add	r25, r0
    1ea6:	36 9f       	mul	r19, r22
    1ea8:	90 0d       	add	r25, r0
    1eaa:	11 24       	eor	r1, r1
    1eac:	64 e6       	ldi	r22, 0x64	; 100
    1eae:	70 e0       	ldi	r23, 0x00	; 0
    1eb0:	07 d4       	rcall	.+2062   	; 0x26c0 <__divmodhi4>
    1eb2:	8b 01       	movw	r16, r22
    1eb4:	02 0f       	add	r16, r18
    1eb6:	13 1f       	adc	r17, r19
		else
		*/ 
		if (-100 <= turn)
		{
			//turn += 100;
			speed_A = speed;
    1eb8:	b9 01       	movw	r22, r18
			speed_B = speed + speed * turn / 100;
			dir_A = 1;
			dir_B = 1;
    1eba:	c1 e0       	ldi	r28, 0x01	; 1
    1ebc:	d0 e0       	ldi	r29, 0x00	; 0
		if (-100 <= turn)
		{
			//turn += 100;
			speed_A = speed;
			speed_B = speed + speed * turn / 100;
			dir_A = 1;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	31 c0       	rjmp	.+98     	; 0x1f26 <set_motors+0x11c>
			dir_B = 1;
		}
		else if (-200 <= turn)
    1ec4:	68 33       	cpi	r22, 0x38	; 56
    1ec6:	8f ef       	ldi	r24, 0xFF	; 255
    1ec8:	78 07       	cpc	r23, r24
    1eca:	bc f0       	brlt	.+46     	; 0x1efa <set_motors+0xf0>
		{
			turn += 100;
			speed_A = speed;
			speed_B = - speed * turn / 100;
    1ecc:	44 27       	eor	r20, r20
    1ece:	55 27       	eor	r21, r21
    1ed0:	42 1b       	sub	r20, r18
    1ed2:	53 0b       	sbc	r21, r19
			dir_A = 1;
			dir_B = 1;
		}
		else if (-200 <= turn)
		{
			turn += 100;
    1ed4:	6c 59       	subi	r22, 0x9C	; 156
    1ed6:	7f 4f       	sbci	r23, 0xFF	; 255
			speed_A = speed;
			speed_B = - speed * turn / 100;
    1ed8:	46 9f       	mul	r20, r22
    1eda:	c0 01       	movw	r24, r0
    1edc:	47 9f       	mul	r20, r23
    1ede:	90 0d       	add	r25, r0
    1ee0:	56 9f       	mul	r21, r22
    1ee2:	90 0d       	add	r25, r0
    1ee4:	11 24       	eor	r1, r1
    1ee6:	64 e6       	ldi	r22, 0x64	; 100
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	ea d3       	rcall	.+2004   	; 0x26c0 <__divmodhi4>
    1eec:	8b 01       	movw	r16, r22
			dir_B = 1;
		}
		else if (-200 <= turn)
		{
			turn += 100;
			speed_A = speed;
    1eee:	b9 01       	movw	r22, r18
			speed_B = - speed * turn / 100;
			dir_A = 1;
			dir_B = 0;
    1ef0:	c0 e0       	ldi	r28, 0x00	; 0
    1ef2:	d0 e0       	ldi	r29, 0x00	; 0
		else if (-200 <= turn)
		{
			turn += 100;
			speed_A = speed;
			speed_B = - speed * turn / 100;
			dir_A = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	16 c0       	rjmp	.+44     	; 0x1f26 <set_motors+0x11c>
		}
		else
		{
			turn += 200;
			speed_A = speed;
			speed_B = - speed * turn / 100;
    1efa:	44 27       	eor	r20, r20
    1efc:	55 27       	eor	r21, r21
    1efe:	42 1b       	sub	r20, r18
    1f00:	53 0b       	sbc	r21, r19
			dir_A = 1;
			dir_B = 0;
		}
		else
		{
			turn += 200;
    1f02:	68 53       	subi	r22, 0x38	; 56
    1f04:	7f 4f       	sbci	r23, 0xFF	; 255
			speed_A = speed;
			speed_B = - speed * turn / 100;
    1f06:	46 9f       	mul	r20, r22
    1f08:	c0 01       	movw	r24, r0
    1f0a:	47 9f       	mul	r20, r23
    1f0c:	90 0d       	add	r25, r0
    1f0e:	56 9f       	mul	r21, r22
    1f10:	90 0d       	add	r25, r0
    1f12:	11 24       	eor	r1, r1
    1f14:	64 e6       	ldi	r22, 0x64	; 100
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	d3 d3       	rcall	.+1958   	; 0x26c0 <__divmodhi4>
    1f1a:	8b 01       	movw	r16, r22
			dir_B = 0;
		}
		else
		{
			turn += 200;
			speed_A = speed;
    1f1c:	b9 01       	movw	r22, r18
			speed_B = - speed * turn / 100;
			dir_A = 1;
			dir_B = -1;
    1f1e:	cf ef       	ldi	r28, 0xFF	; 255
    1f20:	df ef       	ldi	r29, 0xFF	; 255
		else
		{
			turn += 200;
			speed_A = speed;
			speed_B = - speed * turn / 100;
			dir_A = 1;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
			dir_B = -1;
		}
	}
	set_motorA(dir_A,speed_A);
    1f26:	4f df       	rcall	.-354    	; 0x1dc6 <set_motorA>
	set_motorB(dir_B,speed_B);
    1f28:	b8 01       	movw	r22, r16
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	29 df       	rcall	.-430    	; 0x1d80 <set_motorB>
}
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	08 95       	ret

00001f38 <read_adc>:
	}
	pwm_start(&pwm_cfg[1], speed);
}

uint16_t read_adc(int port)
{
    1f38:	0f 93       	push	r16
    1f3a:	1f 93       	push	r17
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    1f40:	00 d0       	rcall	.+0      	; 0x1f42 <read_adc+0xa>
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <read_adc+0xc>
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	8c 01       	movw	r16, r24
	struct adc_channel_config adcch_conf;
	uint16_t result;
	
	adcch_read_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    1f4a:	ae 01       	movw	r20, r28
    1f4c:	4f 5f       	subi	r20, 0xFF	; 255
    1f4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f50:	61 e0       	ldi	r22, 0x01	; 1
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	92 e0       	ldi	r25, 0x02	; 2
    1f56:	0e 94 55 07 	call	0xeaa	; 0xeaa <adcch_read_configuration>
 */
static inline void adcch_set_input(struct adc_channel_config *ch_conf,
		enum adcch_positive_input pos, enum adcch_negative_input neg,
		uint8_t gain)
{
	if (pos >= ADCCH_POS_TEMPSENSE) {
    1f5a:	00 31       	cpi	r16, 0x10	; 16
    1f5c:	11 05       	cpc	r17, r1
    1f5e:	38 f0       	brcs	.+14     	; 0x1f6e <read_adc+0x36>
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    1f60:	19 82       	std	Y+1, r1	; 0x01
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    1f62:	00 51       	subi	r16, 0x10	; 16
    1f64:	00 0f       	add	r16, r16
    1f66:	00 0f       	add	r16, r16
    1f68:	00 0f       	add	r16, r16
    1f6a:	0a 83       	std	Y+2, r16	; 0x02
    1f6c:	07 c0       	rjmp	.+14     	; 0x1f7c <read_adc+0x44>
		 * gain is enabled. To avoid unnecessary current consumption,
		 * do not enable gainstage for unity gain unless user explicitly
		 * specifies it with the ADCCH_FORCE_1X_GAINSTAGE macro.
		 */
		if (gain == 1) {
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    1f6e:	82 e0       	ldi	r24, 0x02	; 2
    1f70:	89 83       	std	Y+1, r24	; 0x01
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    1f72:	00 0f       	add	r16, r16
    1f74:	00 0f       	add	r16, r16
    1f76:	00 0f       	add	r16, r16
    1f78:	07 60       	ori	r16, 0x07	; 7
    1f7a:	0a 83       	std	Y+2, r16	; 0x02
	
	
	adcch_set_input(&adcch_conf, port, ADCCH_NEG_INTERNAL_GND, 1);
	
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    1f7c:	ae 01       	movw	r20, r28
    1f7e:	4f 5f       	subi	r20, 0xFF	; 255
    1f80:	5f 4f       	sbci	r21, 0xFF	; 255
    1f82:	61 e0       	ldi	r22, 0x01	; 1
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	92 e0       	ldi	r25, 0x02	; 2
    1f88:	0e 94 1c 07 	call	0xe38	; 0xe38 <adcch_write_configuration>
	
	adc_enable(&MY_ADC);
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	92 e0       	ldi	r25, 0x02	; 2
    1f90:	0e 94 a5 06 	call	0xd4a	; 0xd4a <adc_enable>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1f94:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1f96:	f8 94       	cli
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    1f98:	e0 e0       	ldi	r30, 0x00	; 0
    1f9a:	f2 e0       	ldi	r31, 0x02	; 2
    1f9c:	90 81       	ld	r25, Z
    1f9e:	94 60       	ori	r25, 0x04	; 4
    1fa0:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1fa2:	8f bf       	out	0x3f, r24	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    1fa4:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    1fa6:	80 ff       	sbrs	r24, 0
    1fa8:	fd cf       	rjmp	.-6      	; 0x1fa4 <read_adc+0x6c>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    1faa:	e0 e0       	ldi	r30, 0x00	; 0
    1fac:	f2 e0       	ldi	r31, 0x02	; 2
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	86 83       	std	Z+6, r24	; 0x06

	adc_start_conversion(&MY_ADC, MY_ADC_CH);
	adc_wait_for_interrupt_flag(&MY_ADC, MY_ADC_CH);

	result = adc_get_result(&MY_ADC, MY_ADC_CH);
    1fb2:	24 a1       	ldd	r18, Z+36	; 0x24
    1fb4:	35 a1       	ldd	r19, Z+37	; 0x25
	
	return result;
}
    1fb6:	82 2f       	mov	r24, r18
    1fb8:	93 2f       	mov	r25, r19
    1fba:	24 96       	adiw	r28, 0x04	; 4
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	de bf       	out	0x3e, r29	; 62
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	1f 91       	pop	r17
    1fc6:	0f 91       	pop	r16
    1fc8:	08 95       	ret

00001fca <read_sensor>:
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
	
	read_adc(0);
}
uint8_t read_sensor(int sensor)
{
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	ec 01       	movw	r28, r24
	read_adc(sensor);
    1fd0:	b3 df       	rcall	.-154    	; 0x1f38 <read_adc>
	int read_value = read_adc(sensor);
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	b1 df       	rcall	.-158    	; 0x1f38 <read_adc>
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	39 2f       	mov	r19, r25
	if (read_value > sensorsMax[sensor])
    1fda:	fe 01       	movw	r30, r28
    1fdc:	ee 0f       	add	r30, r30
    1fde:	ff 1f       	adc	r31, r31
    1fe0:	e9 58       	subi	r30, 0x89	; 137
    1fe2:	ff 4d       	sbci	r31, 0xDF	; 223
    1fe4:	80 81       	ld	r24, Z
    1fe6:	91 81       	ldd	r25, Z+1	; 0x01
    1fe8:	82 17       	cp	r24, r18
    1fea:	93 07       	cpc	r25, r19
    1fec:	3c f4       	brge	.+14     	; 0x1ffc <read_sensor+0x32>
	{
		sensorsMax[sensor] = read_value;
    1fee:	fe 01       	movw	r30, r28
    1ff0:	ee 0f       	add	r30, r30
    1ff2:	ff 1f       	adc	r31, r31
    1ff4:	e9 58       	subi	r30, 0x89	; 137
    1ff6:	ff 4d       	sbci	r31, 0xDF	; 223
    1ff8:	20 83       	st	Z, r18
    1ffa:	31 83       	std	Z+1, r19	; 0x01
	}
	if (read_value < sensorsMin[sensor])
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 1f       	adc	r31, r31
    2002:	e5 5a       	subi	r30, 0xA5	; 165
    2004:	ff 4d       	sbci	r31, 0xDF	; 223
    2006:	80 81       	ld	r24, Z
    2008:	91 81       	ldd	r25, Z+1	; 0x01
    200a:	28 17       	cp	r18, r24
    200c:	39 07       	cpc	r19, r25
    200e:	3c f4       	brge	.+14     	; 0x201e <read_sensor+0x54>
	{
		sensorsMin[sensor] = read_value;
    2010:	fe 01       	movw	r30, r28
    2012:	ee 0f       	add	r30, r30
    2014:	ff 1f       	adc	r31, r31
    2016:	e5 5a       	subi	r30, 0xA5	; 165
    2018:	ff 4d       	sbci	r31, 0xDF	; 223
    201a:	20 83       	st	Z, r18
    201c:	31 83       	std	Z+1, r19	; 0x01
	}
	int middleVal = (sensorsMax[sensor] + sensorsMin[sensor])/2;
    201e:	cc 0f       	add	r28, r28
    2020:	dd 1f       	adc	r29, r29
    2022:	fe 01       	movw	r30, r28
    2024:	e9 58       	subi	r30, 0x89	; 137
    2026:	ff 4d       	sbci	r31, 0xDF	; 223
    2028:	c5 5a       	subi	r28, 0xA5	; 165
    202a:	df 4d       	sbci	r29, 0xDF	; 223
    202c:	40 81       	ld	r20, Z
    202e:	51 81       	ldd	r21, Z+1	; 0x01
    2030:	88 81       	ld	r24, Y
    2032:	99 81       	ldd	r25, Y+1	; 0x01
    2034:	84 0f       	add	r24, r20
    2036:	95 1f       	adc	r25, r21
    2038:	99 23       	and	r25, r25
    203a:	0c f4       	brge	.+2      	; 0x203e <read_sensor+0x74>
    203c:	01 96       	adiw	r24, 0x01	; 1
    203e:	ac 01       	movw	r20, r24
    2040:	55 95       	asr	r21
    2042:	47 95       	ror	r20
	if (read_value > middleVal)
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	42 17       	cp	r20, r18
    2048:	53 07       	cpc	r21, r19
    204a:	0c f0       	brlt	.+2      	; 0x204e <read_sensor+0x84>
    204c:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	08 95       	ret

00002054 <sensors_init>:

void sensors_init()
{
    2054:	e7 e7       	ldi	r30, 0x77	; 119
    2056:	f0 e2       	ldi	r31, 0x20	; 32
    2058:	ab e5       	ldi	r26, 0x5B	; 91
    205a:	b0 e2       	ldi	r27, 0x20	; 32
	{
		return 0;
	}
}

void sensors_init()
    205c:	2f e8       	ldi	r18, 0x8F	; 143
    205e:	30 e2       	ldi	r19, 0x20	; 32
{
	for (int i=0;i<12;i++)
	{
		sensorsMax[i] = 0;
		sensorsMin[i] = 4000;
    2060:	80 ea       	ldi	r24, 0xA0	; 160
    2062:	9f e0       	ldi	r25, 0x0F	; 15

void sensors_init()
{
	for (int i=0;i<12;i++)
	{
		sensorsMax[i] = 0;
    2064:	11 92       	st	Z+, r1
    2066:	11 92       	st	Z+, r1
		sensorsMin[i] = 4000;
    2068:	8d 93       	st	X+, r24
    206a:	9d 93       	st	X+, r25
	}
}

void sensors_init()
{
	for (int i=0;i<12;i++)
    206c:	e2 17       	cp	r30, r18
    206e:	f3 07       	cpc	r31, r19
    2070:	c9 f7       	brne	.-14     	; 0x2064 <sensors_init+0x10>
	{
		sensorsMax[i] = 0;
		sensorsMin[i] = 4000;
	}
}
    2072:	08 95       	ret

00002074 <main>:
uint8_t read_sensor(int sensor);
void sensors_init(void);
int sensors_read(void);

int main (void)
{
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	2b 97       	sbiw	r28, 0x0b	; 11
    207e:	cd bf       	out	0x3d, r28	; 61
    2080:	de bf       	out	0x3e, r29	; 62
	Kp = 1 * K;
    2082:	60 91 00 20 	lds	r22, 0x2000
    2086:	70 91 01 20 	lds	r23, 0x2001
    208a:	80 91 02 20 	lds	r24, 0x2002
    208e:	90 91 03 20 	lds	r25, 0x2003
    2092:	60 93 8f 20 	sts	0x208F, r22
    2096:	70 93 90 20 	sts	0x2090, r23
    209a:	80 93 91 20 	sts	0x2091, r24
    209e:	90 93 92 20 	sts	0x2092, r25
	Ki = 0 * K;
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	a9 01       	movw	r20, r18
    20a8:	0e 94 cc 02 	call	0x598	; 0x598 <__mulsf3>
    20ac:	26 2f       	mov	r18, r22
    20ae:	37 2f       	mov	r19, r23
    20b0:	f8 2f       	mov	r31, r24
    20b2:	e9 2f       	mov	r30, r25
    20b4:	46 2f       	mov	r20, r22
    20b6:	57 2f       	mov	r21, r23
    20b8:	68 2f       	mov	r22, r24
    20ba:	79 2f       	mov	r23, r25
    20bc:	40 93 53 20 	sts	0x2053, r20
    20c0:	50 93 54 20 	sts	0x2054, r21
    20c4:	60 93 55 20 	sts	0x2055, r22
    20c8:	70 93 56 20 	sts	0x2056, r23
	Kd = 0 * K;
    20cc:	82 2f       	mov	r24, r18
    20ce:	93 2f       	mov	r25, r19
    20d0:	af 2f       	mov	r26, r31
    20d2:	be 2f       	mov	r27, r30
    20d4:	80 93 73 20 	sts	0x2073, r24
    20d8:	90 93 74 20 	sts	0x2074, r25
    20dc:	a0 93 75 20 	sts	0x2075, r26
    20e0:	b0 93 76 20 	sts	0x2076, r27
	board_init();
    20e4:	0e 94 49 06 	call	0xc92	; 0xc92 <board_init>
	sysclk_init();
    20e8:	0e 94 4a 06 	call	0xc94	; 0xc94 <sysclk_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    20ec:	87 e0       	ldi	r24, 0x07	; 7
    20ee:	e0 ea       	ldi	r30, 0xA0	; 160
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	82 83       	std	Z+2, r24	; 0x02
static void adc_init(void)
{
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;

	adc_read_configuration(&MY_ADC, &adc_conf);
    20f4:	be 01       	movw	r22, r28
    20f6:	6f 5f       	subi	r22, 0xFF	; 255
    20f8:	7f 4f       	sbci	r23, 0xFF	; 255
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	92 e0       	ldi	r25, 0x02	; 2
    20fe:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <adc_read_configuration>
	adcch_read_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    2102:	ae 01       	movw	r20, r28
    2104:	48 5f       	subi	r20, 0xF8	; 248
    2106:	5f 4f       	sbci	r21, 0xFF	; 255
    2108:	61 e0       	ldi	r22, 0x01	; 1
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	92 e0       	ldi	r25, 0x02	; 2
    210e:	0e 94 55 07 	call	0xeaa	; 0xeaa <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2114:	9b 81       	ldd	r25, Y+3	; 0x03
    2116:	9f 78       	andi	r25, 0x8F	; 143
	conf->refctrl |= ref;
    2118:	90 61       	ori	r25, 0x10	; 16
    211a:	9b 83       	std	Y+3, r25	; 0x03
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    211c:	81 7e       	andi	r24, 0xE1	; 225
    211e:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
    2120:	1c 82       	std	Y+4, r1	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    2122:	82 e0       	ldi	r24, 0x02	; 2
    2124:	8d 83       	std	Y+5, r24	; 0x05
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
    2126:	83 e0       	ldi	r24, 0x03	; 3
    2128:	88 87       	std	Y+8, r24	; 0x08
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    212a:	80 e3       	ldi	r24, 0x30	; 48
    212c:	89 87       	std	Y+9, r24	; 0x09
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 2000000UL);

	adcch_set_input(&adcch_conf, ADCCH_POS_PIN6, ADCCH_NEG_PIN4,1);

	adc_write_configuration(&MY_ADC, &adc_conf);
    212e:	be 01       	movw	r22, r28
    2130:	6f 5f       	subi	r22, 0xFF	; 255
    2132:	7f 4f       	sbci	r23, 0xFF	; 255
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	92 e0       	ldi	r25, 0x02	; 2
    2138:	0e 94 bc 06 	call	0xd78	; 0xd78 <adc_write_configuration>
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    213c:	ae 01       	movw	r20, r28
    213e:	48 5f       	subi	r20, 0xF8	; 248
    2140:	5f 4f       	sbci	r21, 0xFF	; 255
    2142:	61 e0       	ldi	r22, 0x01	; 1
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	92 e0       	ldi	r25, 0x02	; 2
    2148:	0e 94 1c 07 	call	0xe38	; 0xe38 <adcch_write_configuration>
	
	read_adc(0);
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	f3 de       	rcall	.-538    	; 0x1f38 <read_adc>
	Kd = 0 * K;
	board_init();
	sysclk_init();
	pmic_init();
	adc_init();
	init_motors();
    2152:	04 de       	rcall	.-1016   	; 0x1d5c <init_motors>
	sensors_init();
    2154:	7f df       	rcall	.-258    	; 0x2054 <sensors_init>
	tc_init();
    2156:	e5 dd       	rcall	.-1078   	; 0x1d22 <tc_init>
	
	PORTD.DIRSET = 0xFF;
    2158:	e0 e6       	ldi	r30, 0x60	; 96
    215a:	f6 e0       	ldi	r31, 0x06	; 6
    215c:	8f ef       	ldi	r24, 0xFF	; 255
    215e:	81 83       	std	Z+1, r24	; 0x01
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    2160:	90 e2       	ldi	r25, 0x20	; 32
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	90 e1       	ldi	r25, 0x10	; 16
    2166:	91 83       	std	Z+1, r25	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    2168:	91 e0       	ldi	r25, 0x01	; 1
    216a:	92 83       	std	Z+2, r25	; 0x02
	ioport_set_pin_dir(USER_LED0, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(USER_LED1, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(BUTTON, IOPORT_DIR_INPUT);
	PORTE.DIRSET = 0xFF;
    216c:	e0 e8       	ldi	r30, 0x80	; 128
    216e:	f6 e0       	ldi	r31, 0x06	; 6
    2170:	81 83       	std	Z+1, r24	; 0x01
	PORTR.DIRSET = 0xFF;
    2172:	e0 ee       	ldi	r30, 0xE0	; 224
    2174:	f7 e0       	ldi	r31, 0x07	; 7
    2176:	81 83       	std	Z+1, r24	; 0x01
    2178:	ff cf       	rjmp	.-2      	; 0x2178 <main+0x104>

0000217a <sensors_read>:
		sensorsMin[i] = 4000;
	}
}

int sensors_read()
{
    217a:	cf 92       	push	r12
    217c:	df 92       	push	r13
    217e:	ef 92       	push	r14
    2180:	ff 92       	push	r15
    2182:	0f 93       	push	r16
    2184:	1f 93       	push	r17
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	c8 55       	subi	r28, 0x58	; 88
    2190:	d2 40       	sbci	r29, 0x02	; 2
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	cc 24       	eor	r12, r12
    2198:	c3 94       	inc	r12
    219a:	d1 2c       	mov	r13, r1
    219c:	cc 0e       	add	r12, r28
    219e:	dd 1e       	adc	r13, r29
    21a0:	76 01       	movw	r14, r12
	int sensors_states[12];
	for (int i=0;i<12;i++)
    21a2:	00 e0       	ldi	r16, 0x00	; 0
    21a4:	10 e0       	ldi	r17, 0x00	; 0
	{
		sensors_states[i] = read_sensor(i);
    21a6:	c8 01       	movw	r24, r16
    21a8:	10 df       	rcall	.-480    	; 0x1fca <read_sensor>
    21aa:	d7 01       	movw	r26, r14
    21ac:	8c 93       	st	X, r24
    21ae:	11 96       	adiw	r26, 0x01	; 1
    21b0:	1c 92       	st	X, r1
    21b2:	b2 e0       	ldi	r27, 0x02	; 2
    21b4:	eb 0e       	add	r14, r27
    21b6:	f1 1c       	adc	r15, r1
}

int sensors_read()
{
	int sensors_states[12];
	for (int i=0;i<12;i++)
    21b8:	0f 5f       	subi	r16, 0xFF	; 255
    21ba:	1f 4f       	sbci	r17, 0xFF	; 255
    21bc:	0c 30       	cpi	r16, 0x0C	; 12
    21be:	11 05       	cpc	r17, r1
    21c0:	91 f7       	brne	.-28     	; 0x21a6 <sensors_read+0x2c>
	{
		sensors_states[i] = read_sensor(i);
	}
	int possible_states[][12] =
    21c2:	fe 01       	movw	r30, r28
    21c4:	79 96       	adiw	r30, 0x19	; 25
    21c6:	80 e4       	ldi	r24, 0x40	; 64
    21c8:	92 e0       	ldi	r25, 0x02	; 2
    21ca:	df 01       	movw	r26, r30
    21cc:	9c 01       	movw	r18, r24
    21ce:	1d 92       	st	X+, r1
    21d0:	21 50       	subi	r18, 0x01	; 1
    21d2:	30 40       	sbci	r19, 0x00	; 0
    21d4:	e1 f7       	brne	.-8      	; 0x21ce <sensors_read+0x54>
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	89 ab       	std	Y+49, r24	; 0x31
    21dc:	9a ab       	std	Y+50, r25	; 0x32
    21de:	2b 96       	adiw	r28, 0x0b	; 11
    21e0:	8e af       	std	Y+62, r24	; 0x3e
    21e2:	9f af       	std	Y+63, r25	; 0x3f
    21e4:	2b 97       	sbiw	r28, 0x0b	; 11
    21e6:	2d 96       	adiw	r28, 0x0d	; 13
    21e8:	8e af       	std	Y+62, r24	; 0x3e
    21ea:	9f af       	std	Y+63, r25	; 0x3f
    21ec:	2d 97       	sbiw	r28, 0x0d	; 13
    21ee:	a3 96       	adiw	r28, 0x23	; 35
    21f0:	8e af       	std	Y+62, r24	; 0x3e
    21f2:	9f af       	std	Y+63, r25	; 0x3f
    21f4:	a3 97       	sbiw	r28, 0x23	; 35
    21f6:	a5 96       	adiw	r28, 0x25	; 37
    21f8:	8e af       	std	Y+62, r24	; 0x3e
    21fa:	9f af       	std	Y+63, r25	; 0x3f
    21fc:	a5 97       	sbiw	r28, 0x25	; 37
    21fe:	a7 96       	adiw	r28, 0x27	; 39
    2200:	8e af       	std	Y+62, r24	; 0x3e
    2202:	9f af       	std	Y+63, r25	; 0x3f
    2204:	a7 97       	sbiw	r28, 0x27	; 39
    2206:	ed 96       	adiw	r28, 0x3d	; 61
    2208:	8e af       	std	Y+62, r24	; 0x3e
    220a:	9f af       	std	Y+63, r25	; 0x3f
    220c:	ed 97       	sbiw	r28, 0x3d	; 61
    220e:	ef 96       	adiw	r28, 0x3f	; 63
    2210:	8e af       	std	Y+62, r24	; 0x3e
    2212:	9f af       	std	Y+63, r25	; 0x3f
    2214:	ef 97       	sbiw	r28, 0x3f	; 63
    2216:	cd 56       	subi	r28, 0x6D	; 109
    2218:	df 4f       	sbci	r29, 0xFF	; 255
    221a:	88 83       	st	Y, r24
    221c:	99 83       	std	Y+1, r25	; 0x01
    221e:	c3 59       	subi	r28, 0x93	; 147
    2220:	d0 40       	sbci	r29, 0x00	; 0
    2222:	cb 56       	subi	r28, 0x6B	; 107
    2224:	df 4f       	sbci	r29, 0xFF	; 255
    2226:	88 83       	st	Y, r24
    2228:	99 83       	std	Y+1, r25	; 0x01
    222a:	c5 59       	subi	r28, 0x95	; 149
    222c:	d0 40       	sbci	r29, 0x00	; 0
    222e:	c9 56       	subi	r28, 0x69	; 105
    2230:	df 4f       	sbci	r29, 0xFF	; 255
    2232:	88 83       	st	Y, r24
    2234:	99 83       	std	Y+1, r25	; 0x01
    2236:	c7 59       	subi	r28, 0x97	; 151
    2238:	d0 40       	sbci	r29, 0x00	; 0
    223a:	c3 55       	subi	r28, 0x53	; 83
    223c:	df 4f       	sbci	r29, 0xFF	; 255
    223e:	88 83       	st	Y, r24
    2240:	99 83       	std	Y+1, r25	; 0x01
    2242:	cd 5a       	subi	r28, 0xAD	; 173
    2244:	d0 40       	sbci	r29, 0x00	; 0
    2246:	c1 55       	subi	r28, 0x51	; 81
    2248:	df 4f       	sbci	r29, 0xFF	; 255
    224a:	88 83       	st	Y, r24
    224c:	99 83       	std	Y+1, r25	; 0x01
    224e:	cf 5a       	subi	r28, 0xAF	; 175
    2250:	d0 40       	sbci	r29, 0x00	; 0
    2252:	cb 53       	subi	r28, 0x3B	; 59
    2254:	df 4f       	sbci	r29, 0xFF	; 255
    2256:	88 83       	st	Y, r24
    2258:	99 83       	std	Y+1, r25	; 0x01
    225a:	c5 5c       	subi	r28, 0xC5	; 197
    225c:	d0 40       	sbci	r29, 0x00	; 0
    225e:	c9 53       	subi	r28, 0x39	; 57
    2260:	df 4f       	sbci	r29, 0xFF	; 255
    2262:	88 83       	st	Y, r24
    2264:	99 83       	std	Y+1, r25	; 0x01
    2266:	c7 5c       	subi	r28, 0xC7	; 199
    2268:	d0 40       	sbci	r29, 0x00	; 0
    226a:	c7 53       	subi	r28, 0x37	; 55
    226c:	df 4f       	sbci	r29, 0xFF	; 255
    226e:	88 83       	st	Y, r24
    2270:	99 83       	std	Y+1, r25	; 0x01
    2272:	c9 5c       	subi	r28, 0xC9	; 201
    2274:	d0 40       	sbci	r29, 0x00	; 0
    2276:	c1 52       	subi	r28, 0x21	; 33
    2278:	df 4f       	sbci	r29, 0xFF	; 255
    227a:	88 83       	st	Y, r24
    227c:	99 83       	std	Y+1, r25	; 0x01
    227e:	cf 5d       	subi	r28, 0xDF	; 223
    2280:	d0 40       	sbci	r29, 0x00	; 0
    2282:	cf 51       	subi	r28, 0x1F	; 31
    2284:	df 4f       	sbci	r29, 0xFF	; 255
    2286:	88 83       	st	Y, r24
    2288:	99 83       	std	Y+1, r25	; 0x01
    228a:	c1 5e       	subi	r28, 0xE1	; 225
    228c:	d0 40       	sbci	r29, 0x00	; 0
    228e:	c9 50       	subi	r28, 0x09	; 9
    2290:	df 4f       	sbci	r29, 0xFF	; 255
    2292:	88 83       	st	Y, r24
    2294:	99 83       	std	Y+1, r25	; 0x01
    2296:	c7 5f       	subi	r28, 0xF7	; 247
    2298:	d0 40       	sbci	r29, 0x00	; 0
    229a:	c7 50       	subi	r28, 0x07	; 7
    229c:	df 4f       	sbci	r29, 0xFF	; 255
    229e:	88 83       	st	Y, r24
    22a0:	99 83       	std	Y+1, r25	; 0x01
    22a2:	c9 5f       	subi	r28, 0xF9	; 249
    22a4:	d0 40       	sbci	r29, 0x00	; 0
    22a6:	c5 50       	subi	r28, 0x05	; 5
    22a8:	df 4f       	sbci	r29, 0xFF	; 255
    22aa:	88 83       	st	Y, r24
    22ac:	99 83       	std	Y+1, r25	; 0x01
    22ae:	cb 5f       	subi	r28, 0xFB	; 251
    22b0:	d0 40       	sbci	r29, 0x00	; 0
    22b2:	c1 5f       	subi	r28, 0xF1	; 241
    22b4:	de 4f       	sbci	r29, 0xFE	; 254
    22b6:	88 83       	st	Y, r24
    22b8:	99 83       	std	Y+1, r25	; 0x01
    22ba:	cf 50       	subi	r28, 0x0F	; 15
    22bc:	d1 40       	sbci	r29, 0x01	; 1
    22be:	cf 5e       	subi	r28, 0xEF	; 239
    22c0:	de 4f       	sbci	r29, 0xFE	; 254
    22c2:	88 83       	st	Y, r24
    22c4:	99 83       	std	Y+1, r25	; 0x01
    22c6:	c1 51       	subi	r28, 0x11	; 17
    22c8:	d1 40       	sbci	r29, 0x01	; 1
    22ca:	cd 5e       	subi	r28, 0xED	; 237
    22cc:	de 4f       	sbci	r29, 0xFE	; 254
    22ce:	88 83       	st	Y, r24
    22d0:	99 83       	std	Y+1, r25	; 0x01
    22d2:	c3 51       	subi	r28, 0x13	; 19
    22d4:	d1 40       	sbci	r29, 0x01	; 1
    22d6:	cb 5e       	subi	r28, 0xEB	; 235
    22d8:	de 4f       	sbci	r29, 0xFE	; 254
    22da:	88 83       	st	Y, r24
    22dc:	99 83       	std	Y+1, r25	; 0x01
    22de:	c5 51       	subi	r28, 0x15	; 21
    22e0:	d1 40       	sbci	r29, 0x01	; 1
    22e2:	c7 5d       	subi	r28, 0xD7	; 215
    22e4:	de 4f       	sbci	r29, 0xFE	; 254
    22e6:	88 83       	st	Y, r24
    22e8:	99 83       	std	Y+1, r25	; 0x01
    22ea:	c9 52       	subi	r28, 0x29	; 41
    22ec:	d1 40       	sbci	r29, 0x01	; 1
    22ee:	c5 5d       	subi	r28, 0xD5	; 213
    22f0:	de 4f       	sbci	r29, 0xFE	; 254
    22f2:	88 83       	st	Y, r24
    22f4:	99 83       	std	Y+1, r25	; 0x01
    22f6:	cb 52       	subi	r28, 0x2B	; 43
    22f8:	d1 40       	sbci	r29, 0x01	; 1
    22fa:	c3 5d       	subi	r28, 0xD3	; 211
    22fc:	de 4f       	sbci	r29, 0xFE	; 254
    22fe:	88 83       	st	Y, r24
    2300:	99 83       	std	Y+1, r25	; 0x01
    2302:	cd 52       	subi	r28, 0x2D	; 45
    2304:	d1 40       	sbci	r29, 0x01	; 1
    2306:	cf 5b       	subi	r28, 0xBF	; 191
    2308:	de 4f       	sbci	r29, 0xFE	; 254
    230a:	88 83       	st	Y, r24
    230c:	99 83       	std	Y+1, r25	; 0x01
    230e:	c1 54       	subi	r28, 0x41	; 65
    2310:	d1 40       	sbci	r29, 0x01	; 1
    2312:	cd 5b       	subi	r28, 0xBD	; 189
    2314:	de 4f       	sbci	r29, 0xFE	; 254
    2316:	88 83       	st	Y, r24
    2318:	99 83       	std	Y+1, r25	; 0x01
    231a:	c3 54       	subi	r28, 0x43	; 67
    231c:	d1 40       	sbci	r29, 0x01	; 1
    231e:	cb 5b       	subi	r28, 0xBB	; 187
    2320:	de 4f       	sbci	r29, 0xFE	; 254
    2322:	88 83       	st	Y, r24
    2324:	99 83       	std	Y+1, r25	; 0x01
    2326:	c5 54       	subi	r28, 0x45	; 69
    2328:	d1 40       	sbci	r29, 0x01	; 1
    232a:	c9 5b       	subi	r28, 0xB9	; 185
    232c:	de 4f       	sbci	r29, 0xFE	; 254
    232e:	88 83       	st	Y, r24
    2330:	99 83       	std	Y+1, r25	; 0x01
    2332:	c7 54       	subi	r28, 0x47	; 71
    2334:	d1 40       	sbci	r29, 0x01	; 1
    2336:	c5 5a       	subi	r28, 0xA5	; 165
    2338:	de 4f       	sbci	r29, 0xFE	; 254
    233a:	88 83       	st	Y, r24
    233c:	99 83       	std	Y+1, r25	; 0x01
    233e:	cb 55       	subi	r28, 0x5B	; 91
    2340:	d1 40       	sbci	r29, 0x01	; 1
    2342:	c3 5a       	subi	r28, 0xA3	; 163
    2344:	de 4f       	sbci	r29, 0xFE	; 254
    2346:	88 83       	st	Y, r24
    2348:	99 83       	std	Y+1, r25	; 0x01
    234a:	cd 55       	subi	r28, 0x5D	; 93
    234c:	d1 40       	sbci	r29, 0x01	; 1
    234e:	c1 5a       	subi	r28, 0xA1	; 161
    2350:	de 4f       	sbci	r29, 0xFE	; 254
    2352:	88 83       	st	Y, r24
    2354:	99 83       	std	Y+1, r25	; 0x01
    2356:	cf 55       	subi	r28, 0x5F	; 95
    2358:	d1 40       	sbci	r29, 0x01	; 1
    235a:	cd 58       	subi	r28, 0x8D	; 141
    235c:	de 4f       	sbci	r29, 0xFE	; 254
    235e:	88 83       	st	Y, r24
    2360:	99 83       	std	Y+1, r25	; 0x01
    2362:	c3 57       	subi	r28, 0x73	; 115
    2364:	d1 40       	sbci	r29, 0x01	; 1
    2366:	cb 58       	subi	r28, 0x8B	; 139
    2368:	de 4f       	sbci	r29, 0xFE	; 254
    236a:	88 83       	st	Y, r24
    236c:	99 83       	std	Y+1, r25	; 0x01
    236e:	c5 57       	subi	r28, 0x75	; 117
    2370:	d1 40       	sbci	r29, 0x01	; 1
    2372:	c9 58       	subi	r28, 0x89	; 137
    2374:	de 4f       	sbci	r29, 0xFE	; 254
    2376:	88 83       	st	Y, r24
    2378:	99 83       	std	Y+1, r25	; 0x01
    237a:	c7 57       	subi	r28, 0x77	; 119
    237c:	d1 40       	sbci	r29, 0x01	; 1
    237e:	c7 58       	subi	r28, 0x87	; 135
    2380:	de 4f       	sbci	r29, 0xFE	; 254
    2382:	88 83       	st	Y, r24
    2384:	99 83       	std	Y+1, r25	; 0x01
    2386:	c9 57       	subi	r28, 0x79	; 121
    2388:	d1 40       	sbci	r29, 0x01	; 1
    238a:	c3 57       	subi	r28, 0x73	; 115
    238c:	de 4f       	sbci	r29, 0xFE	; 254
    238e:	88 83       	st	Y, r24
    2390:	99 83       	std	Y+1, r25	; 0x01
    2392:	cd 58       	subi	r28, 0x8D	; 141
    2394:	d1 40       	sbci	r29, 0x01	; 1
    2396:	c1 57       	subi	r28, 0x71	; 113
    2398:	de 4f       	sbci	r29, 0xFE	; 254
    239a:	88 83       	st	Y, r24
    239c:	99 83       	std	Y+1, r25	; 0x01
    239e:	cf 58       	subi	r28, 0x8F	; 143
    23a0:	d1 40       	sbci	r29, 0x01	; 1
    23a2:	cf 56       	subi	r28, 0x6F	; 111
    23a4:	de 4f       	sbci	r29, 0xFE	; 254
    23a6:	88 83       	st	Y, r24
    23a8:	99 83       	std	Y+1, r25	; 0x01
    23aa:	c1 59       	subi	r28, 0x91	; 145
    23ac:	d1 40       	sbci	r29, 0x01	; 1
    23ae:	c9 55       	subi	r28, 0x59	; 89
    23b0:	de 4f       	sbci	r29, 0xFE	; 254
    23b2:	88 83       	st	Y, r24
    23b4:	99 83       	std	Y+1, r25	; 0x01
    23b6:	c7 5a       	subi	r28, 0xA7	; 167
    23b8:	d1 40       	sbci	r29, 0x01	; 1
    23ba:	c7 55       	subi	r28, 0x57	; 87
    23bc:	de 4f       	sbci	r29, 0xFE	; 254
    23be:	88 83       	st	Y, r24
    23c0:	99 83       	std	Y+1, r25	; 0x01
    23c2:	c9 5a       	subi	r28, 0xA9	; 169
    23c4:	d1 40       	sbci	r29, 0x01	; 1
    23c6:	c1 54       	subi	r28, 0x41	; 65
    23c8:	de 4f       	sbci	r29, 0xFE	; 254
    23ca:	88 83       	st	Y, r24
    23cc:	99 83       	std	Y+1, r25	; 0x01
    23ce:	cf 5b       	subi	r28, 0xBF	; 191
    23d0:	d1 40       	sbci	r29, 0x01	; 1
    23d2:	cf 53       	subi	r28, 0x3F	; 63
    23d4:	de 4f       	sbci	r29, 0xFE	; 254
    23d6:	88 83       	st	Y, r24
    23d8:	99 83       	std	Y+1, r25	; 0x01
    23da:	c1 5c       	subi	r28, 0xC1	; 193
    23dc:	d1 40       	sbci	r29, 0x01	; 1
    23de:	cd 53       	subi	r28, 0x3D	; 61
    23e0:	de 4f       	sbci	r29, 0xFE	; 254
    23e2:	88 83       	st	Y, r24
    23e4:	99 83       	std	Y+1, r25	; 0x01
    23e6:	c3 5c       	subi	r28, 0xC3	; 195
    23e8:	d1 40       	sbci	r29, 0x01	; 1
    23ea:	c7 52       	subi	r28, 0x27	; 39
    23ec:	de 4f       	sbci	r29, 0xFE	; 254
    23ee:	88 83       	st	Y, r24
    23f0:	99 83       	std	Y+1, r25	; 0x01
    23f2:	c9 5d       	subi	r28, 0xD9	; 217
    23f4:	d1 40       	sbci	r29, 0x01	; 1
    23f6:	c5 52       	subi	r28, 0x25	; 37
    23f8:	de 4f       	sbci	r29, 0xFE	; 254
    23fa:	88 83       	st	Y, r24
    23fc:	99 83       	std	Y+1, r25	; 0x01
    23fe:	cb 5d       	subi	r28, 0xDB	; 219
    2400:	d1 40       	sbci	r29, 0x01	; 1
    2402:	cf 50       	subi	r28, 0x0F	; 15
    2404:	de 4f       	sbci	r29, 0xFE	; 254
    2406:	88 83       	st	Y, r24
    2408:	99 83       	std	Y+1, r25	; 0x01
    240a:	c1 5f       	subi	r28, 0xF1	; 241
    240c:	d1 40       	sbci	r29, 0x01	; 1
    240e:	cd 50       	subi	r28, 0x0D	; 13
    2410:	de 4f       	sbci	r29, 0xFE	; 254
    2412:	88 83       	st	Y, r24
    2414:	99 83       	std	Y+1, r25	; 0x01
    2416:	c3 5f       	subi	r28, 0xF3	; 243
    2418:	d1 40       	sbci	r29, 0x01	; 1
    241a:	cb 50       	subi	r28, 0x0B	; 11
    241c:	de 4f       	sbci	r29, 0xFE	; 254
    241e:	88 83       	st	Y, r24
    2420:	99 83       	std	Y+1, r25	; 0x01
    2422:	c5 5f       	subi	r28, 0xF5	; 245
    2424:	d1 40       	sbci	r29, 0x01	; 1
    2426:	c5 5f       	subi	r28, 0xF5	; 245
    2428:	dd 4f       	sbci	r29, 0xFD	; 253
    242a:	88 83       	st	Y, r24
    242c:	99 83       	std	Y+1, r25	; 0x01
    242e:	cb 50       	subi	r28, 0x0B	; 11
    2430:	d2 40       	sbci	r29, 0x02	; 2
    2432:	c3 5f       	subi	r28, 0xF3	; 243
    2434:	dd 4f       	sbci	r29, 0xFD	; 253
    2436:	88 83       	st	Y, r24
    2438:	99 83       	std	Y+1, r25	; 0x01
    243a:	cd 50       	subi	r28, 0x0D	; 13
    243c:	d2 40       	sbci	r29, 0x02	; 2
    243e:	cd 5d       	subi	r28, 0xDD	; 221
    2440:	dd 4f       	sbci	r29, 0xFD	; 253
    2442:	88 83       	st	Y, r24
    2444:	99 83       	std	Y+1, r25	; 0x01
    2446:	c3 52       	subi	r28, 0x23	; 35
    2448:	d2 40       	sbci	r29, 0x02	; 2
    244a:	cb 5d       	subi	r28, 0xDB	; 219
    244c:	dd 4f       	sbci	r29, 0xFD	; 253
    244e:	88 83       	st	Y, r24
    2450:	99 83       	std	Y+1, r25	; 0x01
    2452:	c5 52       	subi	r28, 0x25	; 37
    2454:	d2 40       	sbci	r29, 0x02	; 2
    2456:	c9 5d       	subi	r28, 0xD9	; 217
    2458:	dd 4f       	sbci	r29, 0xFD	; 253
    245a:	88 83       	st	Y, r24
    245c:	99 83       	std	Y+1, r25	; 0x01
    245e:	c7 52       	subi	r28, 0x27	; 39
    2460:	d2 40       	sbci	r29, 0x02	; 2
    2462:	c3 5c       	subi	r28, 0xC3	; 195
    2464:	dd 4f       	sbci	r29, 0xFD	; 253
    2466:	88 83       	st	Y, r24
    2468:	99 83       	std	Y+1, r25	; 0x01
    246a:	cd 53       	subi	r28, 0x3D	; 61
    246c:	d2 40       	sbci	r29, 0x02	; 2
    246e:	c1 5c       	subi	r28, 0xC1	; 193
    2470:	dd 4f       	sbci	r29, 0xFD	; 253
    2472:	88 83       	st	Y, r24
    2474:	99 83       	std	Y+1, r25	; 0x01
    2476:	cf 53       	subi	r28, 0x3F	; 63
    2478:	d2 40       	sbci	r29, 0x02	; 2
    247a:	c9 5a       	subi	r28, 0xA9	; 169
    247c:	dd 4f       	sbci	r29, 0xFD	; 253
    247e:	88 83       	st	Y, r24
    2480:	99 83       	std	Y+1, r25	; 0x01
    2482:	c7 55       	subi	r28, 0x57	; 87
    2484:	d2 40       	sbci	r29, 0x02	; 2
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
	};
	int state = -1,flag = 1,j = 0;
    2486:	00 e0       	ldi	r16, 0x00	; 0
    2488:	10 e0       	ldi	r17, 0x00	; 0
		sensorsMax[i] = 0;
		sensorsMin[i] = 4000;
	}
}

int sensors_read()
    248a:	af 01       	movw	r20, r30
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
	};
	int state = -1,flag = 1,j = 0;
	while (state == -1 && j < 24)
    248c:	10 c0       	rjmp	.+32     	; 0x24ae <sensors_read+0x334>
	{
		flag = 1;
		for (int i=0;i<12;i++)
		{
			if (possible_states[j][i] != sensors_states[i])
    248e:	2d 91       	ld	r18, X+
    2490:	3d 91       	ld	r19, X+
    2492:	81 91       	ld	r24, Z+
    2494:	91 91       	ld	r25, Z+
    2496:	28 17       	cp	r18, r24
    2498:	39 07       	cpc	r19, r25
    249a:	11 f0       	breq	.+4      	; 0x24a0 <sensors_read+0x326>
			{
				flag = 0;
    249c:	60 e0       	ldi	r22, 0x00	; 0
    249e:	70 e0       	ldi	r23, 0x00	; 0
	};
	int state = -1,flag = 1,j = 0;
	while (state == -1 && j < 24)
	{
		flag = 1;
		for (int i=0;i<12;i++)
    24a0:	e4 17       	cp	r30, r20
    24a2:	f5 07       	cpc	r31, r21
    24a4:	a1 f7       	brne	.-24     	; 0x248e <sensors_read+0x314>
			if (possible_states[j][i] != sensors_states[i])
			{
				flag = 0;
			}
		}
		if (flag)
    24a6:	67 2b       	or	r22, r23
    24a8:	41 f4       	brne	.+16     	; 0x24ba <sensors_read+0x340>
		{
			state = j;
		}
		else
		{
			j++;
    24aa:	0f 5f       	subi	r16, 0xFF	; 255
    24ac:	1f 4f       	sbci	r17, 0xFF	; 255
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
	};
	int state = -1,flag = 1,j = 0;
	while (state == -1 && j < 24)
    24ae:	08 31       	cpi	r16, 0x18	; 24
    24b0:	11 05       	cpc	r17, r1
    24b2:	41 f4       	brne	.+16     	; 0x24c4 <sensors_read+0x34a>
    24b4:	0f ef       	ldi	r16, 0xFF	; 255
    24b6:	1f ef       	ldi	r17, 0xFF	; 255
    24b8:	29 c0       	rjmp	.+82     	; 0x250c <sensors_read+0x392>
    24ba:	0f 3f       	cpi	r16, 0xFF	; 255
    24bc:	3f ef       	ldi	r19, 0xFF	; 255
    24be:	13 07       	cpc	r17, r19
    24c0:	91 f0       	breq	.+36     	; 0x24e6 <sensors_read+0x36c>
    24c2:	17 c0       	rjmp	.+46     	; 0x24f2 <sensors_read+0x378>
		sensorsMax[i] = 0;
		sensorsMin[i] = 4000;
	}
}

int sensors_read()
    24c4:	78 01       	movw	r14, r16
    24c6:	ee 0c       	add	r14, r14
    24c8:	ff 1c       	adc	r15, r15
    24ca:	e0 0e       	add	r14, r16
    24cc:	f1 1e       	adc	r15, r17
    24ce:	ee 0c       	add	r14, r14
    24d0:	ff 1c       	adc	r15, r15
    24d2:	ee 0c       	add	r14, r14
    24d4:	ff 1c       	adc	r15, r15
    24d6:	ee 0c       	add	r14, r14
    24d8:	ff 1c       	adc	r15, r15
    24da:	89 e1       	ldi	r24, 0x19	; 25
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	8c 0f       	add	r24, r28
    24e0:	9d 1f       	adc	r25, r29
    24e2:	e8 0e       	add	r14, r24
    24e4:	f9 1e       	adc	r15, r25
    24e6:	d7 01       	movw	r26, r14
    24e8:	ec 2d       	mov	r30, r12
    24ea:	fd 2d       	mov	r31, r13
    24ec:	61 e0       	ldi	r22, 0x01	; 1
    24ee:	70 e0       	ldi	r23, 0x00	; 0
    24f0:	ce cf       	rjmp	.-100    	; 0x248e <sensors_read+0x314>
		else
		{
			j++;
		}
	}
	if (state == 0 && lastState == 23)
    24f2:	01 15       	cp	r16, r1
    24f4:	11 05       	cpc	r17, r1
    24f6:	51 f4       	brne	.+20     	; 0x250c <sensors_read+0x392>
    24f8:	80 91 57 20 	lds	r24, 0x2057
    24fc:	90 91 58 20 	lds	r25, 0x2058
    2500:	87 31       	cpi	r24, 0x17	; 23
    2502:	91 05       	cpc	r25, r1
    2504:	79 f4       	brne	.+30     	; 0x2524 <sensors_read+0x3aa>
    2506:	0b c0       	rjmp	.+22     	; 0x251e <sensors_read+0x3a4>
	{
		state = 12;
	}
	if (state == 0 && lastState == 24)
	{
		state = 24;
    2508:	08 e1       	ldi	r16, 0x18	; 24
    250a:	10 e0       	ldi	r17, 0x00	; 0
	}
	lastState = state;
    250c:	00 93 57 20 	sts	0x2057, r16
    2510:	10 93 58 20 	sts	0x2058, r17
	return state-12;
    2514:	0c 50       	subi	r16, 0x0C	; 12
    2516:	11 09       	sbc	r17, r1
    2518:	80 2f       	mov	r24, r16
    251a:	91 2f       	mov	r25, r17
    251c:	0c c0       	rjmp	.+24     	; 0x2536 <sensors_read+0x3bc>
			j++;
		}
	}
	if (state == 0 && lastState == 23)
	{
		state = 24;
    251e:	08 e1       	ldi	r16, 0x18	; 24
    2520:	10 e0       	ldi	r17, 0x00	; 0
    2522:	f4 cf       	rjmp	.-24     	; 0x250c <sensors_read+0x392>
	}
	if (state == 0 && lastState == 12)
    2524:	8c 30       	cpi	r24, 0x0C	; 12
    2526:	91 05       	cpc	r25, r1
    2528:	19 f0       	breq	.+6      	; 0x2530 <sensors_read+0x3b6>
	{
		state = 12;
	}
	if (state == 0 && lastState == 24)
    252a:	48 97       	sbiw	r24, 0x18	; 24
    252c:	79 f7       	brne	.-34     	; 0x250c <sensors_read+0x392>
    252e:	ec cf       	rjmp	.-40     	; 0x2508 <sensors_read+0x38e>
	{
		state = 24;
	}
	if (state == 0 && lastState == 12)
	{
		state = 12;
    2530:	0c e0       	ldi	r16, 0x0C	; 12
    2532:	10 e0       	ldi	r17, 0x00	; 0
    2534:	eb cf       	rjmp	.-42     	; 0x250c <sensors_read+0x392>
	{
		state = 24;
	}
	lastState = state;
	return state-12;
    2536:	c8 5a       	subi	r28, 0xA8	; 168
    2538:	dd 4f       	sbci	r29, 0xFD	; 253
    253a:	cd bf       	out	0x3d, r28	; 61
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	df 91       	pop	r29
    2540:	cf 91       	pop	r28
    2542:	1f 91       	pop	r17
    2544:	0f 91       	pop	r16
    2546:	ff 90       	pop	r15
    2548:	ef 90       	pop	r14
    254a:	df 90       	pop	r13
    254c:	cf 90       	pop	r12
    254e:	08 95       	ret

00002550 <mainLoop>:
	}
}
int motorComand;
int buttonPressed = 0;
void mainLoop()
{
    2550:	cf 93       	push	r28
    2552:	df 93       	push	r29

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    2554:	e0 e6       	ldi	r30, 0x60	; 96
    2556:	f6 e0       	ldi	r31, 0x06	; 6
    2558:	80 85       	ldd	r24, Z+8	; 0x08
	if (ioport_get_pin_level(BUTTON) == 0 && buttonPressed == 0)
    255a:	80 fd       	sbrc	r24, 0
    255c:	51 c0       	rjmp	.+162    	; 0x2600 <mainLoop+0xb0>
    255e:	80 91 45 20 	lds	r24, 0x2045
    2562:	90 91 46 20 	lds	r25, 0x2046
    2566:	89 2b       	or	r24, r25
    2568:	09 f0       	breq	.+2      	; 0x256c <mainLoop+0x1c>
    256a:	4a c0       	rjmp	.+148    	; 0x2600 <mainLoop+0xb0>
	{
		buttonPressed = 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	80 93 45 20 	sts	0x2045, r24
    2574:	90 93 46 20 	sts	0x2046, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2578:	2f ef       	ldi	r18, 0xFF	; 255
    257a:	37 ea       	ldi	r19, 0xA7	; 167
    257c:	81 e6       	ldi	r24, 0x61	; 97
    257e:	21 50       	subi	r18, 0x01	; 1
    2580:	30 40       	sbci	r19, 0x00	; 0
    2582:	80 40       	sbci	r24, 0x00	; 0
    2584:	e1 f7       	brne	.-8      	; 0x257e <mainLoop+0x2e>
    2586:	00 c0       	rjmp	.+0      	; 0x2588 <mainLoop+0x38>
    2588:	00 00       	nop
		_delay_ms(1000);
		for (int i = 0; i < 100; ++i) {
    258a:	c0 e0       	ldi	r28, 0x00	; 0
    258c:	d0 e0       	ldi	r29, 0x00	; 0
			set_motors(i, 0);
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	70 e0       	ldi	r23, 0x00	; 0
    2592:	ce 01       	movw	r24, r28
    2594:	3a dc       	rcall	.-1932   	; 0x1e0a <set_motors>
    2596:	8f e7       	ldi	r24, 0x7F	; 127
    2598:	9e e3       	ldi	r25, 0x3E	; 62
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <mainLoop+0x4a>
    259e:	00 c0       	rjmp	.+0      	; 0x25a0 <mainLoop+0x50>
    25a0:	00 00       	nop
{
	if (ioport_get_pin_level(BUTTON) == 0 && buttonPressed == 0)
	{
		buttonPressed = 1;
		_delay_ms(1000);
		for (int i = 0; i < 100; ++i) {
    25a2:	21 96       	adiw	r28, 0x01	; 1
    25a4:	c4 36       	cpi	r28, 0x64	; 100
    25a6:	d1 05       	cpc	r29, r1
    25a8:	91 f7       	brne	.-28     	; 0x258e <mainLoop+0x3e>
			set_motors(i, 0);
			_delay_ms(2);
		}
		set_motors(100, 0);
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	70 e0       	ldi	r23, 0x00	; 0
    25ae:	84 e6       	ldi	r24, 0x64	; 100
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	2b dc       	rcall	.-1962   	; 0x1e0a <set_motors>
    25b4:	9f ef       	ldi	r25, 0xFF	; 255
    25b6:	2f e4       	ldi	r18, 0x4F	; 79
    25b8:	33 ec       	ldi	r19, 0xC3	; 195
    25ba:	91 50       	subi	r25, 0x01	; 1
    25bc:	20 40       	sbci	r18, 0x00	; 0
    25be:	30 40       	sbci	r19, 0x00	; 0
    25c0:	e1 f7       	brne	.-8      	; 0x25ba <mainLoop+0x6a>
    25c2:	00 c0       	rjmp	.+0      	; 0x25c4 <mainLoop+0x74>
    25c4:	00 00       	nop
		_delay_ms(2000);
		set_motors(90, 150);
    25c6:	66 e9       	ldi	r22, 0x96	; 150
    25c8:	70 e0       	ldi	r23, 0x00	; 0
    25ca:	8a e5       	ldi	r24, 0x5A	; 90
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	1d dc       	rcall	.-1990   	; 0x1e0a <set_motors>
    25d0:	8f ef       	ldi	r24, 0xFF	; 255
    25d2:	93 ed       	ldi	r25, 0xD3	; 211
    25d4:	20 e3       	ldi	r18, 0x30	; 48
    25d6:	81 50       	subi	r24, 0x01	; 1
    25d8:	90 40       	sbci	r25, 0x00	; 0
    25da:	20 40       	sbci	r18, 0x00	; 0
    25dc:	e1 f7       	brne	.-8      	; 0x25d6 <mainLoop+0x86>
    25de:	00 c0       	rjmp	.+0      	; 0x25e0 <mainLoop+0x90>
    25e0:	00 00       	nop
		_delay_ms(500);
		set_motors(0,0);
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	70 e0       	ldi	r23, 0x00	; 0
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	0f dc       	rcall	.-2018   	; 0x1e0a <set_motors>
    25ec:	3a ea       	ldi	r19, 0xAA	; 170
    25ee:	8a e9       	ldi	r24, 0x9A	; 154
    25f0:	9b e5       	ldi	r25, 0x5B	; 91
    25f2:	26 e0       	ldi	r18, 0x06	; 6
    25f4:	31 50       	subi	r19, 0x01	; 1
    25f6:	80 40       	sbci	r24, 0x00	; 0
    25f8:	90 40       	sbci	r25, 0x00	; 0
    25fa:	20 40       	sbci	r18, 0x00	; 0
    25fc:	d9 f7       	brne	.-10     	; 0x25f4 <mainLoop+0xa4>
    25fe:	00 00       	nop
		_delay_ms(20000);
	}
	int linePosition = sensors_read();
    2600:	bc dd       	rcall	.-1160   	; 0x217a <sensors_read>
    2602:	ec 01       	movw	r28, r24
	if (linePosition != -13)
    2604:	83 3f       	cpi	r24, 0xF3	; 243
    2606:	3f ef       	ldi	r19, 0xFF	; 255
    2608:	93 07       	cpc	r25, r19
    260a:	09 f4       	brne	.+2      	; 0x260e <mainLoop+0xbe>
    260c:	3b c0       	rjmp	.+118    	; 0x2684 <mainLoop+0x134>
	{
		if (buttonPressed == 1)
    260e:	80 91 45 20 	lds	r24, 0x2045
    2612:	90 91 46 20 	lds	r25, 0x2046
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	81 f5       	brne	.+96     	; 0x267a <mainLoop+0x12a>
		{
			motorComand = computePID(0,linePosition);
    261a:	be 01       	movw	r22, r28
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	c2 da       	rcall	.-2684   	; 0x1ba6 <computePID>
    2622:	9c 01       	movw	r18, r24
    2624:	80 93 59 20 	sts	0x2059, r24
    2628:	90 93 5a 20 	sts	0x205A, r25
			MAXSPEED = (MAXMAXSPEED - abs(linePosition)/12 * MAXMAXSPEED);
    262c:	ce 01       	movw	r24, r28
    262e:	dd 23       	and	r29, r29
    2630:	24 f4       	brge	.+8      	; 0x263a <mainLoop+0xea>
    2632:	88 27       	eor	r24, r24
    2634:	99 27       	eor	r25, r25
    2636:	8c 1b       	sub	r24, r28
    2638:	9d 0b       	sbc	r25, r29
    263a:	6c e0       	ldi	r22, 0x0C	; 12
    263c:	70 e0       	ldi	r23, 0x00	; 0
    263e:	40 d0       	rcall	.+128    	; 0x26c0 <__divmodhi4>
    2640:	47 ee       	ldi	r20, 0xE7	; 231
    2642:	46 03       	mulsu	r20, r22
    2644:	c0 01       	movw	r24, r0
    2646:	47 9f       	mul	r20, r23
    2648:	90 0d       	add	r25, r0
    264a:	11 24       	eor	r1, r1
    264c:	49 96       	adiw	r24, 0x19	; 25
			if (MAXSPEED == 0)
    264e:	29 f0       	breq	.+10     	; 0x265a <mainLoop+0x10a>
	if (linePosition != -13)
	{
		if (buttonPressed == 1)
		{
			motorComand = computePID(0,linePosition);
			MAXSPEED = (MAXMAXSPEED - abs(linePosition)/12 * MAXMAXSPEED);
    2650:	80 93 04 20 	sts	0x2004, r24
    2654:	90 93 05 20 	sts	0x2005, r25
    2658:	06 c0       	rjmp	.+12     	; 0x2666 <mainLoop+0x116>
			if (MAXSPEED == 0)
			{
				MAXSPEED = 15;
    265a:	8f e0       	ldi	r24, 0x0F	; 15
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	80 93 04 20 	sts	0x2004, r24
    2662:	90 93 05 20 	sts	0x2005, r25
			}
			lastCorrctStat = linePosition;
    2666:	c0 93 a7 20 	sts	0x20A7, r28
    266a:	d0 93 a8 20 	sts	0x20A8, r29
			set_motors(MAXSPEED, motorComand);
    266e:	b9 01       	movw	r22, r18
    2670:	80 91 04 20 	lds	r24, 0x2004
    2674:	90 91 05 20 	lds	r25, 0x2005
    2678:	c8 db       	rcall	.-2160   	; 0x1e0a <set_motors>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    267a:	80 e2       	ldi	r24, 0x20	; 32
    267c:	e0 e6       	ldi	r30, 0x60	; 96
    267e:	f6 e0       	ldi	r31, 0x06	; 6
    2680:	86 83       	std	Z+6, r24	; 0x06
    2682:	1b c0       	rjmp	.+54     	; 0x26ba <mainLoop+0x16a>
		}
		ioport_set_pin_level(USER_LED0, 0);
	} 
	else
	{
		if (buttonPressed == 1)
    2684:	80 91 45 20 	lds	r24, 0x2045
    2688:	90 91 46 20 	lds	r25, 0x2046
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	89 f4       	brne	.+34     	; 0x26b2 <mainLoop+0x162>
		{
			motorComand = computePID(0, lastCorrctStat);
    2690:	60 91 a7 20 	lds	r22, 0x20A7
    2694:	70 91 a8 20 	lds	r23, 0x20A8
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	84 da       	rcall	.-2808   	; 0x1ba6 <computePID>
    269e:	80 93 59 20 	sts	0x2059, r24
    26a2:	90 93 5a 20 	sts	0x205A, r25
			set_motors(MAXSPEED, motorComand);
    26a6:	bc 01       	movw	r22, r24
    26a8:	80 91 04 20 	lds	r24, 0x2004
    26ac:	90 91 05 20 	lds	r25, 0x2005
    26b0:	ac db       	rcall	.-2216   	; 0x1e0a <set_motors>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    26b2:	80 e2       	ldi	r24, 0x20	; 32
    26b4:	e0 e6       	ldi	r30, 0x60	; 96
    26b6:	f6 e0       	ldi	r31, 0x06	; 6
    26b8:	85 83       	std	Z+5, r24	; 0x05
		}
		ioport_set_pin_level(USER_LED0, 1);
	}
}
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	08 95       	ret

000026c0 <__divmodhi4>:
    26c0:	97 fb       	bst	r25, 7
    26c2:	07 2e       	mov	r0, r23
    26c4:	16 f4       	brtc	.+4      	; 0x26ca <__divmodhi4+0xa>
    26c6:	00 94       	com	r0
    26c8:	06 d0       	rcall	.+12     	; 0x26d6 <__divmodhi4_neg1>
    26ca:	77 fd       	sbrc	r23, 7
    26cc:	08 d0       	rcall	.+16     	; 0x26de <__divmodhi4_neg2>
    26ce:	39 d0       	rcall	.+114    	; 0x2742 <__udivmodhi4>
    26d0:	07 fc       	sbrc	r0, 7
    26d2:	05 d0       	rcall	.+10     	; 0x26de <__divmodhi4_neg2>
    26d4:	3e f4       	brtc	.+14     	; 0x26e4 <__divmodhi4_exit>

000026d6 <__divmodhi4_neg1>:
    26d6:	90 95       	com	r25
    26d8:	81 95       	neg	r24
    26da:	9f 4f       	sbci	r25, 0xFF	; 255
    26dc:	08 95       	ret

000026de <__divmodhi4_neg2>:
    26de:	70 95       	com	r23
    26e0:	61 95       	neg	r22
    26e2:	7f 4f       	sbci	r23, 0xFF	; 255

000026e4 <__divmodhi4_exit>:
    26e4:	08 95       	ret

000026e6 <__udivmodsi4>:
    26e6:	a1 e2       	ldi	r26, 0x21	; 33
    26e8:	1a 2e       	mov	r1, r26
    26ea:	aa 1b       	sub	r26, r26
    26ec:	bb 1b       	sub	r27, r27
    26ee:	fd 01       	movw	r30, r26
    26f0:	0d c0       	rjmp	.+26     	; 0x270c <__udivmodsi4_ep>

000026f2 <__udivmodsi4_loop>:
    26f2:	aa 1f       	adc	r26, r26
    26f4:	bb 1f       	adc	r27, r27
    26f6:	ee 1f       	adc	r30, r30
    26f8:	ff 1f       	adc	r31, r31
    26fa:	a2 17       	cp	r26, r18
    26fc:	b3 07       	cpc	r27, r19
    26fe:	e4 07       	cpc	r30, r20
    2700:	f5 07       	cpc	r31, r21
    2702:	20 f0       	brcs	.+8      	; 0x270c <__udivmodsi4_ep>
    2704:	a2 1b       	sub	r26, r18
    2706:	b3 0b       	sbc	r27, r19
    2708:	e4 0b       	sbc	r30, r20
    270a:	f5 0b       	sbc	r31, r21

0000270c <__udivmodsi4_ep>:
    270c:	66 1f       	adc	r22, r22
    270e:	77 1f       	adc	r23, r23
    2710:	88 1f       	adc	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	1a 94       	dec	r1
    2716:	69 f7       	brne	.-38     	; 0x26f2 <__udivmodsi4_loop>
    2718:	60 95       	com	r22
    271a:	70 95       	com	r23
    271c:	80 95       	com	r24
    271e:	90 95       	com	r25
    2720:	9b 01       	movw	r18, r22
    2722:	ac 01       	movw	r20, r24
    2724:	bd 01       	movw	r22, r26
    2726:	cf 01       	movw	r24, r30
    2728:	08 95       	ret

0000272a <__umulhisi3>:
    272a:	a2 9f       	mul	r26, r18
    272c:	b0 01       	movw	r22, r0
    272e:	b3 9f       	mul	r27, r19
    2730:	c0 01       	movw	r24, r0
    2732:	a3 9f       	mul	r26, r19
    2734:	01 d0       	rcall	.+2      	; 0x2738 <__umulhisi3+0xe>
    2736:	b2 9f       	mul	r27, r18
    2738:	70 0d       	add	r23, r0
    273a:	81 1d       	adc	r24, r1
    273c:	11 24       	eor	r1, r1
    273e:	91 1d       	adc	r25, r1
    2740:	08 95       	ret

00002742 <__udivmodhi4>:
    2742:	aa 1b       	sub	r26, r26
    2744:	bb 1b       	sub	r27, r27
    2746:	51 e1       	ldi	r21, 0x11	; 17
    2748:	07 c0       	rjmp	.+14     	; 0x2758 <__udivmodhi4_ep>

0000274a <__udivmodhi4_loop>:
    274a:	aa 1f       	adc	r26, r26
    274c:	bb 1f       	adc	r27, r27
    274e:	a6 17       	cp	r26, r22
    2750:	b7 07       	cpc	r27, r23
    2752:	10 f0       	brcs	.+4      	; 0x2758 <__udivmodhi4_ep>
    2754:	a6 1b       	sub	r26, r22
    2756:	b7 0b       	sbc	r27, r23

00002758 <__udivmodhi4_ep>:
    2758:	88 1f       	adc	r24, r24
    275a:	99 1f       	adc	r25, r25
    275c:	5a 95       	dec	r21
    275e:	a9 f7       	brne	.-22     	; 0x274a <__udivmodhi4_loop>
    2760:	80 95       	com	r24
    2762:	90 95       	com	r25
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	08 95       	ret

0000276a <__clzsi2>:
    276a:	06 d0       	rcall	.+12     	; 0x2778 <__clzhi2>
    276c:	84 ff       	sbrs	r24, 4
    276e:	08 95       	ret
    2770:	cb 01       	movw	r24, r22
    2772:	02 d0       	rcall	.+4      	; 0x2778 <__clzhi2>
    2774:	80 5f       	subi	r24, 0xF0	; 240
    2776:	08 95       	ret

00002778 <__clzhi2>:
    2778:	aa 27       	eor	r26, r26
    277a:	99 23       	and	r25, r25
    277c:	29 f4       	brne	.+10     	; 0x2788 <__clzhi2+0x10>
    277e:	a8 5f       	subi	r26, 0xF8	; 248
    2780:	98 2b       	or	r25, r24
    2782:	11 f4       	brne	.+4      	; 0x2788 <__clzhi2+0x10>
    2784:	80 e1       	ldi	r24, 0x10	; 16
    2786:	08 95       	ret
    2788:	90 31       	cpi	r25, 0x10	; 16
    278a:	18 f4       	brcc	.+6      	; 0x2792 <__clzhi2+0x1a>
    278c:	ad 5f       	subi	r26, 0xFD	; 253
    278e:	92 95       	swap	r25
    2790:	a3 95       	inc	r26
    2792:	99 0f       	add	r25, r25
    2794:	e8 f7       	brcc	.-6      	; 0x2790 <__clzhi2+0x18>
    2796:	8a 2f       	mov	r24, r26
    2798:	99 27       	eor	r25, r25
    279a:	08 95       	ret

0000279c <__prologue_saves__>:
    279c:	2f 92       	push	r2
    279e:	3f 92       	push	r3
    27a0:	4f 92       	push	r4
    27a2:	5f 92       	push	r5
    27a4:	6f 92       	push	r6
    27a6:	7f 92       	push	r7
    27a8:	8f 92       	push	r8
    27aa:	9f 92       	push	r9
    27ac:	af 92       	push	r10
    27ae:	bf 92       	push	r11
    27b0:	cf 92       	push	r12
    27b2:	df 92       	push	r13
    27b4:	ef 92       	push	r14
    27b6:	ff 92       	push	r15
    27b8:	0f 93       	push	r16
    27ba:	1f 93       	push	r17
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	ca 1b       	sub	r28, r26
    27c6:	db 0b       	sbc	r29, r27
    27c8:	cd bf       	out	0x3d, r28	; 61
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	09 94       	ijmp

000027ce <__epilogue_restores__>:
    27ce:	2a 88       	ldd	r2, Y+18	; 0x12
    27d0:	39 88       	ldd	r3, Y+17	; 0x11
    27d2:	48 88       	ldd	r4, Y+16	; 0x10
    27d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    27d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    27d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    27da:	8c 84       	ldd	r8, Y+12	; 0x0c
    27dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    27de:	aa 84       	ldd	r10, Y+10	; 0x0a
    27e0:	b9 84       	ldd	r11, Y+9	; 0x09
    27e2:	c8 84       	ldd	r12, Y+8	; 0x08
    27e4:	df 80       	ldd	r13, Y+7	; 0x07
    27e6:	ee 80       	ldd	r14, Y+6	; 0x06
    27e8:	fd 80       	ldd	r15, Y+5	; 0x05
    27ea:	0c 81       	ldd	r16, Y+4	; 0x04
    27ec:	1b 81       	ldd	r17, Y+3	; 0x03
    27ee:	aa 81       	ldd	r26, Y+2	; 0x02
    27f0:	b9 81       	ldd	r27, Y+1	; 0x01
    27f2:	ce 0f       	add	r28, r30
    27f4:	d1 1d       	adc	r29, r1
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	ed 01       	movw	r28, r26
    27fc:	08 95       	ret

000027fe <_exit>:
    27fe:	f8 94       	cli

00002800 <__stop_program>:
    2800:	ff cf       	rjmp	.-2      	; 0x2800 <__stop_program>
